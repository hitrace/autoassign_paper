%!PS-Adobe-2.0
%%Creator: dvips(k) 5.992 Copyright 2012 Radical Eye Software
%%Title: supplemental.dvi
%%CreationDate: Wed Nov 12 17:06:22 2014
%%Pages: 9
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%DocumentFonts: NimbusSanL-BoldItal NimbusSanL-ReguItal NimbusSanL-Bold
%%+ NimbusSanL-Regu CMR9 CMMI9 CMSY9 CMR7 NimbusRomNo9L-Medi
%%+ NimbusRomNo9L-Regu CMSY6 NimbusRomNo9L-ReguItal CMSY7 CMMI6
%%DocumentPaperSizes: Letter
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips supplemental
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2014.11.12:1706
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: psfrag.pro 0 0
%%
%% This is file `psfrag.pro',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% psfrag.dtx  (with options: `filepro')
%% 
%% Copyright (c) 1996 Craig Barratt, Michael C. Grant, and David Carlisle.
%% All rights reserved.
%% 
%% This file is part of the PSfrag package.
%% 
userdict begin
/PSfragLib 90 dict def
/PSfragDict 6 dict def
/PSfrag { PSfragLib begin load exec end } bind def
end
PSfragLib begin
/RO /readonly      load def
/CP /currentpoint  load def
/CM /currentmatrix load def
/B { bind RO def } bind def
/X { exch def } B
/MD { { X } forall } B
/OE { end exec PSfragLib begin } B
/S false def
/tstr 8 string def
/islev2 { languagelevel } stopped { false } { 2 ge } ifelse def
[ /sM /tM /srcM /dstM /dM /idM /srcFM /dstFM ] { matrix def } forall
sM currentmatrix RO pop
dM defaultmatrix RO idM invertmatrix RO pop
srcFM identmatrix pop
/Hide { gsave { CP } stopped not newpath clip { moveto } if } B
/Unhide { { CP } stopped not grestore { moveto } if } B
/setrepl islev2 {{ /glob currentglobal def true setglobal array astore
                   globaldict exch /PSfrags exch put glob setglobal }}
                {{ array astore /PSfrags X }} ifelse B
/getrepl islev2 {{ globaldict /PSfrags get aload length }}
                {{ PSfrags aload length }} ifelse B
/convert {
   /src X src length string
   /c 0 def src length {
      dup c src c get dup 32 lt { pop 32 } if put /c c 1 add def
   } repeat
} B
/Begin {
    /saver save def
    srcFM exch 3 exch put
    0 ne /debugMode X 0 setrepl
    dup /S exch dict def { S 3 1 roll exch convert exch put } repeat
    srcM CM dup invertmatrix pop
    mark { currentdict { end } stopped { pop exit } if } loop
    PSfragDict counttomark { begin } repeat pop
} B
/End {
    mark { currentdict end dup PSfragDict eq { pop exit } if } loop
    counttomark { begin } repeat pop
    getrepl saver restore
    7 idiv dup /S exch dict def {
        6 array astore /mtrx X tstr cvs /K X
        S K [ S K known { S K get aload pop } if mtrx ] put
    } repeat
} B
/Place {
    tstr cvs /K X
    S K known {
        bind /proc X tM CM pop
        CP /cY X /cX X
        0 0 transform idtransform neg /aY X neg /aX X
        S K get dup length /maxiter X
        /iter 1 def {
            iter maxiter ne { /saver save def } if
            tM setmatrix aX aY translate
            [ exch aload pop idtransform ] concat
            cX neg cY neg translate cX cY moveto
            /proc load OE
            iter maxiter ne { saver restore /iter iter 1 add def } if
        } forall
        /noXY { CP /cY X /cX X } stopped def
        tM setmatrix noXY { newpath } { cX cY moveto } ifelse
    } {
        Hide OE Unhide
    } ifelse
} B
/normalize {
    2 index dup mul 2 index dup mul add sqrt div
    dup 4 -1 roll exch mul 3 1 roll mul
} B
/replace {
    aload pop MD
    CP /bY X /lX X gsave sM setmatrix
    str stringwidth abs exch abs add dup 0 eq
        { pop } { 360 exch div dup scale } ifelse
    lX neg bY neg translate newpath lX bY moveto
    str { /ch X ( ) dup 0 ch put false charpath ch Kproc } forall
    flattenpath pathbbox [ /uY /uX /lY /lX ] MD
    CP grestore moveto
    currentfont /FontMatrix get dstFM copy dup
    0 get 0 lt { uX lX /uX X /lX X } if
    3 get 0 lt { uY lY /uY X /lY X } if
    /cX uX lX add 0.5 mul def
    /cY uY lY add 0.5 mul def
    debugMode { gsave 0 setgray 1 setlinewidth
        lX lY moveto lX uY lineto uX uY lineto uX lY lineto closepath
        lX bY moveto uX bY lineto lX cY moveto uX cY lineto
        cX lY moveto cX uY lineto stroke
    grestore } if
    dstFM dup invertmatrix dstM CM srcM
    2 { dstM concatmatrix } repeat pop
    getrepl /temp X
        S str convert get {
            aload pop [ /rot /scl /loc /K ] MD
            /aX cX def /aY cY def
            loc {
                dup 66  eq { /aY bY def } { % B
                dup 98  eq { /aY lY def } { % b
                dup 108 eq { /aX lX def } { % l
                dup 114 eq { /aX uX def } { % r
                dup 116 eq { /aY uY def }   % t
                if } ifelse } ifelse } ifelse } ifelse pop
            } forall
            K srcFM rot tM rotate dstM
            2 { tM concatmatrix } repeat aload pop pop pop
            2 { scl normalize 4 2 roll } repeat
            aX aY transform
            /temp temp 7 add def
        } forall
    temp setrepl
} B
/Rif {
    S 3 index convert known { pop replace } { exch pop OE } ifelse
} B
/XA { bind [ /Kproc /str } B /XC { ] 2 array astore def } B
/xs   { pop } XA XC
/xks  { /kern load OE } XA /kern XC
/xas  { pop ax ay rmoveto } XA /ay /ax XC
/xws  { c eq { cx cy rmoveto } if } XA /c /cy /cx XC
/xaws { ax ay rmoveto c eq { cx cy rmoveto } if }
    XA /ay /ax /c /cy /cx XC
/raws { xaws { awidthshow } Rif } B
/rws  { xws { widthshow } Rif } B
/rks  { xks { kshow } Rif } B
/ras  { xas { ashow } Rif } B
/rs   { xs { show } Rif } B
/rrs { getrepl dup 2 add -1 roll //restore exec setrepl } B
PSfragDict begin
islev2 not { /restore { /rrs PSfrag } B } if
/show       { /rs   PSfrag } B
/kshow      { /rks  PSfrag } B
/ashow      { /ras  PSfrag } B
/widthshow  { /rws  PSfrag } B
/awidthshow { /raws PSfrag } B
end PSfragDict RO pop
end

%%EndProcSet
%%BeginProcSet: 8r.enc 0 0
% File 8r.enc  TeX Base 1 Encoding  Revision 2.0  2002-10-30
%
% @@psencodingfile@{
%   author    = "S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry,
%                W. Schmidt, P. Lehman",
%   version   = "2.0",
%   date      = "27nov06",
%   filename  = "8r.enc",
%   email     = "tex-fonts@@tug.org",
%   docstring = "This is the encoding vector for Type1 and TrueType
%                fonts to be used with TeX.  This file is part of the
%                PSNFSS bundle, version 9"
% @}
% 
% The idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard encoding, ISO Latin 1, Windows ANSI including the euro symbol,
% MacRoman, and some extra characters from Lucida.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% These are /dotlessj /ff /ffi /ffl.
% 
% (4) hyphen appears twice for compatibility with both ASCII and Windows.
%
% (5) /Euro was assigned to 128, as in Windows ANSI
%
% (6) Missing characters from MacRoman encoding incorporated as follows:
%
%     PostScript      MacRoman        TeXBase1
%     --------------  --------------  --------------
%     /notequal       173             0x16
%     /infinity       176             0x17
%     /lessequal      178             0x18
%     /greaterequal   179             0x19
%     /partialdiff    182             0x1A
%     /summation      183             0x1B
%     /product        184             0x1C
%     /pi             185             0x1D
%     /integral       186             0x81
%     /Omega          189             0x8D
%     /radical        195             0x8E
%     /approxequal    197             0x8F
%     /Delta          198             0x9D
%     /lozenge        215             0x9E
%
/TeXBase1Encoding [
% 0x00
 /.notdef /dotaccent /fi /fl
 /fraction /hungarumlaut /Lslash /lslash
 /ogonek /ring /.notdef /breve
 /minus /.notdef /Zcaron /zcaron
% 0x10
 /caron /dotlessi /dotlessj /ff
 /ffi /ffl /notequal /infinity
 /lessequal /greaterequal /partialdiff /summation
 /product /pi /grave /quotesingle
% 0x20
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus
 /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three
 /four /five /six /seven
 /eight /nine /colon /semicolon
 /less /equal /greater /question
% 0x40
 /at /A /B /C
 /D /E /F /G
 /H /I /J /K
 /L /M /N /O
% 0x50
 /P /Q /R /S
 /T /U /V /W
 /X /Y /Z /bracketleft
 /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c
 /d /e /f /g
 /h /i /j /k
 /l /m /n /o
% 0x70
 /p /q /r /s
 /t /u /v /w
 /x /y /z /braceleft
 /bar /braceright /asciitilde /.notdef
% 0x80
 /Euro /integral /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /Omega /radical /approxequal
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /Delta /lozenge /Ydieresis
% 0xA0
 /.notdef /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot /hyphen /registered /macron
% 0xB0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde
 /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def


%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
%%BeginFont: NimbusRomNo9L-Medi
%!PS-AdobeFont-1.0: NimbusRomNo9L-Medi 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Roman No9 L Medium) readonly def
/FamilyName (Nimbus Roman No9 L) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /NimbusRomNo9L-Medi def
/PaintType 0 def
/WMode 0 def
/FontBBox {-168 -341 1000 960} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B8E178732AD0E135F772215
EA7EB7EA7641D31502E1BB9661E7B0E875AEE90400138F2AAF4A8686C73EAA44
E5CAB467770A3D12E9807BAC97B24A8EFB0E276760F4F51EC7123C43BC6F8DCF
9A2F496A9172813FB461FD870763306B45670653A9780FF409B734CFA74C12CD
150B03344295918C4ED893FB620A9499404B83C71152BF2F2DBF769000D116D5
EE264C016EE3E1241018F59544CCE53E5AEC124CF6C59A4D7D7D511ECC9AFD49
6608ADDD237358D7CF8B4D1C5BD1158CDF2D6469D9BD6E6D9762ECF34D1C3C27
5F69900E0D12AF9B21F153585742E999870BEE3DFF6309CD82968EBB40D9C269
CD4306654AAB6734151132DE4194072485FD082FBB6DFCB3FDFF9E1FC88D9483
8AA64B5825293978C70C9EC095B18352BFDC34B4BE9C939384E3281BCC6B1808
A6B61EC4E47BB6AC14B105FFA7ED6AE99A1CA0B360D1A5C24E0FBB55C66F5811
A5CD0625654654651979A8C4C3612054181CD300CD42D1D9CAAA589118D6C7CD
5EA8A9A0C639D5539430D40318F4B739DA281ABF2BE2765D44F45B218BB192E1
9EFBDDF7777E8730FA7DC0651BCD5D68EB743C51D9CED55403021D45F77CAB5E
7E892B3D1F875DA86C030A2387487DBAC8795749E849EC93439C9E22EB20D11D
07DA0F09EE9356D55B8D0D8555F1B0EC98C72863B376D3436E10DE2FB1AB9453
DADA019DCB64F6D059AB3A95B28B94435004C9A8BD3FB80E2B9DE0E330D03622
3AD965B4283E6DC880A2130185CDABC053C52693CE3F50557F524D7CCA9BE05B
FF9597ADF5D1C432C00C0B0D8EC2CA8436685B4BF3E2105B89FA6CC787B77637
248796C2F43872B3BFC8011159C22EDB7149AD8932360A88A223CC638BED257E
04908032ADA750F17279F7331189C322CB5ED9B66E502945BEB1EC68B1C7BCC0
2322EFD669C229B28CE1D0CBC0005FF967D0A4383E29538AFA13D41D484D739E
487D497DEAD8F661847A5D82D77D91219ACF666E565292384728E58E1A489054
8C3E34B413A6A550C499218E7FCF43694CBEAD016119CE85515F5EDAE3CD483B
A0F32743E7A189708AF0CB6FBAB22AC8F23604FFECE038C838472CA40ADEBF08
47AB1D450E07F9D51828D25DDCA679E3FAE54634A37AE1A5A778365C5A2C8A27
64085AC775AC132CCF27CA164C4721F67B63D52E388B17122F15E5DF391674CC
B6C9EDE307D79E390068970FE0AB210337558544E8CA59BD8BAD7D2ECC69471E
2E0BFFD4778A2E21C19645790DD11C5A93C1C33BE13B6A35DA4487D9EE9B38A4
1B2049FC64E228D7319ABCDFA4A29B08A08DD8430B4EC67FA6ECA214DAD0BE07
680225415ACA2FC86CFD32CB6210B93F60CB7A2A2959DACA9F8C687C1205E017
F6EA82A4848CCAE33228E1E6E2034652553A03E1341025B4F50E8120F8B23987
4FFE2072A731070FFB5095F90DE1D3230BB98D2190912BBD038F21047D0019EC
277F35014DC7DCEB4DDDFFB4612C0862322F6714804141805DCDB4DF615E2CB6
4980C415B399C243978F660F023AADD86B025FE51B8D9481AA5DD8D1A6BA4453
2245117DF5BF0C4F6527B2A51C2974914930226DED7E77A8B4E0B5182C1F9F01
C677EE3F7513729865761E9A49C5275E66B11394A9468B30AB81F677461C61D8
B3624F4EEBC57CE06AA9A9C2805F46DD31F1B1DEBF5A230721E51750128367A0
AA72945C949104035D601CAC8F4EB2F16F8765614227C71C390C32ED5A690A77
6E288BEED7010ADB1076B23257F94841FBF7CEFC601FEA3FC202C8478B0E1C44
B0D90C20DADD09A5E54B4E5F84D18147590E054B70E3F30CBA547A0EEC06C030
DC43B2245F9D24D31A31F06EBC6577C4C2E9AAB40061A6764E557CEC87DB572A
42B4F49F6357021F6B56DAEA3577DBB01E39FDA69C81621E58EB3432279EF8F6
94AFDE8C03B25BFC2B5CDD2591517589BAAD70364C33665F90E24D35581DA77D
776D1F943551940DE4888AAD7232E4346A5BFE8DA3DA8F90AE4A346B1573B9F0
2724722B9B749AFD87E637298E2FE8B89FDEF364C224B3C87F241CABC4F99545
5BDFC8B2F4034CEADEFCD37AD00965FFBF1B3E34CA96E20B322634A4B9ACF6E8
EBF4D89FAE17B29A59D2C3A8B7D1C980F68154ADD2B898AEE28CE031D2246AC5
2E4AE50F7BD257B07D5381D5D2D58BA185A68C4DEE153C22A8892810D52DAF92
FEC5ED622695BDC4004A3E7106F07BE19F615DE3C05D857420EC80297405306C
156B8944F35A6ACB595B92D2C8896B75CF9C71CFB940B5AFA343836CDA62B25A
D857A0BE130FB1B35C727A6BCEDB0CE7E0833CFD25AF4E109A075B305E8D55DF
776B63206E910EB1A464BD203761ADD4D43E8F3A4387F2203FE55A39C08EEC60
66A47AF2111C9A3A6757C0E1421AA0F101BA284D079A7D06D8D7E20E0C21A62C
133DE3866CB703A5B760715238B61A4A3DA50CCEB553325437EF1F238C8C1351
682ACBF252CDCB515E4485E59DF38F5D6FF092E1498F8AAA6846B39BED729540
C46BDA6AAC09689487F5E0EB021CADA860FF84414DEF5E701BDC76E7B9700EBB
B54DEAF0039BF95CC4B8E53AD1E9C1EA0ABC02DF8661DB0F0E9413BE5DFBACD2
586F3D71442DBE3042A47EBE4BA1FFB27582ADB63411F870A4523AE8E16F422A
B07D8800C1DDCE4B080189CB72C8870B3848FBB0C07F2F66F99FE864AD507F97
671C9D7CE4126A05403331F8E710D104AEA8C0409564BB1ECD1249588C18D01D
8AD4E0F004D54D5982CB77E9A0E37AF5E9937EDFE0952134DD697BF5A99FBA80
F0E24128E0045A5C6DDAC94750B602C372C2F70F13DDA614AC122D353AB33D89
49B97B1D1D95896B8F275D9423DBE3730633BB053B59020B7FFD06DC6D27AF94
F660759B7B78206BB5E077D703D6372388C1E140DA4004919027257F2186CF71
6C685494D860792433C3DF19EE7B5C27E7BE0538ACEEDA4B4D844AFEF7AB4D8D
80796139AF5C86F2A803AEAE3658A4D6F890DED60FF0D7FF1F6BFE63301EBF17
0D5323D07B0B85927AB450DAA16E0CFB8B0F52E2C3D44E9F45CF7FAB12E36D1C
8D846F2EAF047D8FF96CE8A5C8F90E8B083D69240AE9C52CB251F36506290781
178780D2FE9BBBD214F49D560B38FAA060136B0F9B35019689FDEE7EC35D8B09
81FA2B8A9D217D47C0EC7F8A8D28C7DE6C0046E734ED58FF64BB74F93BE5A2F0
FBDFC273B22CE420B15AB6F85FC7344CDDF1D3A314164FBF720F3E68A5E86D1E
869CBAE9A8658DAEA68FD357F57BAFA84E86ECFAD0116E2BF0ED5B1AC228ED55
B3CCEFBF5E05702FD0D550673DF99A77BE8126D8C7A712194A22FF86837271FA
F6CC611B6224705974AFE4A542C8641D8F704F9D0AD5994BCDA9640C3381707C
FFDEDD5CD673C4DA7643CA29C674A2D9E60460FD1316A57D615C6CF8A0E7961C
138F532C509270C53B5EA2E312F9C8737389DB61382349236C7DF3CB4B7D9B34
70BD3A0AED0CA4BFBEA1B778DEE3567136EB362446C5D990F216E5870FD8C214
62199DCC1310746DB1E972A895108F8E1C4F46EDD94978DECA64614754B66E8B
F866FBE139C33A36F623597D07C3AC20C386562952230D45446B1A64EF95C4F1
971C0640909B474277A1D0BF4FA4AFA4F58A968BC018E306C2C779B43B49D47A
B2C9695C7071CBA7A81A18B4F162F30339FDA69C81621E5F498CDA81F01E0CBB
7EBEBF9876CFC52EE5362FAE185F1CC630923ACE057116BF380CE2DEFCCC9764
7181C3640860CC76148BCD2C48259BBC799616204C9D6FDC7AF04123AEF30334
F0BF752C652FD9F7C7BEC627F330DAE5F88EA1343C04558EB6705ECC517965C4
284A8A12B07434EC7B319EC2A321A092EAD71EBE18F80827DBBE528FF9ECCAC8
DAF08B5F99CD7C64135AF75C84EC1B33C8D2CE9BAE522B4821985E2F3BB273C4
5AFD346545AD999CA1C6CE5D16A2FA826A806C0D781DB6A0FC125B78E725B1A5
1E10221B4EF82D270EF712C30399977104938D58FA78440BDE4C69A4A7173DE7
9A0DADBA7500AA12322CF101D2820C4B916D2585181D54F1F36A80E7CE6FB4EF
66525E8F15F63E8A9F64DB7890533FDC0E6FF7DB1FAD380ED084016C2559765A
A37BA1D1CCC2692113CC15C94DDD294049748B473FD5F4AE9C36583AB434161B
4CD9385A5AFA01532296FDA1DBEC190EA9D8964E0ADE352E5C7E82DBAB63CA3B
171E6A9C485A0E4C44FF6732B5B95A45847D1BDF852FED978A5742F8ED01E888
148FD13E5C9A282B17DA42E8B175B2D76EAEC0B69B8068D5D3E73CDE856DF2F4
629141CF756FDA6C650B01E2FD98BB41CF3FEEDCDC42284833870E3626DA537E
3FAE1C6A6D33F60B0FB537227112DC4B9BF6CFB71679D0B3CB0A769068573D30
B09DFF1F64032F829471978280C6753045428B379CECF8768B5E65E302A8ECAA
DB05709234E41DF3AB7395E235AAE82F3A1FC4E26E00261394B47CEA56C64F15
818E0D6F0D69791BC46626525B68F1CBACE1E0F9D4D4440FB00A297311EFEE83
94BEB8C6B8F43930B1F229D4148E6B5415B35CE69006908B65E2BF67A5D8711E
1B83B197849E7F160D817CED0C0847B7E9085CD37038646F1C558D45E8E7F07A
33BB570D256C7012AAB970DBFD0F422B60468F2EF9010C645A00CCC95B68C83F
CADF396F91212484F66764A0D815C7E354B73B808F50AA33233E17C2BD09A1C1
84648EA8B562236B8C4F251296C50757DD30639113DA11A98FB90364F008A13B
111F4D0EA2E0A25B9C7C4F5C41697EF3CCE5419730E32279447D968F75DC250C
3954162F74C0EE7A00160C311BE8AFBE8A1587A7BC96C8C35FEB815ED98DF332
33956BB305E2111EC5326DCD0180A8F14FBC5B5194CC16900D564658F0A4ACFB
0CFC3F7D2668AC317CC095AA7E537227DE9FF96147F750256CE1DF6441DBCF29
CB373865E3627DC24E3B67E616D26EB4017C11A6393B2CAAEF22AF24628FBAE3
E3F75C310BEBF002BFA9FEAE7EEFF90937C6FB7A0C27C56B44B37C97E610EEB4
0F386E1658C134D080C501D3D8DDD816A28D7BD2D5965B1F1798896367860809
86379827EEF74296BF90BD5E4DC2D5C51DCFE8289BC38A60B266753A0AF5AA7E
88B3784D0778A4244CABE397969898F31A235A608F3C543A4BCEA5CD545C37CF
B123F9C89089D6E93E53163283F11F31F9F042B12B8B12770C1D8B9A5EB26D3E
47794A8D4AE3E9D6174E15947BD4FB483E948A5AB3690E0C36F50F6025D8B02B
357C001AB69A33B1FEEB29B3F31603A97ACF1EE6CA8DB2259526C17F732FE2BA
1F6ADB2A95D564B19A3035E27F66F2D0895FB4F935DCFD3C8933CB6D9DF7AB44
7CF9F3D019B148C89AC6EA4D32C3B9B2B331A3242DF909240C305CB37700680D
76C4999A084387EEED6A7E3ED2C9DA248C395C6107C75D9D2B65F3EE767D66B8
54DDA85E5DD5C024B247C6565F70065606CB94172C4E26D5C7F34A58F280E921
678ADDD64826C5FD853AF5628FB3D18A8C6AAEF0F3E68125D74578E28D0EC055
FF5BFE5E4C6680F89ADA9B12347E45ACEC7DAB744C872F6313DF6D4034A82114
42C30C8E395426B62B66AA81F77512086562D5A518C5FD80EBC5EF576B1DE985
A0BCB50E5204E612A84E61DA20F004DDB1EA743DEABC788D7AEF0E05AFCE5998
47B993C18E41D0CDEF4032AD96B99D6B0552827DA0314702CB49E7C498AD754F
892818827429BBCCBFEAC256D112985835F261538F608C93AD98BE21386278FA
FF04B060C147B376F859B9E0A537F632C65B8167BD02484F3CB292C26B4D4879
B4606824E8DE24F183C2798B685F94D64401E3AEAB9A532E429A2CE5A13DF3C4
78C8E650C9413BF33C403560DC864AE63A010BEDCDEE4C69AFFEF898EB2EC6C9
5DE1A7D7574828918BABA81A5F36CC8C1A95F3E713D5B093A873A285371846F4
5464D05A401B275481C9A329939DB53A12F99EEF7DC1D74BDEA77930F4D20FDE
9C68B94AD1D437CD276481CB20193A086FA2D59060159FBFF468ABD37101B195
B2E4A03E43E92D8E74BFFA1B2EE32604F73C881DD26B35B4D9AC82E47EE10CFD
8A4E1F4023DE13C1ED0062B9E8EE8CCB1DA1A852E5440ABBC051E061DB8E7AC8
92C48C4A88D798FF5E6CA695312319EF6715F0FABFE565F3CC71114F8508EE87
CA87044679EB5238288782F9C7C02618EF450F84B5A7C151F4F6EDA93EA9660E
33D4589C54F7F2531C0A4A94D51CE9E062B9727F17A9932589114E28A4E15D70
15D6337774148DADF08503BFDD36AAC773830C67D2F4AB64BA88078A07B4DB12
51BE920C8064C059A98C1020AEB741985FD32B264F4A631E92DB1FF38241A892
9D1C399FFEFE6F4068DA3748ED96F6685C901BDD9F7CA559366224B5089EC382
42C92504F0A794CFF1B2D006527F5B5B4F1B1E41A0FEFB8C0ABEC3816ABD57D7
43801B33765C5F0E54E5A0A60852F88ED0E367004889565F62A189B5DC1FC1BB
7306702D65DD58CB504D67AA954E4F3A4FDD3F7106687F9DEEE8AC8C52941CE5
A88BF1F8861BD817263D05AA870045715AD62477EBCAE371B595868C2BFF044A
D6E491C01211B9BBC1212013A533B501A088CBF43126340B9F9D22F16E40184A
3697C368E4E09A0E265BD2750A6E07486D39DD38FEC1C6FA2682FB89B797E330
D171B3A90D62613C595D1E9A254080B3471813A500AA9F3C2758B712615F4471
345F2DEB8DEF75F0F20B0C305C62985BC14A1B6E9BD0E86AAD258D956038D524
460D4752347F23267C1A55C1CC3D29FCC7D0999A48A7862A1246B6D57DAFBEBB
A63628520A97B482055719D9B05442205D2473E85B16990955BCA1F6164C53B7
6107A382CE5800862A548DE99D838441972ED200350CFEDB5134D4C476347B8D
9D144919E983245104701E5BDBC822B75C8DBB2F8FF37A0E3DAFDE41E375C3C8
FFDFCB7B46B1A7F72D6BD0C366DA0FA56158E82042A40E6DF25188AC34773CA1
BBEA69388E2960D45FB08C1521EC1901FEAD54C3B3B9C0B254BFAAE2831D675F
FB097052586115774C1E983CF174C91AF64A4AA1E693B12353603DCBCA24E149
97D6BC3A1C4E266C1673F676331554D1959FE6E01E639808196413AEA47EA711
2F2253C4F84A3C3D178CD1E4C04A68FD24E7172C6D64A6930EF0F1FA6BCD76EC
041636833A635CC88BFF6FFFA58980D627942ABC107DD12F0B4B7ACC47173979
E25D876E251F0478134B15477035843BB0E37C1BDF1FF948ADF90E8319EAFD47
0A1867F2DF1CA821C65995B9EFC114DA73DD33BB6909587ABAC7C7A4BF4DF6D6
E09583797D5DC5B0DF9B70EF0A532885A495990A9890AD3EC93BFDF9ED71D4E4
1598262EF275138E2F93C99BDC2EB03C158F0B4753D2A07DB440F45FC2E60732
C95CF212068AAD68EE464710A38B3AEB48174E105A63275BD700D93294DF33A8
98461E58221AF5C56F8286ED5FE97133F849E6B56C410A5177439BB244AE531A
BE23EED674DF84B7F365E559453036460A8E4A26E593B264399D901F1DF0824A
B699C8288FBC0046ABE6DE93047881683848DA6B26D3FE69CC86D6035B274091
5788BF3C0A510F222E61CCC0992B66DA8D0EC8444EE72FD0560666FF06CD84A7
98FF6FA7141E7801ED3C59080E17EBFAF0C7F88CD26D524D87ED96AAFCA126D1
5290D7C03CB2152465608DA775FBDCDB77A2CFAC016CDA8342AF66C3239291E6
9DC6B1316DE8F37EF9EFF28A1FE717C52DC8A2AE8583E409773C7218C6A272F7
5CF3FDC2A0294B68E18FC756155888278110F6132AE775D1420555ACB4E3E205
CBE8D2CD22B1B00C5F181E9DF46EEBFE36A6E658BD6D9B72486CD5D51EDEB314
94A1D11B816D02FC22B7ABDC397EC4373B931A9785A647D8B37F69A637BCCCE1
9CA338CCD852E4A9483B77A3E8EA484E2B9BC3B4E541521F9AC555812A74A0DD
7523509F1F0D1AC2C81C876EDCB3A7AE00A7D209E48A0FB439E9C6E2A8EBD41F
075854288BA0042210C9EE2EF20E37DEA0926D272D739FD2586124742DF31D86
F20EE0C95F28764E1B3E1115640512A8F877B2EDF84A11E70470D37AAC4366B8
2988388A99F15CB2348BDCD68BF6AC96006045B92C832BF9D3B95753EA7A8E22
29F94F3B360D1F7D0B7CE61AEDAAEF98864FC1A957654C3C9EDB461249DD27D5
5A3459FF867D15160AE11CF05F787B2B565746C211F30813630C7EE7DC360B64
11E38EC99F57AD5A1601A6C2E44D2B6799B72E8BF17590DEEFF70AC43BB1D475
1F2300AE08D42010CB554E2D6BF5D86AB32DC91F6FEDE3BAECCD7634E2F501BD
AD29D0B598AD3CFA3FA307DEDB9DA82C6E3F3BD5A0D494BE25B9D77A34EEF4A3
FDBB4955AFB80E29624020B136CC2E88D6BFA17D594CB621F72937617D922CE8
9B0B1C62221B95FE357BF67271EE6EED93B251B11A9063452068859E771835EA
607E168019FF408B3C783D071BFE1EAE8A2CD96CD06B3C08959B8B4E6FBCC7DB
D868357438740DA5759D88CA15505CD09A4A3F3D9990F966A842ED694A254406
1B9472A27E68017EDD007CD09592DA24C6F37266B6C949094A27E11CC9B35D8F
683356A21D1454AFA9C95558B8086CA5E6FBF520CC2C3A8EF41418501CC4FE83
BD860AAE3C935D7DC2CC06B431A81C73EA0E32D673FAEFEC800830FCFB6D3A3F
5CE97CA895DE7D6C8CA8F830DADCDAA24894ED2A5B5931EE9C79E4F150DCDC70
7B605BF15540DD278DF04F7CA22DA9640469563E135AF23680C0DA9FF7E6BF42
98E548FE405D01D18D8EB91D2AE55C6756DD5D25D06821F2CCF1DDC6FF153BAB
1FFB8232AAA9795360C83D537D6FC32389A0081A6846E1EA113E1CD62CFF43B8
FE29E702711D60CDBE68ED55E7F447F42A75FD9BEA16B3FD226B3056E8E609A3
024C0C3FBB14C9CFA49883DD983579A30AAEF5EED556892279C49A48C6301EA2
19A85DD57C952D701F58E989B4EAEF3E452889175FC90DDBF386F4CDA38D4463
B995CF6379E434C76BA3FC16C1E62337EE4094092E61288B9CB288231E121EB1
4D7AC94A217669C30B543B1CC844AD7EEBDD1EFD786A2F49828B78B9FF4F5EB0
2E0102882306295090C920B4FA5FD6B15386F3DF5EF55CB3CB298FF18F117C11
B4C026195584679DD797E92A7EA1AF6448573251000E28F830D44F1EEB7AF738
C9B9082FEC51C58D0E6FEF23DB037C7F5FE08342FB4FA5F8C15826ED286920DF
9960993BBBCBF095024D8EC55D0AF475F585B2E61599ECF3DBABDE9EB70E80C0
381AC8DF71CED30BDF496A8D3BC5C33C7E8CD1CADEAD63620945B22B353586D0
02A4EBF4167FA3B8B798AB048E71B51B3BA75BBC23DD3A0469D988EA01221F33
0746FB913FA421F85EB4086687E740D8095E63F70CAAEF65D1CDE37647019963
40DF30F4D117235385BD69D068F1BB3C6B565D24CF2119BB6357E64ABF5421FD
338F17B562E955B4EB2BB0656F1C924FFD9E94B76F6EB9D89B157A3F26BEA910
88D6511DC88C67B14D53270F9640BFFCB121BC035224792F38EABCEF94344ACE
8D6A0F557143AEE3EE3CAE110A39C054FD72789EBA34CC609FA509C6886BBBC3
E73542CF05E8E2DD8A29811E6DB9E8BC8392B8940C458A60F7990240926797C0
FF3963633223EE144CF28896B009B09B6FDA5D5AF706F0A30AB0EF438151C7D3
9682CE210B2FCFA5745D606BBE742DCDC69705BE94A449C5EB8F25AD3A0AB260
06B5C0940459D185813D76680ACB091CF98F2DC31D1A75EC143818F4C6D89877
475BD1510E15BE03BD781CA20D18948D1EC237F1F4E10E9278AD0673F8702560
FE526840EF5367946FBD9E9AE3AA79ACEDC06C9FC26B6305BA7EADCF4829603B
BDC544C175AF0249835F399A5539D63AF043C136465C5C6D211594915023D2AA
1E138960E32236C01A2D741C3E503A8FCCF926DB0147CCCFC3E876FA17F88C1B
C49F0FBCEADB67700C519F68E411E47AD41B7CFDECA30A337002719897FB5E07
1CF1F5F4AB3D7DE6374FC41926474C6ACA7EDE439692B163344D6662ECCEFBBF
2927F735A7705F685B5464E1FDE8190F962D5B40C0F9B0D304F9ECE6A911375A
627A3E39FF3C39D4ACA4BD88528A13FAE22EE3B71C15A99ABB518128D96F2191
AEB4D4ED8081B64AA644559B9B67DF455916BAFBBA743F216BD0C5D60B1A78A7
6BBD249D1E95EEF85AB528E8CD2DA99E33C7EF0EE9DF69496A2AB11506ADE702
CB2E8CA3FFB8ADD5C2470207BED8756AC38BAD25DBCE0ABE02B225FF51C3CAD5
27A8BD3613C8D447982AE814685DDA19B52F6C77733CF3FAB054C0054A7EE257
62D02DFA0029231EE1E3133136F8BEE07CA052A6E26D52BEC23C21EC0C0FDE23
75719E962AC102DA8454E8D690A5C6425A4804E4D928015F2C12ACD237580920
2C698AB39B218ECC7BB9128F40DFF15855371DE6569350CD6DE913053B7AE727
01875D1C11454C486F91191990E3CA1E247787CA8D8E8C9AB3714F439A1BCDDA
A06C54247BD18B7A124F020F8BC59461A320378301BDCC64A4006D61D6E7CCA3
4A307DA379E088CB8DA92C6EF1F4931DE0B7C7E22A39CE53FABB454EAF671040
BC872405B7183D2385AA4D74E4741583059D7C1573EB736C1C1E7E7CD26F0A86
90774EF897E24F3DC11CA32A2B04A6431624D00ABEA65C4A90D2C4E5F9C7B68C
529D31FF641F17339A6E54E6FE9CCFF1709071BF6A734881A87129390910BC60
92E488A3C84B6984F6C451D1F09E17711CFDCD2422C47EE3BC34234AEDFDDF3D
AA9B4F8213B032991B4970C56A34BF874AA0B22BB6BEF4727E4E7899CF5D6552
FD5503389482B965FE25789428F252816604A8636F094AA8E7FB78BED71DDD2B
71E06B8D8BB4F684C6BAC41DB45C89FAF15A33360DEA36DD7A7A4C22E6810CEE
D4972C2C78C4C6B62B3B22B9C2D13BABD37F82DDE8E6D99FCE977A7D1907F771
35F37B675676B11BF01A69895DA0B0419929915CE7931FD4C8F86E4A6D1E6205
7CAB2EC9E2DCFB10F92CCD2E657987A21BA98CF6AC7AA7FF68F1EC310768644A
651CFCFED70D86E3CDE60ABAE320528D9FA2C4CD25708BBEA3008C8FBE5381F3
4A8A81F9B9ACCDF7D54FFDDDA94D2FAC30E2EA1D502C963F663AB68D3EAB222B
8A28A1B58D86537DB2D0757DEB131364BF87E664D4864204DAA02978477577CB
08A616531C9AFC3ECE4877C6FD56077C00902C368AE08DF171113B57AA51A4A6
CE5C51818E4BC886D9DAC857CAAFF0C692D3D5E1500670D13FA3E595E9E45C73
31DCF94FF00C8935BBA34243592D4BF9D75DE413AD2D72F16ACCFADBB29C5F4A
4744F2E4207787281F8ABF77BE52EA4B43C800B62905DCBB142E6BEA41E8BC98
45F9128397974330C0025DB4299AD5CF97931B329F3A228BEA11CCBD331D015D
6E9E5F29B8ACAF8AF7F9CBE31BCCD603C5E6C823946B20398CF1E120A3FD303E
DEBEDE6A8114420964AF082A79D8939BE46BB58E2F88A306A0772F53E1D9CD37
E79832AE39CCFEBC1F64DADC3B9B7ACC66A1F031EDBB14671E6F1EDB66B99248
4D75D9F38075F356280D8DF05FE8661C233D1438CFC4E530F4B3CB3531C44AA6
2FF25BEF89CF289D743EB16E50FE43C17344F7F087692E1C326B4DCF69A2876A
631846F690A9858F4C4B62303B2B5D7F2529BD64135F764B8AEA5C2B88A823C7
69A21C597E37F70569576FA08406FF5C9697579C9E920DBFAD3843DFE5911FB7
C0843B7F62019FB1A4AC69FD7A03CE16483B5D713C1396E8CE620743B5D61160
26EA63C701FC4B636F21A18FC5B24DD86EC955D246C56E14DA6EB2F2210D5E57
63E6C4071D69BADFAA16C8A365481D825F0A52FDB9CA1ADCD5B63611678B8C92
7B321BEEB22A115403A2E98751D470A86113FE5E1F086260F9F1521732C8E82F
D263D91F2637BCFFD66D79111753E3068AF35BDCE82D435A638D59DDE32F9E35
F1FC71E71DDFD7EB12C61004DEE77AEFE98F597FA116CFB667209EA214FA932C
D0DCC4B0FD712067C11EDE89CDCA578F44DBBC55E67FF668B68DF661656F11BA
271A892C9279FB57B0124DA578F0C570CA43C5703249D51A2A337640613B3AF9
AAE3568472ADB6B08CBF183195C68F5D35BB88296B2AE372D3F6D88B33D9732F
9E8BF108C2A89E7C1F590B6A7F52DE7C40F45DE8C9CAA95F20BA17469780CDCD
4B9735A2C276105B4414D2D2447C03502D237115609C82621D4712CB9DE0BAFE
2BF1EAE91D3104A984BA37D961874932EE55414F5B0A4947CE3C4A3E4638F7F5
670CE801EBE28B21D2D3D5D7C2EA4BB370A45B4C24C03B8EF5E00B213DC2CD18
7740CA29E2340C6B228B90E6A95A0BC4B4C5E8CB55F9C5C5B7325382E679400E
6D13FC981B8B7BA148A6213028777429B87FAECB0996718403B58CEF9A2EDF4D
CCC27C6694BCA306967E5AF91E5930C83D5E82020833D4653E8B166FBB179DD1
B254790E9560F26268A477EC0478A9028599750A4DEF58237163B8DC952C181A
027E851EDDB28D5E779E6C6835DA6480BD4B74B7792AFB2E14D9B83BA91C2B1E
A421B4FAA458393FBCC655531E63A0164F6ECBCB78F2091C3AB3ED16EA12011B
8176536398419ECD98E1AC81A034EE0CAC781595012E2430FEAACAF58983891A
DF7594C6D4BEE4F32DFDC40F9ABC7EF09BA25160FE07DDCBE0A97B0C343AE1E7
0F27ECE927ECAAB47F5AC283950E9FCF3E028F3220B0DB7D4600A7C803AF7E13
1C9B38D44B7711F7F61952AECE76F5BBB78651D9A0139E80C1A341D2513EA9AC
327A6E7C72370886CC1B31A1B77E570DFF6D4184F7FFE44A1BB0F890D8EE214B
8C357F62B72DD5DBDB28B13F4800A4CA81C142399BA8CA73358873024EBA343D
24C800F5D10808F885A72937D79D4FB051D4B015146950C8927A259BF77FCCB5
ABDC05430ADE0067A9CCF9BA3A07F4B5FA747529A0824400FE074DABC3F5E23E
D8FC352A4895BD689E0240CC599367C83A52529722F000AE95D97BE781C851DC
3F31614CCA539397CA8C92FFF07EC0E8F2A030F407AA4DE33A6D4E74A5A4F260
B3E70BD1158F8454F61DAC779359A7B9902587A4EB4F49C72301421721BFBD26
1DEC518C4DA098CD9A21F3C9879D4AB5AA1E825B1687AD3CDAE77FFEB9D6F837
7E9EC6089AF8EAF5E1A8AACC2B878BDCE231A3674BC4CF6363699FEDDC1B8006
348D8C7F599ACF8F70B106F2598019CAABBD46C8C31FE7C6F82BBFFD4D9A7B75
830C9A7F9B92F586ED5275FCB6F068112687FA5BA3F5DB888EB6C85CBCB360A2
24AAD08B392C69896E131DFF34190B7ABDCEA23BA55F4DCE15C74D80B6D0334F
0AA508D6DAA6750E199195EF8AD6F2F8C2A013C8F18B2F59A4EF029F74CB90FE
6507DF9BFCF6905C48E16C034EC6B93620D20AA9899CB6A14BDF7F9D74227830
0D2265CF5FC1C5B48DC0074A67A57E9E376800C45240C574C2EAB68F6EFA9ED0
AEEFDA38EBCBE6D44BA082DF373FD11B3875DA3DDC087F0FA4BBB7F9DC7A3138
4188362067C43DB9FC6B28744FDE7ECC5C8EF6E11211DCAC4BE68D46EF77EB79
9C3F26B710C3A4E0412AB0338DACF9EA1376443DD1D475DBC4838002585C94AC
735779FD1E2DFD5D092442522A62ABADD94BA8DB50A1C59A9847D2CBB434447A
01EAF3BBAE3404AF40A5905746DC54CEDAB15EB67D9FAC2B0F53E9DAA4ABFDF0
310B85C14758359F2DE31D6BB776C7224005CFBB7E5D57B56536ADB32FDA0E9B
A2EE0C9A753501CC84A21AAABD1D671B414A1194E1B21C06FFB9569A8675DE29
81E3D85DCC55FF9EB664D1E8652546EE744D036505384D4F3EBFFE25E146A0EC
5E75F9E2FB58E32F9848F9A42DF4B9D2174DA2EE11351D7EC71551C4D04597BA
A8917363E2FF48D9DA309EC266D08FAA9BB96DDFAD2B388A591BADD38D67CC19
A8008B3BFAF17031138C2DDCD1A880A295D2AE8344EA03F3CF69494344C6B031
EF1CF518729EC6D2AC9F10D14EC1130BB869E99DAE67F957E96FE9EC0267664B
6C08B1B5728FAC37C0E0F40739A4C42C71F2585AC51F9DB0D77A4EDA71763938
B521831F4455599918BDAFEFDC64C2C014B3DBA159EE85943686D285862C7841
07803B869E583A235BA962587ED2395338663B796FB5AD902DC255FD9B33A54C
71F2FA9274114891E1B2FBA294C5475756B59F376E69786B69C1645F812D5384
4905516837307DB8AC802761BF5F090F4F1F4D8B81FE0416E003121C91F51B9D
37BF9F2661A391D6F30511B21FF4C174175B2831058822B933DBE1D6B939F278
2F19992190497C48B4C99A59DBE0D0ADA5FB26AFD7293CFC574F9A985E6F00F5
EC3D95E884CFCFE01171AF03CF1454EB7CDA2E9F81B427BE5DB102122528CE69
A6C47F6C85DEB55317AC83C4C9C1AD86B9C27A682D81434FC89C886D563295CB
D795572B0E82F5EF3144662A9DDC99A6F71C755A7B25F24EE77C66AB81436CBC
A23DB04855F559B787B4A783A8EF2AC87D3424B80F4F24253AE07EC1F13B656B
D25CCBF5DA98229105F7B50512911824F88273A6FF666AAC8E0FE1C8F0AE3750
E973C512B97A3E447098C3BDA106088BCED9CE8AE79B9BBC9A2B6434F6A14659
1755E62F432899D14E05FDDBF0FA1E8A290648D3DB770C56ABC0B801AFF2C25A
91B06781BAC8F6D4904163B63F2B792E8D6D858747B3446F5294D96D39F47C9B
DDE6B0F363146C1AE82FE8FE9932A3D57823BBAC9FA627D1DEDF851B1C39940C
A85B78344A112151F68117B8B17F3714CECB3E5867F7686287FB652D60022A64
A1947A0FA561BF8C2F84890A0DD370E9BC3C046BFDD29346909384ADB76AB237
76AE866677A559BA81254CECE05B6DFADD776E2B0BC9D7F483919555B54B0535
C92758043738610CC01AE60F219B9788BA2944BF5068D261DD29EE6C85868021
ABDD2CD9D395ADAD6B6E15F86B4D476BA635473FD4CAFC366489C92FAD9A892C
662C3CA83288C0D84F23DF6BA8169EC8085AD95363E1F9635F1D06689926F875
4D9A75243057A5C5870028EE0E64E8B5EB379ADF80472130B2B1DFB099693733
52B4327DDA5C84833D9AF91C5E16A05990C18EA985730B8197C4233126F9507C
5C13AE596071E99953DB365CC9367CF779670AA8ECE38F6A4F4FE4B2AF2A0040
37EB15969ACB93FEA3EEAC9098D263853DFCCB01B0BABE8BED5517F1A8A6A49D
2AEC3E10801E71BF4D4711B5C77AFDE7A446E6A57B58CD39274656E9BE2BF6C1
58EDB14B5C78C2399F0DBC2BC6DB746803E6F45ADBFA350A1B1F5957DF0AB1B9
86EBC55FD5BDBFB766908B8F16033322741C2458EE4A8C8AA89AD34D66C2FED6
6CF8D10A8DCB1ACA0184E285545D05143757FCCD7B684A6DE3F87C26637553E9
1058D4C38FCB3F125639CE6B6CB8EB3B6F6F3107113DB968594A30078714AFD2
BE090FD0A8724785ABB2058DC805F73269D90B8F63F06AE7E313ECAF05373DD0
1B37EBCB8C782DB06494427BAF5CF1B41BDA01D7778638C90DCC5BE8AEBCB9CD
3F80DA59340C9E9D7D69A43449C4477ED04EBEC9111701E5E0B053F5991E1A95
B5D9E230EAE84C047D636122AC4CD0F27BE591579EF1CF5D7B494EA32FC73412
63EBF704A6D16ABD9B259804C8A7E28CF4319FB4183B01F4293D1D7D5BD040A6
C8087ABE1611157660CC17EB1D2F17B53092A9D91B001FEA96D801190B540A15
4061A2040490C05789331AC05EF8162FA2DC22713D9F19B7A26BEAEF14967334
BE0EF85869371C5F4C9C269115102438F9CE14943D9C0315D823CB32A7E9AD71
C114097A385780FDBD3EAC
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: NimbusRomNo9L-ReguItal
%!PS-AdobeFont-1.0: NimbusRomNo9L-ReguItal 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Roman No9 L Regular Italic) readonly def
/FamilyName (Nimbus Roman No9 L) readonly def
/Weight (Regular) readonly def
/ItalicAngle -15.5 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /NimbusRomNo9L-ReguItal def
/PaintType 0 def
/WMode 0 def
/FontBBox {-169 -270 1010 924} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B8E134D4CB5ABCED39AC635
DA001E9934C198A7F9B9ED0028A85E9AE00421DFD8EAA3BB3B4B4CE45D209303
237BD51809FE4D880900B1EEB236ACA87B9FF6EBE6B994A60AF5D67CCC42BD56
77295C346EB4C62BDC1EF22EE07DAAD928DFB73455F091F32408ED6430B97417
683AF27A03718A156E3F6E7B6E4F2E8177503CD82DDBF4557A3CCFF4C858AE7A
F7EFED6CC521A28342436B953E4650B5792BE85EA2F989EB6D986905A61FA38B
96E1BBC830B74469150FB0B598A794FD80D10870084A877273A9502C3456E5EF
74350E6E3BE5863E8BA185EB59FB87B36566AF71200B6ED389D1287D4E925E33
B2383ED05D87D48586E698FBC5D562ED9D8A09EC3EAA1B1F300224AF20C23F26
A2EADC74562571DA84B3914D1D80B127C6FF4706C7046BBB372A0013E0AB94F0
C27946583871D272BF4F20FA84E89D745DE7BBA885CC09BA72E0F530ED4EF7D1
864B3C67007ED98800284235372F0A70C912E21E851AFBF812165B8DF912CD1A
013E271F0B347967876C68AE4C4107EF8AD1F170916210034C66394A9D971B68
FBFC1131E37FC178EB97C1B2A0F573ADD9D7C0BF944E6529734DF8A7EF54485B
A3375CC30E9E328943733CBD352BC15B06C85BFB4A96994291C72A0EAE84FB01
0F1B24D0125FB8C16D60561DF8BB7AA7DDFE9549AFB70C1E89424214609FDE41
9A142892E30F02754FD234CEB3C59A2A04C06BAB7AE40E8FDEC50559B8347684
391C750987802D5452C47C1E0B5F222DE9A0EEAFEE19D796FF375A1E1EF0AEED
1BCAC4F485FCAEE18AEC585D1A9D80F41871DDA45FEF1EAE82C5893118987BEB
4D9E345C27C7419FE65E4853B40537D822E34FF1E0BD2819D21EF607981259E8
9F1040A2D708D7463858AA5381759AC49DF4DDDEB209A278FE60BD2508ACA0F4
6A249A05B652E4C7BF1B676943CDC463B1AFEE36C1C3B9E85BD54EB70431575E
BF28ECC41A6A0A5E89FD2B68A2F70C638789E364846C907E143CF1D3FC1360C1
D342C94322EEC1547E7ADF123582F655B10A77CD82EB3C0FB8C09606DFD022C0
BB2449CFA284AB052240413FEE760A8C80ABA4CBCA22DADA1349ECC4A995085D
5FE4C6E3956DFB2E804A825629F9C717C0566FB37194BE04D971C725E9C2EBFE
57C59ED52DF91DA0F614FD31A390DA1AA4AC4FB39D93C7D560D1A15C317D8FF0
E9127B1B32022FDF31B6658A1629DD84F5274618295E283C73B88C1A544E1F4D
E75D3C0369917295861E0791508620C52AA80DE83A1ED16F51836CD2D5B0173E
37632FA04912E199447E0C516F3FCD61CF880F6B9A1B6B68F3CCF0B1836A57B8
5EF68A9777EAC02B52D12EA8988FBF3E808D98373BE5A0987922E0CFAC1D8802
34216AA81E48BBFF4A9C07C17C2E8073E85DA1EF9EB934479F0419EF52FD36D4
5A5E340B8A23733983CC2EC680C49B5AFA3CF384A117617CEF422F7E209C1916
1FFCFAD9CBA9F635888C05218DCD8124F8E93E24F05AB2FA84A4AC41B34FE7F3
6ED2F1EACB243DDB6C5673A5BD6D0F4E869D0E9E3155CB94633C9CA212ADDBDC
BDDDA4E87A9EC166F0FEFB1A03D99E9A095445785C633F2214D0F5153D818501
1BE8B8BFB0A270084FF6DC5290ADE2BEF9F82014EB00C07DCD76514565D3E6DC
BA5BBF1E7DBE2303B2D7BEC29A113448784AB49BAC0E8B4E338F176479DB81F6
69BC2ABB4462835ACEE028F14B6856FCDAA0C1E49CD8D7CF9FB27DE2CE18769E
84C4A58A558A0BF3659E29AEB79356AB64F5A6FBF6CC8A06C726F2ECCF9901C6
ADA3119FC9A835C2E790709D99D116C8383398A73699600807EC37BBDD16A050
18E680CCD8C8FFAD344F68B60FD2452EA0AE98D1459C83D827FEEAC0BBC778C0
20DFBB1E703A74C6D2A22353E9B6E9AD23F9932A03467A626CD8C4A2F37B9C73
FA693298CF87A13A3A9771054905A58B78CAD093CEBAE2A1DD461A4C66C31A6E
E4CFA2D0594BB2CF6CEE942EB5C1C3FB4B25956D8E337BA0F06DEE2E80E8F216
8C1F1678AA29D3FC55C12E9985FDEE14E7AC7905C35469C03AC2983315F89589
12F2E9D29B45D1DA4F460189CA642DE07BC95A9F3687E8E4CE668EF3CFF38D4C
428F73F8083F64CD3FA005178C1F1996F20329FD9233A169A67462AD60860DE2
A5866C4731AD0F10406E1CE7BD98FA12BCD55DC6DDA50286D88B0E831B528672
C8FC60386E2ACA9C692F78A4A625CB88209129FBACAC663206661EF863BAC7B4
80775F04F8F13C63F62A51DF9C4BF6CD0454B827F42EF426AB690FDB4F246D82
0E41791BB216DD15E5C81B63D428D2F9BF42AAEB7BB718A73402A90D516109F5
65AE039A41DB1D1DA80C5ED0923B060EA6EEA5B735D0D62E41842C07B4790EEE
7E8463FFF7B0A03F7B5931AB2418F069ED57137E0B0F17C50BB65452A3175CA0
2EB794510B30E960F2CF8E1D94B5435159884E743DECBED602BF78B692CD1BB0
F246FCF1A109CCD37C2993F63B6A23D41557C62369484B1011EA7C2B87226EE6
A4C6526AE5D8EC00951944E8205963AD84F305C99A04E9DE6CF33B1F6F538914
CA986D90864BA13504A76E3B85EB914D37E275D7E86241AB753C3221383E2975
61A37D8915946798BA564700255BB741E36C51D541D23F9D26C3B65F2F15E302
16BF09F654260E23523B10292CADE8D91536505D9409059A477AABEB585706F7
D189CD11CFFB27782CF377981CE2770C546BA0DA4EC2E4CD9C1D195EB5F2CC14
8CA24C6817FFFAE58E8F3FAF0243BB8B240936004055058844E38C50DB8FAD3A
B6BF002436D9DB473B92B50842444B5390076A43C82C91B982B19D7AA8B61516
F4B93D0BF9F0BE9D277B1F1AB4D071D33132E00EEEF6F968803CA3B929414B1B
29EDB53F00CFCEF86DB4F0C65B0C367C31B7AE43ABEAD548B20FCBF595122C73
CE399E13133110C76409A0FE876FDB48FD26A2CCE2DB8A2564D4BE2E1DC38CAC
86B17A1985AE4EA1DC4722212D7ACD6961844CC35F2968EEA58A4AEBC25582DC
64BED3DFECD0E4A9D65A0489C6E7D0EEC4D907C83B3AE8959C1F6721929BA79D
23871E9ABD09A6CF8F76D6BCB794432C7959987893595434F2042E145EE3959A
700143DEBE96FE1BA4FF50B84EAE04D534A9DD234A7A83944A6A2A86BE1C538E
6B0E57BF12839DDC16CD451AEA2AA6C41677519886FDACF388834B1E6FE3BC91
7160AC31A8ED3AF8897BD16EBA220B626CAB57FFD33D3F046ABD2F6E793C31EB
F5C89965E329D5452E0E67C874B4E7EE3A8A30DB997012FE16D28F724FFC7BCB
17645EC1167969BCDDEBF9C837634AE662E06B4FAF72B3F3760F5FA35BCD767F
EE4E9808EBF05438BA86436C77BD8C8D332D0BCCD1046DD47CE6505D1BE43CE9
CBDC74E87B613542F58DBCA1007FF58CD1A3F8239F568B9ED225D9D69B658186
4E351CA800EF63554DA7E1CDBDBC5A0541FF5E194CEC0F3A909C9E8EC4F95848
CD2BC751170B446F9FC06F4B6EA145D5DF31CDA82F74B03FB31AB682BD691D38
C22CAA7DC3183309A39B71263B7C3CAEC8AC487A4BE1DA4D789E367C5BF7EDC3
6C78E30CCCCE4EEBEFA2169FA75AE50BCADCA2FE214955FAA891C7AEC18EF334
85035BD4C47EABA59DF06B021F85A111019D507A3C8ACBD7FE39F3BA2CFEF4FB
F5EBD18C5BE8703DCB70D690515B24E9456F047B15A4A96B2772BA8BA179B0D1
563E7E339A5B31AE17B3A5F26C726618551ED6F3B85C5DB458F9FDECD48E151D
BE7DB966043D6E6527DA0FBC55BD74FAE12A61E46CC1E57DD4B2A8099EC31086
9258F43B46B8C512C3368DC59AD0A0948833593ED9D2C75BD93DCDF1E518F5A5
CD297CC27C1EDE7A7513C093D52026755BB63192927CC273451A1629E9AF7119
A7DAD598FADE1EB1E6913B5581A0EE53B5B411DD335215AD4ADA1BD5700411D1
682978632F81CD33B027A0B555C3DD7B30EA5F489375024C149D0E07B471815B
8ED2A86E9AF9981B8E2C8192067B7F3554F1A92714618E5C2859E019C60337AB
62467054439A561AA5DC4379469EAC4DFECD45D6B900DEA8FA21D3D133AA272F
20A3E2A95207C970CD911060A33BFE746AD7EB5C0AA00082FFB6D0240C8E1DB2
C7480620D78DC0DD6C1C791B8A401198BEE36F584A26A205865FC9B886D23FFB
0E63790DC92C4284647137F51242C7BEEF2D574F2F1413B4C6B0A24A37242EA4
B8119A3159E06F45C84054E62F752CE3F9E90B484FC8C8D637F6F6C0136E0E1F
0FB0A3B37ABCB90CE9D7EB1913D307114496116FF0087A487EB3D23573EDF779
8A4397FC6B28F7DFB72F5895A6BD4707BBC94AE5888A7A4FD92860505B4F9128
47080C3AE7FCC667A5B810B665519E7E1450E00BB9D0279A39D79FF10136EB44
A8DE87DA279FF7D54B40F95494511717CA3493A7590E27B34C2E2E1BE2ED884C
AFD6B95DD0C1451610AA956E22BCD5AB67777E28EEF2F3B6CC3BBC829FA6CE85
05766A92A30DCF28A4BB318AE2C541568232CEF707373F07E753AE55712F2E5C
5BA35E994A095D9EE5FB336746BBA506603279BFA918D47B051AE1826675A5F7
CC5523D27FB37B08E03DB9FDEE5D5BAE73131662CFFF5E427A5F5DBB56FE1FC3
2EBC4FE38AF37D16325FB9929DEE8C2848745C4BA65FA8D1E0553E0BE93F884A
17BBB0741AC2E477F3C5B104A7F7CAF232FC4C567CFDF4DDA2908CA821367EED
D6C24748C813B80CD03A5FF4F2F80C1FF99B6E9F731B075C02424E9FC973BA68
F56BE3F01B9ECA24C6BC5028C05C0E0CEF14BBA11DB311AF2FC3780F5FD49D39
06A69157093B1AD3B796AAB073156CA0571D06A495696DF2A6B803423423E9F1
F1ABC7E3721607C98F595B50E187F9E15825F5720BA9DB4ED19128C657C8098E
D5BB7691BBF8C1F6E1B32E37B1FA6FDB0D247F4088BB9B710745EA0567811C91
634C50DD4313E4E95EF7894145D8EA94186A67B4288592F6DDE960B8D969B268
017F2AE80C7807FC42516B6F7F042EE451CC86C8D044D44BCF17E822E3957632
C560E0FA3284186CC6BA6A419BBFDEACFE4B11BFFA2063407BC29192867A182E
A420DBCE370D4B6CAFB8ACF7FCC75B4C2B5B5DE09A443023B69D70CA61B835D9
4D3ACDD7FC04E8B9D08D72EE35C67777BBD4EFF14DF5964C41E7C1935F71DA3D
923A8C474A2703715D699582240EAB4D7FA83DCC1FDF5E3BCBD7C0A3207D0096
B4C4C2A2D7CD8C4EB79EE59B43DA1D384E5EEDCA4F7197129D2FFEB06AFA7916
FF304C851624613B6287035F79024D3977DBF2FEFFC853BD05EB48DF38251295
13C4EDC47DDDA16928806F5BCE769D9033BAF9BA931D255F0C8C0036E35125E1
1CFB8F1E397508BCB97A2A875DA63F800271FBCCD9DFAAB5E93F903A8FEC0119
ED1528F7208ACEF1C8D3D84C98927D4667AFDC8F9BFFFED21BD538E1894109B4
7B0F8F4DF8B4BEE9DC1BE65EBB4F6F2AC41CA58701A844C2BBBC2A83A15B813E
BE269011AE7B55321BD67837B5ADB99010C83EABB99136A2A35D24AD6BFB635C
8C9626B4975A70EC458DA17809AD4C9D71722F062384006BD87EDC0E855D4665
ABB49ACD84779BA2DB331CE2E27C86275428D513EC9360E9A8E4608181A82500
1EE60736EAF6D1AC4D59E1980C2180824BAFBDE48BF96DE463FD137D825B83B4
66C821E7696010ED53DDBDCE98FE8812743F6BC29762954CB72AF525793AF97A
9CE3BF7714019C0AC2D2E1B347F705EA50B63CFC32207875238E9D9407B35545
0F4AD06B6664A2DCDF4356EC4F4121AE3FAD1D407B640C08D3AD5C2EA5829A51
A55C3B90C119C9E649899F6B792E6DB69F00DDB63772D73C3610CDDEC2D3CB44
45E52224510231350D1FB0FD77907AA1A42B82BC63104BB1577E917FB39C5A56
86764B5DD934BF676F7BCF8346602B0BC0EA532BC854FEDDBE444251216ED760
86C9336C38735AEDC57680F76E56AF8045C11A1FF2998D34D6EDC3DFF265D4B2
67409490BD913C1BF577330E017B29398179A60C7063FB79C9EA2E472321BC41
10782EA0A3C39785627ADD798DE75D669C59AFD4DE972C9F59377C5987F6AA04
D48A66E8FE40FE455695F50AEBF9B5263D23663D50806CB34A868352EE5B3F80
10D46D0836EC710A0A2A818D38F43510562424F1B89348178A589F8A59052A02
3F387D03AD291BC5148ADE9285F7FC3FE4A33B9775F43B9E87661EABC510DD08
07512E0EBF5662FCBE698338641BB4E92AF0B9183F250A60A7950B3939DD7709
74B3720572F045B32289A2AE66CC44A1C13FB8BBD4E184073606C3D7F3AA612E
0FDDA6ED16BF1A0A0ECAA2D7DC8C40FFCCB63412E7634D9B961EC61B17D2A847
8D3088F4D1C99603AD3F6DDB164D567CDF9FF87DFBC53EA35FABE9D92CA3A94D
0398BF5389AEC4C6EDDEE3B3CD57351CF13B7985B12A3FD6C928D99E8E49E5DC
53A25F65244C7903357BA7EF0C4FE66617E2CB07EFA3164535128A4E41E61296
B04E5CE447439AD4222B7B3B2152F5EE596AD5B76320B1CCE99209692C03E4F4
098C74E4FAF775735C0BFD12D2ADFB115BF4A08173182AE23EDB89D2CE34CCCF
4CFC655D3C5B968099C13CFDC41853F6921D427EEE0E098E8707985901423B99
58C73D306B5EA3C381205010C61B3F66C9448F9B520EA55BF8D31EBDDE4AA834
185C68A03BAB8B9E2C70F5AB4FC6B0F5A55A6A6B51B7930E51A3245840A98D21
7742053C054DEE7E8C71C7644DFD9BFF4D1535D06648E644FA847153D94C37BD
7B29290BB6860998CCFF4ABBD82A0CE46DBFC8808BD1D433164893EA2E0117AD
D3043C6613B182008C447703EE68CF292B630E0D5843C284B858E956C3B14D54
1E43DDEF61B64F73D46AB05185AE430B17BF6B55E5FB557A362A2135F902CFA9
5183E9A00F23B8CABC29E982E0F13E9CF1D70516B2EC63A0FBB191C596B83047
C1CFC22746ADFAE256888C972C02780E10327E472F8E76C520C05927A008BF1B
EDAF15FF17320C953F4A1D53077F0802F0DD44F3E394C43A6286D3534FF57225
E187E7FB20C2F0DBA35422C5179518F0072D5083CA178FBA817752FD522B4482
5CBA4D53BE7980665A358233C591D805B6D7853518F8522B9D5C229C89D59664
FF216EDE26FFE9F98963FC566AE808AE20CAAE74590B3DD20E5632ED3B5080E7
1276C60EAB7EA5B8229764EEFA7DF5DB0BC0C43B5D4AAEBE43A8BCA8CFE55830
A76C6B2480AD72FE0CEBD193739AFF370349BD6C55308AA0433C55FD41BA7529
655D0980463358A68D9B649DBC731B662ECA01E742223756C232D2146CFDC59B
B8AC4F42CF5F8726284A04AE366F0399D81AF7843E58849B007784D3F5E3A6E2
F461F4C34FCFEA86A00D258068BDCB86E75715BEE99940BD3B542DB5DF3FF3D2
306398244AD617E196C9252A0445FEF6D2612412BFB5783DB3C07D4FBD268E2F
A3930B234F4B358C816576A2D18DA69F97E11B723A8E68DF1CCA64E069D1FE8C
D9FCE4A8D8D1033B619313D1EBB0AB672BD3A830F6908BD1A473A40A3EDF8B92
C5A19EC12972781121FA253536EA43DCE9AF05FCF286FB8C2F1BF16BD88FD880
6394F2AAE9AAC501EAFFACB82A0C4098ED42BDCC3666669C95872FFD356F29E1
99285609CAA0FC1EB7D24DB20CE1C065FE75B414B09295B583CE944173EB4C7B
6EF475559A6CE0A2421DDE750BD645260E8614AEF44009E88CBCD9A70475C18C
5D773268565164BE2F370E818B5C06950A01B6D5970254D021AC036222DA9B1A
58FF24B9493A6107B8923E7A736E32CA7FAB1711EA6BDC1CA3AEE6F0B71D070E
AF213C866648B75738A5C8191EE933637A398B71BA7A830169D4226CB034D1F2
61A087B2C5C296A6C9D43D3002D39B4380921B9CAF9E856EF818185B8F3636CC
D02F1C09F22013EC4B560271C0E36A2ADD9F8AB8BEF2275EB6BFA32850BF210A
E2BFBFF651C226133758DA5A248A538A9F8757E62384F6565820A65C185B69E3
21F3DD4E02065D8CDDBD45160BE05D064194D9CC21689AA99CCADF01BDF6ADB1
A4F47985B1ABE60770A57317D3620FD9DDBF7C46A83B96F4261444111E1CB316
F9D22305EE31C571BC0A1C98DA95DF8AA168A4FB6345F0587F952AE97DD78841
299050AFF5B9F8BFF6A649062905DEB532CC4F900F7E81E94DC179909178D9A5
44430CFF122312C156948870010AAD8BD56725C28744055815B6A5217BA797C3
A4F27AA992110404E15E46F7CC41E6B7873EC9D57FA9ED1394E2506F0BE802BF
966DF33B0722F67EA45C3D516086C7A3A2F7E02912CCA4FE178378B93B59083D
2E6A128C0209A4E8EEFE647BFF9D9B567C16AE4DF436C75E95E13DD70DD40ADF
E810C7C0F7C90E1A1E3914C5CCB26632A953FB18CBDA05E4C6B288E752741E4D
7EDB6E2A21A99630264CD9F55EB6591BD63BC018F50DA074689DCA6B27AB1125
A2196D7DBB84B7D8A0AF17B08759FB45133291C5B945CB12B0259767D3FB281F
6F34EE241674A3EE2645DA90652D589681C491B43C8C802A1517D9C6FDA34745
91F19D573EB051F2C541A4E3530340F8347DB6277982BCA979CEE6F9C59CC72D
28C5E0E314F947ABE611D0116A4040CD614F18E9FE54163C94B93A4C903A65E8
C8A0E10F842B11A789F231979991905DA0323EC2D622350AEAA20BA78BC29D8A
1EA94A878BC760F2F70D4299A4F76115EE6135F0ADF70A559B5A4E0E5B1DE965
B895528EC9017860DDE223A5D1BC8F0BD6F297DCD3779B48A23BA00CA211D468
4B7794BEE465A354B42C8975742F75BCB6C0CCEE1136FC7B18CD4DF65F79EC30
FDDEFCE6DC3C07934FE9CD4ACE1AB8D09A4FE8FD49FC9C8914C4A02DCB27989E
0752A84CB62C9C581634E789A5C10BC1E93488DCC273143E753D5ADB6B0B0340
A268B0DDB25BD184FD79C57C9EA994E8F5D090490D2E07EA36553A97F164D73E
DD84489A998F8E2C7F981236E31F14BC8FA2BC3BAAD162DEA2677D46D4797D03
9985F2625EA0B5B6DB576B177A69483B2172AECD25DCC4E613533B4095750C44
CDBFCCCAD7FE46D935CC19EFAAB524A94577EF320491A3FA8CB2D730293FEF4C
637E97F8985B6823BC95500AA1711E0010118D340D0BB5177BCCF14778CF7C65
AA035205A6E77500B2722E86C30A676D15736C339C5BFBB0E112A2C738385501
943C4BC2AA690B4FD774FA6B7A6476E4D29D487A67EA1D9A222E261317AAC247
DD691725318F059770CCF351A87CB2823E3B6FB2A9F26D2B7A0510E190D05B2B
D0CDAEF3A864297373C89667E22ED7C5064D58BAA8ABE016C561C8218F0E68D0
FFC9CC167587C4DDFFFAF2C8DD625D18B622BAAFE22DDD70E20C6A2FB7BFB3FB
FC9F81FA4CC87AB7C1F649187A72EAFD4F0119B1FEE7375AA5175ABAE675CF2C
E1A7E4EEAFC4E066D5840766A6F4176A5BB55E7AAD0A23CFB7F631E070A8652A
D9B32F26204002B410E56FB8D97536788717091C9B89611F16789397B21CF200
7F2AAF5539BB614BD80EB0CA767DE4BF0DD2185ECC3E591B2360762C7BAD464A
8A5981691680708ADF80D3BDEB91B821CBFD12998AF3A4E50DEC07C2A898FB87
2435A6F3B2A54F099DD8B7B7FB5E02E4DFE5D7E2BF14CB8E8AB05763C7A4305B
4DAB75659896469ABFF01FB5C81D7206651116D3603EDC3C52D96B86D641382D
95299AC9A6E5F3C861CB90E032ED2357FEC1D3A8A1411DB396DCC79E6B943893
ECDE0325FA8F0B7C147EECE12C1DF921AA0627777890191037394DE4769CF0B3
6CEC7C76AB654466409CF638A67AE3D8ABFD8CA0210E60AFE3A41010743EF6A7
3B737B299887231A7CE3CE7025CFDA741332EB8B9E6E7779B8BBC8D1612F2375
0ABCEDB2B6D8B2A25B650143B8EF699DFD6585141AD664F613665CF791E93893
4088658385FEF2B5848C420EC889C56FF1131931334F321BDE3DF454D75D9486
1D64E0F380E499E914B3A81DDEC22A5675FF9702C83946447CD62F3BD519CFF5
85F81454AC7D544215C7D9351AF49F331A5BF546B3A0C90A38EC1F809B96998A
3FBC3201BE9DAAD80B3F5AD8E44B443137D516C287CD7FCB02888E8B20DDA464
A1DB15B97CEAE6096E3F3591A455928A7B13237A908918E42D0CE0F124B0A43A
6623312F09231F75E179CAB45F341BF9213792E54A9EE8C622BB8059EB131E0D
FA31B4685334945D0A483D952BA841A4E22A317D6561662D9E19EDB0F5083A19
705A33849D159A930DAFFFA60C720057D81429C47DC28210AB0C4995898EFFC9
85D09510E0FC249CD2AFB9E922C869BF09D930F2F41C875E5716E5C0F451BC1C
6CF834DD7997E4D15436BEA5F92069AE2C2F94E51BDB1D1DA081D0DB6335FC4A
6B27AD73EC1544F5373B3B953897C2C5DC82B4DBE4FE1A997587A0FF9700BCA2
C977324875571C142CB00237467F8B9FA15A8FE28DAA74C14D499532E6E5FC23
30F646A38E710389F9EC4E638C278C802F6EE0F96D2698A11F6FD66479E60002
6EC26AE90A9415F2190BEEC7D90778C4DC4B0B56704904B4CE1D89E66F9782A8
352FDB939A14AAA42F94C095B1BD8E23EA906C7E229669652C471CFF2C21A7EE
EF1924EF3B1047DA244F4BB7EB5A303A13ACEA128EBE9FF5B874E9FF76F47A50
2BA9A39C2D23BB90DB6F6A5C2FD843C7A980AE1527A1F08F7C784508366C0C24
A643FA3368AF8C7430ABF956A7E31F7A7A498387B81E248987CE1A14E62E312A
CD25BC28B87FB071CB1D4CAA7E34A40B9098F4CB0F26A82703271E70E3D9D675
8EFFA81BB74204F16D4929102D9C76027A75793253CC3D952AE94F8E8B1D95DC
7B152EBD636BC133BEEC4F42354D3D56F72F616A40B5B910E41AF4F974EED0CE
C78D538D00B252B4B704E03F20DF27AA0578BD6CB606676839CCC2855419A247
48B1CCEB55E5B9805ABDDDF5FE57ADB776AD9DD17FF1E4C565367E2B633398B3
CAF4A299F641BC47441D8B3A6E0183901E44FB44C7429EFA4F3864BE3CF45CBC
90333BFC4469EA4D485A491B9F401026D68B020E842178819434ADDD0F7CDE6E
8F66C7E79947E26854A21C5A0922F6A4F37A429715EF9D12C72D73CB5F038FEF
6D5073979CD67D5638B5CAD64F2BF02434234DBA543E3E2223D8C2296BFC28AC
505CCCB4C3987A42336EC5193B6A7CA1D4DD9AD8A3E4F85BC46F152ACA117C87
46C2FAF502AC5C6404328D4E879790A275373179690F52A1240FED34E36B2799
19E7C766CEEE13C3AB22FB3F3EF6B8A99E65EAA63202FC945E4BF72C8CAC140F
E6412187142484B7EEFA080419A1BBAEBFC77BC72CAC7E668B3217B1B6EA5B1D
FA4C736D775FDF529F6F99785219D4298E9823771433504E2AA8B0A92EB7D9F4
33C5D6406B17D9C03F4DB0277ED4001E1E3D1A537AABB336F651
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: NimbusRomNo9L-Regu
%!PS-AdobeFont-1.0: NimbusRomNo9L-Regu 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Roman No9 L Regular) readonly def
/FamilyName (Nimbus Roman No9 L) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /NimbusRomNo9L-Regu def
/PaintType 0 def
/WMode 0 def
/FontBBox {-168 -281 1000 924} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B8E152A40E590419249F2E4
C36159F8E54B532468E36965A38646781AB0B7F6A3E851FD10CAA49ADFC1E546
2FD2EC6150DC6E19523050F6148348A561AD8D2E2721EFF8A570CB33460A745B
926C889304C09753C2D78FB0CA95DC6DE5B8C524752C83601E7E9F73DF660674
F05AD83A166DA9BE89F22FEABD4B2665960F6FB5BC32928E1230C212E5D69CEE
0B3311A1738A11747AE263106916D8E95F25B25B4BC6AFB03B79ABB95DDA518B
41A49458111D2A1433C043627EF9460D324FFE22935F4F6DA88B8B91AE95B34E
08408A34EC8EAC3F65B6AE3E3E2524867EE9D29068F81E4372F4470BEEB4D6BE
EE4DF956BECC0CB77F8490117B22B2FB75C938ED0A5E208D88BC38B2AB8B9CFB
F1D53084B6F43DF336481ECA0AA2D5317BC83FC0E1D4DB01D0B7707EEF217E94
A7F985102DED27D8E8B009F7EF6DB91B91E78BFAE7BD688E10B3DC9AC77CDEE8
47AA4DC8EC78241E593D26EC7A60696151A2AE5325D736E99E01BDCBDE69579F
92EEEC224B6757EEDC64A75455BB665DF42A0E4CE7B99BF3E7D66F8FFC8C13F9
D7A1FF7A9D5FF7AC43396779F11C9B008C33A2043D48B61B88B03104B1425F09
675B559CA4302C001EE80D2B739CC0FD1023BF4F1FF9C01E892E59CCA7C26011
B8E0B6D29CC29FC72792FDA5E7D5D88EF98F9DBA960C96534C399C54865EAB86
0FA2E0D6C7C44B553EAC1574D55E7970744D4792FFFBDCE6FB4365BDBC2965BB
2E9EDAD9E0EBF0B620DB415AD98297F5AE83D9C710436657E74D26E83957C745
89834337035A7501803947F6880B70E56A3A404C62D57B849D28804CBE0F5884
435A0E12DCC9BA414ABB732BFBAE237001F557DEA5E972BA0838A3C7C9EB75AA
4A050DA0A529BDFFBF9011C360564FD17A02C18860AF6B86EFD4E2C125686C9A
5E114E95C71FC89A5DE9C589BFE5AC0480CFF716345265D2435EDAE67CFC4801
5BC08E7A48D683ACDB91E05F469C0C8919D73A5D07A1CCB173E30E76680ACB09
02A40A3E11916198BD69F1A26E88330F50692D0D5917E99E7A01B327413E24AA
E98EA484E45897E6AE4D6997B6E8BBF61C9406E916D56985CB2BD297E8ACFC6E
CF2D2281AD84696B7C6CB584BD85CC20BA14ADD3BC3E25DB91124C0ACF22E902
3CFBF04CC40DE331991E9075D22AB5EE0E849B340050E6C417C664A782D05549
DB2EF572F193B1C12B4635C2B358747046DE5858EC32B3B2E79D42750657977F
ACDD2EE5A7C9320D907438DBA63AA05ED410FC7000F53549091BE71BE45DA4AB
A315F95B724A60F17C70833E889CFE7EA206A7ABC4393CB6EF47BE3700BA5638
6831391809EF8384AEA8C22735E8062A9F9101ADD125A321FB65399CBCD9C9E6
0F46FBF271B2B1EC80832CC054BAB5CA80D4561DA0A380D56D5CB3D90AE89A19
48CD824EB1E7AC6127A6DBA3E8EA40F00ADD89749D77EC0EEBE26FD6EA5D8CCE
F7239681B3D94898236AE92FF3912E0AFE84B6C7E08134C158B640B4AECAB5F2
A90028E67D33DF31B461A2846F83D90979BB22618E2A17C5D159FB59D5177E12
EDF1320F596E7A4C379329ADB367F92BF2869A9A97398E0C20F5F017CA9DB7BA
B3BAB72B87A7B6BF4FEBD03132F9075C271F2054078396DF8403DC91461325F6
12CF1421F3099CCD799C2C099492C4F071336D985C0C360B2F5A5877FD00B6F9
2E5911DDDFB31D17A60124EE8DA6CBDA94196D7ED42804610E4F730DAF2F2D5A
B767C320C62543E26534314FACAE006BA2064623902C8AC479EEEBB609E8C3E4
1516CE412CB410BD026231E22A9CD0F664D769E4E45CBB75B7341F06D8E37285
BEAA9AB71AABE3CBFE5A348681AA246047CA29CA6B442FEADE254C7582D32D3C
71B5E645C82E92F057EB5F859BEE23DAA95C575EDAAF9896D6C10980A09DB34E
084C8A754E31B618C6991BAA856CB86877044E10C2F189B284E3195A2DB6B910
2574E2461D2FAE65B7321C0093A2A34996C0B77123503E9EDC623DD02C44FB76
3C550840BDF969582D226510EBF89944E59684EB2E2C463E69702266FBCF8D1D
4C0BE400495E227B9CB21C8086F328782CA7294DCF3ECDC1A62714143A4C1B98
E5DE1DD554FBA60571188A58F0354A6B9EF580689B78A0C8515CA05A35832616
7E0A90F68F3C306AB60AAB20872FB167673F41E8E87FF0111F579CBD0DA68B56
3E35D2EBF9F28B104082E36187373EFC7A33F62D3FE4A390B63A76E9B2531871
6BD59861F51B561DCC115192A6FC22D15A5AF03BA09CDFA66B660CF4288E9D79
26E797256659B0FF64BB5D900990C3CB588E1E18810BCB009A91E5F4F8D9DB1A
F2A063BDABD9C3332F4BDB701BB94B4FD24570B440AE74B8D924E48E7C2DEFB0
53A19E5B4DF39ABF4F6FC6160B5FCCA00608422A3091CD03E726B1EA1D203B3F
C44173460B490498EDA3121881EBD21CB5B571D21A6228CC0A1B035EBE97F26B
0B58179BD22AC950EC3A98458051A874297CD6BFE731C5B413819503111F1F6E
EBFB5628C955F5FCAED76F2402CE351F77E471D1C9821DAD627FF25131590577
5FF9335DD28D85A11BF155765632B34A3AA1DF9C01134BD8FE927E0064319951
E2C1D374C9ACFC30932712A5C3E0FE3C7E355E3356E9135A143F1B4E2738E208
8F44633DD9300BAFC770625A64B2BD20D4F672701310E5D1D5B2DD502802539A
65344601924C473B7618F9B87BF6EB49474FE62891097B9B381DFC9DD22F6CEB
340EFD950B74E614A2908EEA7B0D395E15943D0A9072E2C0E6C91D9141C84281
6A59F02111333723DB78C2C287675D73152EE3C63397F5EA6203C707568137E0
12438B86EAD16D71A0A56D00E6ACE9D80AFF646B05D829DCF08DCE2FED1A17D3
83A7C9E7C2A5CAEB38BDA802E6696BAB17A5D1E5D6C51B6371C642D5588A2945
1F3C8B0CD56806531579F7C0D10A9FBE254EA910522D955C86DDD693B8660BBD
17B2B23FEA57AF15B1720E42C6DE537074C071C50C114AC54C45BA2FEE00D13A
2573BB9243648A1BE2569CF68FF78E4CACACDB34DAD918A30005C31F17781633
6B74AF8B9931BEC0C1892780020C1A92470E3AD7F1BB6EF26C835F13A9C56DED
51DF4A7847C993B88B9FDA9A8955D8BDBF6BA773D06645E292CE26D9DF4BBD4F
3D20F52161853827837C837F33425990818B958ADCC3AE79B5791FF04DAA32FE
54050AA9D34606F16C7763DE770CC33C9ACB60E5354D5A27A687CA6E0FD74A4B
5CFFEADF6AD0BA87B906C09201FF65CE6C3F620BBFAACCBE54DA884B87E906B5
F5285D3841ECF78F0A1EE4A80724DA3A4FD49FFBAA66BE3402A2480A6F8FC164
343A369E2B8947FD5F58A4697234C742685421CE3D57398C5ED6F6B049FDF39F
6870236751D9EF2210E680B4D8A6DAAB758BD7FA7DA9680604E5BF85D1826611
2CA08E8922A1D46AC853F4BDCA37F7FE80D2D27854012E4A8F70BD854EA4C189
EA6939096B56168AEB971AAAFE1BCA667137A76761CBA2FBFFCEAFE3E98D5590
DB3DBC44B3F9D4EF0419CAE23086898BB25A222EEA19C1A760389672933EA7C2
8B31025619BD108B79D51D54E23F401F42165F0D513BB2409CE66BA3E83FC000
4372873EB8B4405A8F5BD88CC2F21D2D60FA4024707869C5FD40D94028ED13B2
5762CC7924D100D3CE0DD32CFCA124EC1FCE4CCE8C137070A18F05CD73809449
BCDEB0AC24DCF63679D46AA8B3A4A5D0DBFA9342716619CD3683DFA7A9D6683E
5A7A03DDB47833FDFF8935F2F004F58EDE6447ADCE4FDA1B734C75C52D16C406
9428CDF68855946014584F7FE49B03F896E0054CFFFF5DA4728BF4CE1D892052
701B48B81F58F5EA344E8EBFE13BAA70CB43CE4A979D8225ED78417648672E61
07EB7B31F81CF52B4136288200E640654E83534EADF05301FAF2F3A859772C3A
545FC20429119FF00C259AA582AF4E3CDE1C99769F4E433D9B178EDCECF142AD
FFAA6DA004A90F53E70048AA8D15A26BFCF7B02ED70BC262D165E99F87CA7424
0EB98F3D7FC0D4926AE43C8D322BB9ECA24A4C45F7DBB0FEAA9A900E3521D6B3
87B52A30ACB29C914B06793F19A1EFBE3BE7D0B8E20CAD99D292C315B12376D5
655121189A833132715762CA7118685814F71AAA08B89E466C7468BCA01BD98B
63EC7CC3AC41DD06C5BBDA86227AFCC1F7796B5F878946C135BFA75A98DB1B57
0F38C49770AE23986FFAEDBF6644DF58A252C29AC821F4584B96B5DDAFA9B3A1
AA0EF6D17FC1E75916753BC8C799497E1279EC783EA86DF307CD54B58C2B3EBB
FD722006D127834B089670E5F1E7BA8BC4A0F6181BB4EFBB8F99E4475181449F
2FCB255DA4233F7AB097EF0108BA3FC12CDA0618870EACB9FE4195DFAB182242
BAE0956D09E388D10DA2F940186E25C9926886E9806C70105DC75259FB1E5DA2
675E4E114F84862E6B822A10A9D364B1CD13DCA3D385B83499C715ECD7598766
B215910F002358D592FC36D0BD482EE9CC338378EA1566839526A5783F250818
078B97D73B1D62A1AAD3D5A9753BFEF23F7B3E6D5BD318C463AA04490B9063A0
E83E3E68109B182720D2B1C13B498F8F495661C0F4E6455B96A6A92FF806F1CB
3B1C6EAC82D9A687B83C572C42DF22BEAE31D1239719186F14EF637FE4E7C7B1
FE8F4F1BD8367D76D467BE95C394A818198D922BCAEEEE371FE17E396B27CEC5
F0554778587FC7D78ACDF317A8EFDFC82C2F57B6411B3AB68F96E3E7CD321A6D
4783435056AB5A0095726435BE6885BF2784FB2CBEFFC0F8248DCD594D34B21C
98E67DE50B6876C3D6D4D4CA7CE0B9013EBE754B104DCFC0719A10CDD9985E19
2CDF4E88876C2DD4E79E23AFA70AB5B4758AF32EE87B8415B881AC15C5C3E1BC
D17A5B961EFB3A8DC987DEDED6F28A240D66F004AD05CE1C551E29B45668DB2B
305C9B1AF5CD5388A0802D80F18E0F4BC8065BAF393FFAB9A4D674312C2033D2
7C78B5E9461FB09B9B2CAAAB70CEB3AFA574C89BC620328211C85656F63A8DDD
97C827297327B7980C2FE0ACB1C34866AA3C5D7408E257EBA3C53DE8338BDF96
CB7BA55FE31BDDBF7807148C0A132BDBBE8A2C21A23E11889DA13E429914F7F5
7132936359A0CC65E5993CAF52902F76F75D6CB46DD20A3C0BE80D45F2C746BF
236733462080FBDC8C5C1DBE9781F45ABA74AF8033A6EF2BDB16F7B0930D6B6E
7CA7FAC8CFB2DFAB8C063D961077585D24E8FBB5E0B0BEE9C4509B23361DD06A
DD25767833B9A770780B311F608CAE7ADDE000297A2672211F0DE8CF7F5FBC62
78FABA25D035FE3A7CC3A4743C0EFE1C4A5E9CADF1E05BC7982648D5C9FB2992
4A9EE1570BA2AB068CCE168552299361D62A2BC2C0DA48EE94D1CEDF1E2D29BB
43864AB5B770A14C98A432AB76C17998904F052A50EF845100533BA5CFB24C84
DA53581EC4F2201CA9FDAE76EF365515188ACE4CFC939AD6D193413CA7EE225B
0137F4637F09952213BE725CC7AEC579B2FE85F7C6AF18D70C4FDA0557567E64
D430F09ACA7BF28984977BA0F5849A5A86729D5640BBE4C30B17AB03262A02BD
8EE077EAD7FDAEFD37AF16007D83714ACA07FCF882ADC4792583AABB279579DF
6741F637CDF8598FB5827528771444B0AA82DD5E00E70EDEFA7405A1D8A7797B
EF021A53BA68C7FF6780C94F1393D1745AB1FD7C728C6112766A3C2E21DFF002
9E45A5C5668F8B084F22CD6A6CFB056CF0F402A73B2C02118259352EFF6D680B
877CE3024C37D532C186F3D4A97603704CC0DDB25CAC00AEB4CF601F6FB45655
8939AB962CB9E16A2400938D226056535EBE5707CF0A8678B54E6E3A103B2EFF
0BB7306D7C7C3F523B2AEC267A5F1E3F99208D8EC9AB27D658C26F635C2984AB
5A4D214768C6DC775BCC616838159AA10D5BD93CFC8B2D836EAE5ED480FB6DDB
24253A62A1B798BFA51B068B6888B76D2233B6FB11794F166254CB3AC8CFB650
429866DBEB8D09E6D03889899A4E8BFC9A855EA4660F928D0AAE8247EEC1668C
8E798398D53E52A5684CAA59C47CB38C8F1009A8AA12A269A587593874C2DC78
0BA989078910F3D70211147751E9F7264D6E64F1B05410ED3427BB7D0704443E
F2BAEB0FB9E3F1C1C14B178E716FEB4644240447A3F02211350E36E1A586A042
9AB336C6B44C0D2977294E704E8695B6DAF079BCA033B6BD3485EB7A78582FB9
373716136C63EADBAB3A2577738F553F81135829F9118F4BFE20CD51190BD7C5
17035EBE97F26B0B58973EA9B5E0D111D9EACF2FA54B223C4F40C139AB891A41
C7D5BA5338BFD58090EA727C3FD9D0C0217C05798787881D07CEFE019518CCDD
A7AD72305F06A98717CDA80C5DAAAFC50E3C6D78D2B5D851BEEC46731A6C29ED
DDCB9089DE5CC2DDB696D3B7DE3B67F066527AE22CC1AE6285DD1AD42E0809EE
65812268D28E7105859262E9368A3AA7FD0207D47DE5EA5591927F5E568386D3
A61FCBE872945A272C75384BE1E85B26AA094704715F1957DE37A2FDE2577BA3
85000D0708FC918D52360CDA828CEDD17CB7D625155CEB6931A29025B44EC8FC
3678FA08027B20FB9649D07F01484F2FD2E1746F290E32434FCD4D15ACF0708B
EE3FE9948D3AE141749B47810558D71D592735C1C86EE375BE7413B2CF462660
0B115CD043EDE5612AB895CEE0909DA8D165408CD5C4C34114EE4D7FAB4C37B6
A31CB829C4BAB2DD04B1A7097DEC24C6429C13482667116522F94EDC99DE551C
A693362BE4D277E12829BC466E13D09841B5D9AF504BE4EA59E9C2459EEA5AC2
C678E3FA30CDFC5AB855D56C1AD8374F9769A6B575A1DEE5AAAAB4F716DCEBE0
0FAB8B0B5522294CE3164F8446679FCC7AFF5BF49062CEA58F5C661A895AE753
8891536066F8416FF5E357FC34CC34D6B68ABE2FB2C540A7123BBF90D2671F65
90515B96CDD1BD2C1396BC15503CAA4CCD3CE28E0361801BDC5DA98887B2C39D
B84A0A4DE7859C7DA394ACC497641ECE12AD8A7D62AC5F8E6BDA0577FE64D581
35390A37A1570CB25B23B747B236F3F2606A3FF6E487A78069A068E7AF13A8E9
315016EBB2552F644065408A69F1BB6FED50486B2A05D403CD56EC5D3671C9CE
091995D384491B65EEAF33078529238342C32A4B81788C31E62BA0614BAFCF9C
3C1CD422C605740A8939487E26BB9233D4CDE68AFE7A0CADC3AECD739C9C425D
09CB50B4B4BE28115BA7FC59B541513CD6FD08039CF40A1F5B90A8BD1263806F
EC35AAA4100ECC05416ECE2F061CFDBC321CF3324F1EDA91976CABB8D2D9ACC9
B93C575C363FA691E18215311431841DE8187A20D6664348C7A8ADB06E867D02
07BD48FE8067168C4412FC80CDBA62F8B9209F5407670A26DB1F7F5D67C4D227
90BCD0F1E8640E5F9288C410487290808B88F9421D506386AC95CD959FD1ED07
778DE2F62958FF409D37332AA4BA88C735F2A56E4E746EE98B9667072874B21A
5F98225AEECABF5CC818F3FA54EDDE178B40A1B1D6E2F900365E2B503346B213
DDB43A269C5A973D303DBF615AC3CAABFC39FE2144681E7CD633056BC77D95A9
16F54291575AFF7A3A4C13ECA61A8D261B3A74307AAC38B50C0E55222626E717
DB6E122547B3B8A766FB877DEEEA52ECE2E74BA02CA7676F0E037CFFAF287340
C19BBFD9378D8E898225EDA3FBF814AD51F976241A7285DBCC62610FE998EBC9
7DC5961AF9D70A6786E8922E7932A539F1606101440C6855F2284EB34A895CAE
44637B6A0B1C6386C21F11F2E7EE2ADF012EA6FF35314981226505BD4B0EA25D
371BE9FB6FC0425D8F374CC51FCB15600FF7A49A4104BC29A369C8336438BD4A
45B7C8FD52577A49ACDB394CBBC16C844AD99F85B5AF1E8018900D50862D7C7B
045EE4BF7972EB05AA5696A004F3EC9BE95C4C14180C7C8098A3A0443C0DFAAD
91E9C3A37509B29066AF112DB77107B9DAF2E45E72DCD78660D5D56018CDF1E4
CA787593C31A2D6EF925E37E4EE77E687E149BF506664975CCBF5FDC20B5C306
984208FFB9EC2F79E76A7A029CF5981FD2D07176083D7FA0D9FA7B1E6C6DA9FE
423BF29011478BA39FBDC7E77BA230EE7B89728C9312602DDA359F1EE65BA362
D1F36657943255D62F0C84FE8A630204A8E64D8F940E9DDAF3C2DDC16FD131C7
F302A2F9FB65ECCCAD4616977B2EC724FC6A4C39417962E0DE1DCFA69AEC8A02
07179266935B655D20AF3D45228AC3796FD2B7B6E0580904A27FE0C8023F4FA0
FD70E469E5F309690C6AB737E9E0DD1DB57FB312362B64FF1955401395B42086
07E7F9449A8953149F324B4D5785C2A0A4C28EB487FD0BFD65462A1A4A741BE1
B1876330912EDEFCACE1DFACEA7628D16A4716D3989E1B31830CBC2BF9FCE144
9F0E80BDCBCFCF477A2C30A72EC227B20A0AF16FCB8356BC205F18C6088C1D6D
C579F1DCD23FFA147D72821B7A63FC011D5718FED41B16EA1D83ECD8D2ADE289
54EAA105F82F777B6635C160D0E3D67FBFF2080DB2A99D489A070D865C39AC9D
2A88AB5FBCE010919EDC0AB213A09038FAC6D3C81A4972E3C5683F49480FA5FE
B8CD3279398028DAB63EF7E8E1DF85A63F93273F187F8F8619C14AB824C97C3C
70D06FBC0A1B4BE1B2B7F11EF469ADEF71617B304B51C462AB3C6C0E831C9AD3
CB80C5E0D0FAFD079D7F4F245D542EA892C6FE3C3D6D1AC2C92371B7A33AAB5A
AB8375B4CAE9661C9D314999093B2A04EA1CB671C9F07ECEFBA615E023CB0F72
B6EED231AD31B1F4D03E807E56C1E1663986EED65E3EE47A2DD11C1211236973
4B4607A6570F534DEBC72AC06DBB2149F9EFB793A917B3B604271FB764FAB871
F7AA5A5FCC54533951454FE7AFA29CDDEF96E951AAA9B8EEB3F9B418BD132974
C601B6FA29471DC34814FC81A1E1A5155951C12022AADCE5826302220B18DFC3
D30B2277D08E7CC7A87BF1B8EC4507B43CEFB117119D86DE3BE51BF870390EA3
D8DAA3F74CCD3712D1C00261E853DC3078DD411189872A50D85D58CEE8FFFB1F
0288029490412F3E58F83DADA08FA695B18EFD0A4F289705385A411FCB2D7A47
FFE38977FCE18188C0043C448D27E160EE752BE0D44D0F83B6BF642C694AA530
E223AEFA3FDB17EE7AEABA75B9A86D7CB0F50AD4D5CE68D4ED48CB0C188F9DC4
34548B48403078F63079BCE8529F910AB280EBCAE7DF9F824DCA756F9D647DC4
D42DA412230A6231307E7495424F98C9F129CC4A326A3DD8E476E18D666F94FE
53EDC87E47F6D84ABB643FF3B4084437DA26B4A298F819F4B6823EDDAC11BC85
B9F5C5D0AA1E7B0DDCA82C8E01944B3EA48978C1B8F4FF47779A5523F600D33B
896B659C31F4F6F7DECBAE0FE1F83DDE18F77F53DB140A36B0F6F4B883EBCBB2
B6D353BF2CA6102173B6DFBA0F452D011F6CF7D661A470C3C5DD189C1E83FC4B
9372ED67EF4ED9A5B98F85C8D73D490133B7362AB976A385CEC705A2EB89D7F3
2FBD60C08B86A30219AA2988F79E6386062BE839C1F9D30AFFDE82CADE3494EE
13041755E76CC07CCB3A4A701461290B5B79728EDDFC63B2ED5CD4BBE0C4C365
75488D590258CE2084F898D7C58B3F65B09DEA2F8D4F71E80B2A2F8F31D5FCEF
7A7744B64D7BAA701E473B85C65814B0A93E3FFBD7B2AF85E00FFBFAB9BB7766
F444709A47902C919BD2A4BECDCE07B64053AEA1058E26024B46153D6BB92C0B
59861B2DDAF3D38DBEA5BFEDCC49938EB98188A3C4DCEEFA1F308559F7712CCF
288219C6A3D4EEFB81A2C5F154990FD8F09713A0531017D74B47E1F97AA6F0F3
92CE5BB7475C676247D57BB14FF676F11A4B5B564AC26BFA9D85C9CB0414FAFB
C35B46EACF74DD964FBDDAB28FD7BB304B9BF4E12CD15B3BBB163DD66E89F24E
6485C6EA63365D29907F6BA96D313F9B2AB7D175D549F4235653EF979A5C63CB
6EE50CC333387A0ED88D30D9FD2197D31A0894ED0A47B15D92DCA463A8C84B3A
986D396E6530B2E9BA127BB5662CA948A8F0C563B9C868644B8D01064DB6AA72
090DDA0521E6D778192A8C6D4D4639E80E309194CB76FC5D4615F396DD85B06F
71DFC7F39A259E322C5E7D28646310EAC92E5F6AFDD6071B21E6664E1CDD3848
C864CE0E380FDC48B251D52B5094EAD64D380B6818E2C8B1A4EB8F9C18ADDE6D
6E4CE1DEF2AE8F2649F1E5AAA05720A358A74E181568A10B536F68B7A0292787
12C34ACFA5BBAFC4AA3EAA4D8EBB26E20BB00D228B4EAC4A163E0B72899874A3
F85E82C396D9E2891D8E0D6E5571D4EF116879CD2F5485DDE4B9D40F638A3A95
DE5DDD14ADBE72F5BBADF0D9950A195F64FD3209C6D47B46B7708F855DA96CB5
E9E1260F6699D945A611A7EA348DB3C86BE4B32FC2687F15C4C86957018D428D
F6244A1FB6A99122BF89D7ADD01C80F2B2BB2C7168B02C400BFC98D65394948D
C736741F9E0244FE096571F087C5D6D7D022C726A4CECF37CF2DDEB1E9D77098
60C5D43121BC2E4B72A2D895A5AD2F449196AEFE8C01784323DE3804363B88C9
1C86124F431E6DD0744C3D073FFF4BBC2B98BDEF713BDEFC2DA4E0E22EDA76D0
34424CE13529BC04C078DFBF8B3EFD96CF662C4E151F15D4F8EA52641689D4A0
5F7C9EC4EFA5119DB9E3A61E4A669C29348A1E71382C093499CD35D7D1227A5F
5BC3DB96823C167100074C70040A55142148196567C20C7EECBB25ED6E31F563
9ADD24D52ACEEA4B88114EB6DBA9461C2E5262FB9529E9F6F0BDE20D3E209A8F
0C9FD81B99B00D268F764593BAA894F7AE50634766C922F751ED183AACAEC03D
B7D96D012CD0D111904245BE9537EDB0F8769AD1A8ABBD8D1CBBE5E79C53C00D
983C69D8865E93B6495A2F15AD9AB1DA7503BD5B85EBE27ABA01F71E56482BE9
D4342AC2562D8E6D1E4146447561EF5068D17306D66A52FA41644897A9B161C8
5DD4161AA3D956E7961AA8020467E76A833E01C974E32AA2B8CF27D62FC81EE4
D74649BF9530306481F430A539A95DCC2502F712947F6A68DDA00589EF404132
1DBC8B94AFD827BBD5F77820353FDDEC5D98FDD256E858581054789781AB090A
816E65AD3DC4A68B4EF2356E7CD2F90240610A27244970757F3C25CFC3E853E2
FEA880A9013593706076D62F4C407BE252B5F31039CFF52BD1708ACAB9A5F85D
A68AAFC85AF5416B887A1684863EACB281833665EC1F8C05EF81054614261AA9
6C0193B195DE29504018F271AE01B732D5F7989036A0602290F36B2F3BF81402
3F405FFF1FE0269194B53459C0F548ED764A35F3A42DEEE11D44C7F1C7908AD6
2A83D27A94524F3D34FF6224C097F25B492A19999E1A5C2FA633E5FBC13C47EA
6BD3CE8D3F778F62A91AAA33C629233142BC0B0F8BE9F7891973BE3781F2284A
067A8CAA90398935302E4AC4C93F99C37AC9052D9005A304E3572ED352440E67
4257F9116FA410DC9F80512F02A499477C891634E90F1836275732642D9D53CB
C7D3B2871BD806421DB360BA02FC47A819FB2DD38E22070DA918D4822F10B617
B9507C597DA38749B641877460C6DC76A6959D9B784A8F58A267A5A38F6A1656
BA90C3164255165BF75291EF6E74899AB3A9D824CE570B02C6E04E4D59725FA5
6CBB593FE6D53174E324B166BB530A9556BE8204F4A9F56AF893982DEE8F520A
8DC964C866A47958A7E3E320ED129AF52519D562CD44D71FBB7259FFAEE60A3C
087643DEF80A7329D6DCF238431074254B1ED8DA04C5D431B7E94A85F3CA8364
63024143DA7CC842B0EE379AE277062CA405E818EDFBE1F331A846D13975EE83
498844D001AFB812A3E0F0A76C5D2C2D4F91C979B546E457A5294EB500AB0EC5
2796AF0AE6DC2DF2CE6CD0FADCBEE8DE69864AF0C1843A4E6C3FBD1DA1C255BF
D2D2BE0F806203B1474550A04955BE7F3FC23FD7F9363B88C91C86124F41BC5F
5E49D5A65A1BA3ACAF2773F285C68918DBDBC72A81784A4EE507A70844333C99
2103556ED89F984EB6A47C9181F685FFAC786ABEAB809427D3C924672E418327
C6F670A309901C67ABBC61FDF2ADD52E1773E48CC9BD0BB0CEE215F5894EAE38
B7EDFAFB64C0891B14D994E3B9F2807862C3BFF8017A84BA6BFC1BA5940ECA30
76C915AD97AA7AA98DC6CB5052261D715735810768798A3A1A60D005862F674A
3E6BFE06208CBC99BA03C2C94EED9DE463238A36732C3ADACB0EA238AB8B29F7
07E61D199E6575A8D085F14DE63891EEB88FBC9E57392327D25EDF1F2BA3A42E
C1FDF11EC8385B3F737BA6157B5E1BA75366A099AE17E12419D4535D8FAB4881
3F489C776C4356412A9B116CFAF9A69E0C91C2B3E43D107D6FA65076EBF7BB06
8C1A382AFFAABE5D5C2140FEDC9D49BF898FD0925E2DAABE74C9BD7374DCEFDE
808AC369ED1761D61AD3F6DC171141CED704CD5D5B05458D6A172A4D077A3D1E
39A10101CCC339F93EB855877EC172CB777C4CE1172B76C44ECEE71D8CD53D42
D848731924EDFED3D72E35B4E3AEA15C7077048719AF95A1CCD425E579B66EE9
44C5EE7644A17F8202121DBD103014CDE752236845D6021CE966F393D72F4764
3447A53BF48C6C2A7302610A5BDDCCC3F6C7F21AC95E4EE8DEA41D0AAF29B1AE
E1B1EF59A05F3A5A520CD8B2844CCB62CCDE820B54DCD8AA3CCE6DC7BDA57C24
5E018A54AC0C721B6ED771A35575D121D5A043B8F65B505A06D4EF01D9FECD5C
795DAA94A1ACAB3F519B32280A43B64454A8FDE2E58925A0C9440DC034DAD9C1
9668040A46BCBD7576320CCD85B077DA331A705CE078FA5DA64CBC728EB209FB
5A0BF3C85656D645C92FFDC3179EA0478659C278A9FE1825AFF2BAD444392744
3CE0E6D0BC5AA3789536D912DC15385EDA65E18872A93CDA89DD2C2E06548D55
3D4A6EDB24F8208EBE13214E89E0209227D84375718AA931E5FA13B644B88464
5DAF9F4EB36FE7BD1371F20C284307E54889EA74760E16926FC20F78C16A050D
36BC884EADB9A7A40FB2096EE5DAC923C8B92915E6B4BA25D13F5D195BFB7497
51279816BC7FD2E7E43B53BA096EE9A53EFC3D43014A8761F3B973F45904DBF5
49B35B619754547362FEF57A6FB752A972337E1E87077ABC27CD4F9D6D60195E
2C86787C8B32BBDDA79DB42C11FCEB45A266163F3D5216D8AA351371AAD1DEE2
6BADE0A64FB79CF0E0225EA401DB454BCF2BA41AE4EBEA553056C0CB82EC180E
56EDEF0C82680871E6118ECA63944D3FE5126A7DBED04AD5A7F768D29951166E
88C4E7D9542507D7D075BBCD03FA40772E620B74E0C8E16ECDAC57A68BFECEEB
8D2DC700CB778211CAD710F7D4BED08F7E741E03FBB764BE62A46F15ACEEFA26
4993D055DB5D9EF8FD2C6179997EF1FDBDC270D25CFBAF15255BE46403DE4E2C
2F75E5044B79C920ECBD7C9793C9A2DD5C1326C4450B4AFA8AFB0FAE8E8F1399
304DEFA7B85CF56C933AB91593FA24BA11A61A8B40D3229C18FF6108CEBA0BCC
F6A7BB8F8071D07B6046864713C78078099F8D51F1E2D512647277B9CE8FB16D
00896BB88B0A8465C2A85CFE645109B1AA5FEDE99BBB3800D471BB00C7050201
EA695F3FD5E3C045AE9913F8DB0E20616F63B5522E19BECDD4E2B235CBA28CA5
93F9770D4D8912B55EF63B683F9ABD1188942CDC520139363919B474AE0A92A8
0E212E24A73026F822F2C3AF531D3AA01ADF0FDC7F4F675EE7545DE585603E7D
055B889245BB95BEE54CAD5353582EECA95616F74F2067E18EE39082BF85DBA3
7845529DA191A63FAB427AB6955051F4080A980D4AD224B5812B70C01C6EB24F
8BD76216705BAD70526CF070783BC4AB150DD6BA5247D7A252FF7E2B948DED6C
44828FBFBF98843FD61AAC4452EE1E9B6B84F53DBFED8F1CDA2D49D711F4FECF
F94654C2DF2E77BD45B2F405589F1510A5AB9B4EA41EDDB35A731BF7323BCF9F
076A362636CF0BD4C9DF71DDB376BA83E7EC678134EB75265CB10530C8A76E85
F59EC62CDBB4703F3D9AC21F52FD6CA73CF4E336DCF9F08444212791C9034808
BBC4AEA488173E85021B3DBC35CE95603AC1D6475EF23C5E8F45272A015F943B
63E6969C1A2E0A8226817F537D50344486533A0806CFAC6A5F3EF9A9280384C5
533F7843E6670B2495DBC9AFFD881EFF28DFE535D6FFA7E6FC5966952482A2E3
76684570CF6C8FDB960B9CC6E9435D6577D1CFB71D36233A8D036EE892512430
53215DB1D8C1E41016F1DB352166FEB2E4CAA480DD1974485126E0DC86B790B2
3CC48FFB6E27C2FB99B97F2312B6455CB547B771F0F0E718A9CAA0DBBAB734E7
8912D306BA655168567D52F42758BDD2C8CC29D929F365503ED82DD7C0F29D35
A0BF11A1B9B376D042A67C42C617DA8F4B2F5E5C78314012CAB867D741C3FD20
AF705F8E0293273AC148E6C357CFC99E3B57B509FE3AE558E7BD81E93D504826
91E7B3A799F32A0BAFC0A4A0258CAB7DAA74EBBE8395A3F64A3198E55CADD05A
25B1BE71CFEDB25312E6C66A69F82DCA4CC973934DCE0AEFBE747888AA5472E4
EAE945190A0C685DD3303F9A4BA6AADA0BCDBB2821612964B30B12A4EB3CC5D4
AB76A783FC932723E24E36EC2F580416993EC9C4A83EA7AF7C30BBF5848B9A43
DC60097A4956B13CBB81EC7A1CEB5D36BF344354FAA9B291ACBCF9B25CA8A40F
B98C1F251CB49EAE29A3AE0601DB63F00AEB6987CAAF26B0F6849688C4A3D83C
D75A59434FB3497B5779DFBA23B66124203536CB04FCAA433B9C6D4683C6C27F
04EC5A0C83CB1E8577E6A96552ED07652914BF06C64551CF1F2FFDC112185C67
7798333A695D5AB39E036A9258F253A769F6124346CDF97050E356F2216D58A3
B9DFD0DCAC2807EB52000FA982CC11B675F962E779D0CC87DDEC35700215F607
37ECDD6C87E2764C59C2EFFB264B24C0AAF32BA00DCE31316E0BB0F62E4DA76D
734586B432899ED1D9677A4F8D8524778995AE143572154E8B21E66F10354BDA
ECB0ADC7DC3FA7B24303B3C291BAB0BAAD160DE83CAE92CE1146A874EC59EE2D
2E9CD5422AF313BDE7A2897E69408B6925AC50729A5390AD5505CDA110E6F979
F004AF81C8F3563220CE723A5BE0C15528F7559E84D58594F650335675DF8AFA
381F15AC0AF9B82116D999DBF4C16A3CDF11999E9B0B73981745327EC282CDE3
DCD08C26771E2CF5FF4494AF0FC6B6FACB60AD67CCB7CC009C8F3DFE0022372F
EA90204B4D372CA1450960247C4A4F8060FDD6054E79D0E9876FCEE478DA0572
C934637F05E79A68DCCF4D6EC463980D154AF8C6EDAE3C196676B390206FF332
AE04BADA7688C88C80987367AA3DCF67050B2A54A760FD4C952D874CCAFED341
1EE5902F8C7D7A68630021C380BA84A84C9BC409A9E0B4B8373B86B02EF41D07
25D9E1943A4B1755C7FE385F4A3047B3C91D3AF6D6B7FCBD88F7F5A1E1BF13AE
7A733F87A9520963EA8C932E69A0A1F60F070278FB2CD9968115A631A384FEE3
608068E468ED7DBF5EE026AC309990A47FD014255B94CA642AC09090449160DA
EA48C6A516EF4F76BD3D9DEB322D6D7EC74A5C305D6AA433FF0489012BF28112
A291AA8070DE5B921C99F31F3D966A478C65673527C6FAEC1DC814AFD0839DA2
9E9FFEED290E3263771D464B9676EC33E8086A8466473DA45071DFE3FDD522FD
8C5014A1018BE143A62019040640327327F469F82C9669C14F822A59DA637992
2BA66CBAFBAE1E8134BC45C5E39BB1445BCB6AFB3ABE5530C91F4D2987B41510
C1C0066047253D42A7603F643E7638E6094FBE4342C606627C2B936C6ECC66A6
FD6219FC44CD0E30537527A10402FBBC7AF26C8D17A4B1A8C40A70C1E874B980
98A3A176D434402A4638E531B4B14F5D6A32C034D01D3FDE174D63AFF5E30F28
67A85CA681304208DBC5D2A9E3C367032C472E63EF78A23D98FEA394DCF41DAD
56D2D04C5F696929A4D16D7413EBC094AF36D30C3C37B2DCD6047DC38B5F4CF1
175542716F8E53A0EC709B67C6EADAD9C7EDD015B1AC281CECCBC3880C362EF5
6ED9382DED159011197E2F42F5363EF8AAEA254BA66166B4850082A4BB932893
A43323A854D76B457D377CA8F1E14058D895AFA83A0C8C14C8FCFBF1B3952C2F
A1725AA05FEEC11B38BB65C33C4291167ED6ACCC78046EB2BB619596F5E5366A
8297AA10F387EFE8A1A0B029717852DA0B991F817095494BA90DF43CF249E380
786AABAFAC5BC8917467D8AC20FE9D71746B18DCAAC116A3CBA41B5563D9AF69
A47DF33A78093473F0AB6B08A6532A8182758D74D3D37A4ED69BF23F53001D92
DFF37EEA65A3B1357C3F78C76A5802A967BF0D8DE32870037C06E4BF7840D4B1
8E57E72F83936BD4A7C71DEB63DE0FA077FAA903A023EDA354EB2F9FA4E20989
DD4396F5B3075B976EAF72F81911AB97C85554E3B7977BD55EC8B53E128BDB63
70FA61528DB79B3355697C74A8A4A5E67F52DF019252FF41476689CA8103F7C5
335539461DAC0BB908D40971EB8FBFC0BC430DFA70A03C7D9E59B10ED7095DE0
2DBC71654CC6795400A14206BEF1DC2CD54FA4E0EDA05FB8A1E5F08F138BB8B9
2B3AAD416F06594585C024E94D0C05B34ECDFC7DDFEBBDB6E518CBE9FB8956AC
AFCDC53026FD35D634ACDDBE4C1770ABB869AED5D51F7A0B6B44C4A1B1992365
19E45E5B542721B5B6623A67809882FB4DA88F2D4126FC3128F440FF79504250
FF1238EADD3C52B5C6643CA5CFE49A502C3D686DBCAFF32585469F0E6CF39D91
92B03A578FBC8CF28A0D0658E08C2B42F7951EB469530E395C93B08FFED0618B
20A0D510773C1FF7A50FFD6E6AA407FA3EC11272059104D6DB83C60017D9AFA9
5838EF197F7C4D941A96EBC90E04D2D267A3187B8D49B753B8CD3AF5BDEB6549
9BFDBBC390DC09BCCE40B342F97FF777F2C19E6CDBCD2244F6946E788C9FB1B2
836F2B61E3CB4E059DF1161805F0F3E0DD1B4FC9777B2BA30234DB3C93978ED5
1F94DDA0534B84E755804F1B7C68528AF54AFCD295BD8A204FF102263A705990
1570F600FAF492118BAEBECDF590BED98DD02636816727D79D92ABCC82BB7A06
08E56EC1C9E623EF89479ACC93830FE6AADBD5AD390246BBA99EE0C38B906A4D
E75A9A387BF1120885D87FD0545C092C174C9FB755936283B07ED00C446CD0BB
EA74B0351210FE2D9DB382ADE58C98D0CCE42F9C33EF594F6C1C2A77F9DFE31C
CA4E2E126D889068772FBE1734C310316D612EB0E7F69ED3713B1B2641E7E7C3
DED30C170DD8A1B0CD2A0C3E918A017F5A4EB7465B022FAA7CD20A508A4C341A
FA8150089A391811ED31984EBB2140AD4B0FF3779D39D323F5D3AAA8C2A5207E
C7DF24B24052238A9DEBA86DF8FAA263C6B723AE4ECC9BC3AE029B7BD9FD4EB5
69A99A1573AE1573B9B48411F60949C075630DCCA311A03CD2F66385A793AB97
AC7A489D7F4F369AFEACB478D3B2E478DE9211F6790F6C1BBED9C94D2BDF8DBB
C67EFC7B492B3729E7576755EB40A4D939715A34A371F3390D07EADA40D97B67
08DE4D2C00E9BE5E156B7275D90311FDAB25BF1207C9216C9A85F5E372CE48B3
77A859F9EC8E557BCAE48A15408CEA48D73280216034D7B8C4F37B86687941FF
2CB65B3193DA76068F937A3DEC47E328C35EC66A2545C6F3FB4F893B38F3D7E9
2BC14A0B20D6A581C91C493394401EEC8F4947058D5ED47971104BC072AF4B87
EF87DD561B83B9B66398DB46CD76FD5BD69F6E75D15E2C6EFEE13EAC9C53B8D6
251B911AA38BACCDEBD4E4C3B62F1ECFF4737EA83DF16AC0861D6825596942F5
181583AFA025CABED64A719E9A7F61DEF0CD246610DC589C1CAB6A1550EC29BC
D0283667E2F21B5476B687738D5CF1B973F8237718D34970B298D5E1C1A830EA
D8D85CD2167D94F76CAD9F0FE77B33EC7CF4718D4D2E1661DFAD033F18DF2B21
B70958396F7F36AB1D4692D7F4DBE3C41DB942435C2298211A57C05384AF912D
612111267B624C43D6323843FFE132EE217FD13ACCE7908DF00D3C63FA05C62E
3D54797F5C9DC7CDB299851A8A9CDAE21BEED1F2EC547E51CDA63AD75A22983C
F57A606E47C82766ED653A5998574E957BC8C7980BF396E6B157754A0DA93F06
3430F67CFE87E3F9F1B828A8A42935EF0EF0B31C23836FCDAD7BED32D13A49AA
81C8490FCFC21CB7024E823689BB7240F7DFBE9DC46E7EFE0C5FE760F5669518
CB82B46BFC0ADDA32023A6E92F540656D66392C98C11EE78EE77A44E106204D4
1973F487D4C11A21D69CA472E5612690927BEF38D214F34933F507362294E949
0313BFC7599FDCEED19720E91E73B829A186257FCE7A0C5DA576E87040930ED7
4C642971A44AE51948767E03B33CCC334D2CBA26EDA4D2B199E86BD848F62842
7793C80A8DB488BA3FA2A6203329A37FF3D61326F8BE3855A5FF5685DBD6A3DF
9C608DA48BD8623C50B9F4796A9B8455CC88D7B1182182D6AF64847C417F2264
0582C97265F293CFBFFC28DE8F9106D97564A6020F371EC35F04356737A71077
9DE56FAF0E6EEC1A17EC8C386B399F4A66741314434F63BA4CDFF992E3D01F9A
8B3B659ADA381486ED6A898FB738F2C7CC528453E11E7531941C8F7666743968
22AD509251028BB4C2D50AA582A02B174694A2843A9CF9F5B54B948C09216BB3
A89EF1C1CCCB399F23F7C847482149463A1EAEC490785D0C5AB9929657DF2361
DC893F69CFF1A1FE9FC6C1FEEC76D99706767394157BBFF48C8C586694CA1442
F61F07B39F176F764F16C8828277AED8719BB238D0FD55641A3703FFCAC581E7
83B29524DF2360B21DC0FC4755A698320DA262CE354C9C56084CDB0195683A47
A184F9EB3E989C63E03634C5EDB40A83CEB65A29B93063502FD89AFF7279E096
528252306EA31B74A7BF14A2ADAD1E1F12C29069BEA650119C53B722841F9855
AD2DD29650C69C8A929A0F3D231859DFC8C27356F012F4FCEFF4B0DE95802E89
975D09D94256743DDBAA064FF6391CA43D081F81DDE88BBDD172714BEE3ACC77
B1D5C00BDAE93C72F63CD97DA66417EAB5A87278E8BEA42FEE4315599B70B81F
A5A550154F50AF5D70181673E09B4B5D0B68BD69E7E3A46E4A49F76BDD41C7DD
E4B25D3CEEC587A6026360F06218A0607D5763ADAD2E1F216AFDA7F49E7D9508
E4D11F38BADE547D2C531DDD2B4A980E252A0723C81C48B18B8B15CCC6C24572
AFFEE65A6F5A57D6D1D7C4D3B2A1165C68356BE1DAD97CBD30083720A32CAC48
F91A99A9DBD13BB4C464034272AE5D5C876DA346D83C4DB2912B3168A4450DD9
C824E9AC1BC95FCFE36659319178447694A21DC17A7E521428CFDA7CA121958B
6A3308B89B8E776985D0B342DE1219EA3EA55E7E3C1A296E8325A6A8573A5F82
61B06606BC5EB5288867C1DD1560F72907D531A511380A787395F2FCF1FF33CB
F8440F64681760CE5E40C7387E2C9E88A1D35DC7DB6B1CDC72644AC660F93E53
72A039E6F549D6AE03B4ECB2F895193E4F73BAEE3A87694519617535BEAFCCFD
3770305D88199443FF99C23403DD709AF68D96D70B99B97999B29657B8C4F7A3
6529E07E02E319DD53B396C190561CDDE24BCC994AB0B843B2BAF2F34DA840F1
D12982723A5B16FAEA0A8B43E016C6B330E7A1027D49E4ED2D8FFC38E33686C1
9DB89783B921BED55440969131B2ECF3AB80313C11EF2FBE61AB260D2E9068C4
1830CFF92C3BF1316AF551688F012895356C680D0BEFBADA323FC25AAC7B0811
9C74407659F52C34D896CA329AE0C7D63F6062895A4A1DB926A5DE8AC131C38E
096F0066528272B5468870924515488CB8A892DC86123279A90BB725BAF5F8A4
8A9C98B34DE2C0A5CBC4E08975B5D8A35213E68BE85321CD099A9BBE5978D4D7
919969932FF3ED1CEFA8BF105B184383CB67890FA6DA89F75B4EDDAFF2916AC1
6E116A1DEAF82158AA8290140E0D35A05A8B0123C1B73910057545451779055E
2894626EF33D501174198A1CC20BF3E9215A312CF1A17F045B98586E1DE771B3
FFD092BBDD94E0271D31F839F0337FE64AB0BEC8634EA873282EEF3DA973ABF4
D46DE4B273929E8C53DAEDF48A88F14BC7D2177BCE6D71D700891CBF0C17B20C
655F83ED3D8A65489533A7745FE5D350A4212C00958262C236F2EEE8BF365E11
098B68932671F8E21104E66BA5812019837C4BA4D1AB91395253EB7D6C7EAAE7
D13C442BB06D558A1BE4EDAA010317EADAD9C3418401932B2C91F47FBDCC46EC
DFB16E196A16D9CA755967C9DB7A226AA5C64A8E46B4E81DBB8B543622064C23
79D9766C6FBBA6C39577B7841C858F8C4477376A8886EA0578B40A3F2E54B9D9
79968569D1D213010483FB607BB6EF5A0097CC12B13FAB9DC13B48B726D8A80F
BA9662438BDC00D78228994817E29E11510A096F88C5C957872F853EB6E4D75D
7BB6C21FE7DA3A949504D1803EBAE481472BA1B11A6CC51C30FFEDCECDFABFE5
1812F473AC97A9ACD2087634085EF664327AA25082BF994E12F215DEBCAE6E86
F03ADAAB74083AC1E2F2358367ACAFF9BAD3CA6C6D868AEDA90F0BCA7F90B800
EFD228958FD5E97F455C1EA7D173BDBA22A99B965A33244471081F57DFA8C040
D80F80130433210C969C9CC5B6C573A7C9389DDB77C81A4A2F1925BB0A40D225
05B321245CAC9006ABC8A87439970062F50EFC9F587E42417F7CA351E809E827
88801102025B6488AA61F415A48B0F77661C658B38B5C88EEA69DEF7FB11D470
8A63D88FFF4BD90BB52BB98A10F43F95EBD8832C8CA47556612568FE586A50D9
2D87B197FEE65341B2CB298364B764E286057D839D33E287FC36424AB9AEB0BC
2BB7B11F6D8F84199E07CDBCC7391FF10F5E2A5390063415730C8999D2D4B66B
EB4357A1E34C53D0F4B71CFB547C795861A398D0CB5E3E4D1935F844F302F4B1
051260B63D10BA413A67A66389E581D530900D1C5420585C5899B4207596B496
08B7B95E3AB212594B79AA1E3435B9DDD1BDEFD60D81D510957398B1A113C646
21988D429446EB072748D78D47FB7BF8604C5A93CA60A8C564867CA142D33A19
3529EACFB8CC27E24AC37DF34DC7F92B4CC10A40002BCC04F2EBB1ACC09DAEB0
6636A13284CB598E2D535D96C073C6EB0E5D22A02A4FA1CB617BA7509986464C
4D48C861A9B0D791AC8BB9D1264BC7D808C5641A98F1A54AE2DA3339BD0EB43A
F2E2F4FE9A551438B3AFF5B5CC7EF8AE9E2B142BD0637FCF3BFC2FF4D98ECCCD
639D18BD494F4788913397F7E1DC7D40D5F5D38CB861A761E4C1A2F5BBE557B8
EA0AC60566F24AB8BD7DF01702F007C7DD486937C28A3B79E7BE46AE03EDDF3E
D05DC29374D76DA1237A4F4048B1CBFDB388694C4785ECA238073F8E9AA169BC
E0A20586EDD1EB3A9227203F9D548A58836B9DE2D3F691E83B3F7B57B7AC64A4
4D3710D81B4B22B52D859965E3C361E59499253EF23C41F87262CFA2EF487712
E22FE93AA32EBB16B5E0AC42D5779CD52C76A7F82F1C6302AD2837C0B82FDFBF
D33DBE11D1AB2B07D02529C3DCA4D04848D19750419F949C81706A206E82F26B
0728105483743F0F3B67B561F26DADD41E8289EB17FB5F33E42DA881AE152413
F582E3C203655325B6CB948A259DA2F479A052E01444C3E732B27F2E1316DFC2
EA312FC66C6F7741A542544371EF841D6AB5B77AA0628ABF68D5D1B2F3011332
71E4B560DB742F7045BEF4F0CEA1458252F6848FB78E111BBDE378C1A0BA5E11
C212A2FD13A66D9CB8438761691ECE75212AE3E6312AA2893F516FEF6D1B90BD
CE4E6FF0723704AB07EAA576EA5C041B283B90469E44DE247476BE499F39C4B3
81EFF84E712ACF77A10218EC0D5F17AB64A871DA40A3379AB5921693A0156B4D
92838ECB313AC9400F7FCDF50F579A373419FD53827C84050FAC7EED49C0F492
1630638A947EF579371D4E54B9A8F6FDFD93BAA4B5AE0F07C53799189E68FE37
4E74075ACA00809EA4A0883FA74F0673029A2A603D7C4B5BB57AEE97F6B2B19A
25EFF11C82F448152BBF12EA67E807F5386C5D87F9C357CA8E84F7EB23DAE439
99868DF7ADA2C98C65511CF1A0AA2D87835599C9C20D4DEE6A399326F36E9758
A281B6F9CC1D56271EA974BBAE5CDD546981E65ADB9496C2241038A4B00D5421
6857F4133F76E41A366B743A4886B3ACA3F54386FCD73F8CDA9A52AC6D4A631F
881C2DE717D31B6E6E1228CE7FBF45C1D7DC457F22D5304B4A8C7A8F5C7A1B5C
7A8207D266B751EB96B158FA5B1C1B4C66B50A643D8652477AB4385127DADD31
BAFC33E4CEE4420560DC6DB7A1AA25DFD833E62421AEF465AA126055F5632C69
B3AA8F1A30F0BD4E620BC85A79CE5C39DDF8DA39DD44E8ABA0B2EEB044A3116A
DF4A32FCB1EE3BB4022FBAF2C96C0B448D90E3E3ABDD5115AFE46C436B82E650
02CBB610774BDF204CB0DC41E61E13F997051EF26164D519A26822990022AA50
9AEB430557CC188BD4DBDD4EEA77DB840B76EDE89805755166F585266A3C57CD
0E69513CC470A272F5CF82FD53AFC351A058050EE965B8FFB266675415182A9E
5200966AC4444B6961EDE3925484E3FA8DFA7FA3C94D15F896BD0CE009AF938D
BF0B87FB0D258B7B66BF891FA3731CCF927D010920C082C4349791199C13FA31
C8AA4F7D1C8BFFD122ADA4D58F3D998F8E3FBEC54DD611C2A92CDCB892A76BC3
CC4DF4C21AB3BFDBA5418E78DA5EBE2D3F2506D4FE5675431EEF6C696789FD32
10E8698DB27CAA68A1F8A0D80D8E5EF80C4EFF1A68A0D014EA42DC666338D683
8F5AF786BB602CA73DF0D9B35038945CD5003C9F7C05460CAF739BB86D044E5A
7B06FFEFD3D154705121B5C8CC25D44A2ED05446F708CD6EF3552C321F60059F
8E6DBDB3CC3A3EE19C09F8A1476603A2C01738E115AEECDE5E245585651CC614
3E1EBD4D00BD79C5C464110F198FB4EBB4C9DBFE64178953B60248A5D2DECDFB
2B73B0EFDFB5138E87D4CD0E06DF7BFED2FFA46EA6F72FCA273BA81FF7EECB9F
F3AB94B861AAC6E1DCF6CA9C06832E0BCD15DA62E433DA716A6325E0F7E35AFF
5C5DF8D37C19E63D800CA47E9BDABA15DECE41AEB8CBBF0DFA380DE883AF0C14
8A86D877E225EB258D95B3DE0621E7F75C0B606C342CC59D686B5E76F74038FC
BC23C08F4D08FA50838B37B445CCD114B4501B48EBF2237AAE0375B4C4587F6B
27A201DC4251D0D651A79A468E389275D701D5A0B2338DE3472751CD740C270B
47480B15EEAA246010A2835D285B89A96697D13DF2035C4CAEFDF245B8CF11AB
5EF34C15E337E74DD4D533B91AD18E33A913FB660FD1AE3A8479D6C1E15C7EB3
7AC125614DEDE5A209CFFEEEABAFEC0BB711579B6005BA967EDA0EA64E634EF5
D3319CD284BB99A884B6DE7FB6A193BC3D0576F78FFEA848817AE1565628B4D1
D51C6B418EE1B50CD2C0408486DCE555B7D75C37CEA0A37838F64DC636FE9E2A
DD4F64467B311A1451141AE95FAD21D99F13CC43ADAC65801C1266F66F88412F
9600975471F8B0596FC90DB93472C64C1E7368E12E83B8DAFB37617BA32D0336
E1560409FD893CBD0C329BFAE6CCFB9F65F44CECEB2201BE80A7B6153BC6F583
BD7CE73D6EA17B3AE418F2E61FACE9F7D506E7CB2E82FF5536C5B54B4CC3B53D
81FF8038D27564501D606762F34571EDDC313ECD109F0E43D693D13D15A6E964
12C3653AD1A304F6C5EE28AF66CD46C5E7B6C70F1BA102EC9D51AC2462FCC120
728B9A1B24FCC9CB490D8F49E3D51108E3306E022417FC1FF5A03E973FBB50AF
F468592F8BCD4D1ECE7404657A9694CEF90E89FD5992C7FED55D86879302EF2B
19371D0A498C33206EFB9026B962E8486B82002D0AB9AF1095B58D4252D76403
39252818795A42267EFF303DD600085A0721871922575245D78C3D03AB64F93E
C61EB655F252EB3475EA2FB7B23A960301EDAA9D7AACB812A96EE1B3B285D2AB
CC65348CC174A091791F1E20590F9633F68A6FD2CE55317AC6E4234695138E08
9E4085166FC17416CAB86282DDDB2FE4D03A6FCEC5938720892E14CF63866BF6
5DFFDC70EFDFFCA0FDAE6F03333867999A3A85E715C0101B17F699B777EEB850
C7481BFA8B93FCE2BAE5AD2346B242787E83FB361F4C14BAC74B7CE8B741F5A4
756C4DFC5B64CD63A53782BE32CB1ED0E1C41EC975F7799A26407F6FA70DE131
D0549373C02F670A5435EF0094C7FD153EB3AE58CB0BDA180B5E81126969640C
CEDEC6892953EAD550817F147614054C916613893306734A83C3FD4E429E124A
2EB31022C0870D5B12D83A0B0E9495CD4D122DEACAC9DA8D98E85B61E9F0FEB8
34FF2C5C128F8F77D31656A1A9241F92DA444EFDC5740DA9AF464A34770A6290
A5154E3DB5FA05C2543BDC5400773A0ACAE6D25F31C57C53BEB93C8D67F3C8B1
46330877AB2D41378EFD4DE99296593DE9DBCE793B326EB28B3F862190EABC45
BD721AD638B7EEB01613BEB43FD672BCDC556759558BCD21B180B969BA2654B9
F55F1732D2DFDA839A2C87244D17E4696B6FC97188CECCE37EBE93B5ECA2F752
FFF30D28F125743B607F443831A41DB70090E7E736D81127868F59818196210C
B2D49835C34DE75C7EF196802DCB858676D453E369210256392C35544A900F3D
20D5E97B2914FDE324CF714DAA0EDE5A017CE19B5112E2552D3044A1AD7E0719
0C903BE0EE54CB0E1882748DE8CF9B9B1CEF76DF507DF3513934AE1CDEF29DE3
F506E477EB7F0E9EDB29D4C1DAAFB48095BA138E64EC1140CCED732792D65822
593E284A0B6FC20BE3A3D0C1D6497748EDE454931156A87022DC27005B36D3E7
ACA48CE385FB153A77570D87DF8A5B0EE7366FE85134325EB1F44C532A00AAD0
C0544EC4B6099E16795D1328DEFDDBBC4491DB463ABBE2C58C861A9A0A122E50
A814393820CA69C0B38851501562E3EF128CBABEDD6830ACC448EBE07945F561
E1012DB95F8548C3EB972E07FBD6645E30F494BA3463E54F61E49C46DE9A453F
E9A038CF1F19AAAE57D4B737DADED6A0BC2755E022B2640373862DBC5938F093
DD4AC762B37315F8509556728B62FF6FABF52A1E2B28EF497CBA82B838434B7E
310E5B828328480AB58F6031711F58FD761F3B4B67DAC3CAF831E788631A65EA
F0033098A870C13DBCE5203E086CABD26E72B13A40EE8D50830D5736AD45C514
2F4521E1FE38487CBA60DA3B8BDDD44A80355AF93F09E7B1F043C4D070848250
5E90F21196EE67E3DC18AA9EDC1C49F513DB9222691CC88EE4854F29D8744E5E
37AEEDC36C0CE33CD666B5AC9E4E3D3075BCA7DB46980A
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMMI6
%!PS-AdobeFont-1.0: CMMI6 003.002
%%Title: CMMI6
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI6.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI6 known{/CMMI6 findfont dup/UniqueID known{dup
/UniqueID get 5087381 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI6 def
/FontBBox {11 -250 1241 750 }readonly def
/UniqueID 5087381 def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI6.) readonly def
/FullName (CMMI6) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 97 /a put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFB83E8A2A6085DA11
61B1632328B94B21D3CBF2E7752D441A2C9A03F6681FDAB37C4B67D5857720F7
0C4BCEE266586738012A2237A85FCD0425DA7E8E8632543F5BD5D50F9DBAAE69
9E053AECA6027559DE42F7291EB381D866F1293107553809861D43508C6F2341
5E4FCC431AF4A9B3660386AE63E877DCF5E513D0D5702B98D58B34897FEE163A
75CD6F5A2196F91CE5060CA5E72F9C5F79D18F242EEE58135BFAB02D5CA430B6
D1B9A376849751A45E52577B1810C4F0C7F6C8196071D5B08FDB731C5384CCBF
03B460347E0CAC959E4A12620B6C2ED62E06A241D1637F418B5599A7FF3C1390
7AF66A00F7C31B4EDF249C56C268EC9D546CD0489DA51B734C8292CE7B3D9E30
71448C85ACC64FA99B2DEA91AA4CBCBBB9DE20833700AF96395DEEDA3FEB7D6E
D6E3BE4A62CBFA18BD0471C14F3A2FD025C88E8166A9830C5B5B94624A3D6482
D1A1D83805D0EDAC1C79EA858A523D9FA3356DF42BC01886E77F6AA6B04E4E3F
AD107D861FC626F0A439BC3F125D48649E5101BF79C71507FDACACBBB4C4335B
C41A5C15ADF1DF69E1D68C3EB9BE30BDD5385F81D26EC8F2F206C1C7032B9EB7
0392BBCA23B4693686AF8D2E1ACB2FBEE81D75667CD1DDB906BC5B675660ABA4
E63429F16623F20B6A040E4942107CCA26CF6C1F52DEED9EC7EB15BE4F18F2E3
9ABDEEAAEA9AC41E9F20C37C54B33F609F5835AE5A1EC9D674DC50FAFF6D3511
2198195590F62B3B8A6FC8C3431BB8895A2F910F0361062DE32CDA9A7F41E761
B09BD8545CAA2D7124B5688B54705AA52E4716E36C0303FEAD38E0510B3CB496
6C30B115C37E02043D47B4ED796C671E30360800EC13F0F0FF3E0DBF5A642396
EB0F39A9DAF0974678EA1D041F08BD73867065DA91B044EF2AB15FAA6546031E
189936C1FD302BCFBE55EAF369DBA4895DD0996BF7292762551A86C8A3604E9A
8AD29E38BF6FD40172051EBE7C694249F3378ED0139D37EEA3ADB66F3A80A1D9
9C3655F054CACE93BA4AD42DC78A03F42455ED1BD5C122F234F21ACEB8FEFF9E
3BFE0DB2DA6D368478299ED63912A234ADB1DCCF1E519AD20772B71F8522B5DB
24E9658BDC1333D76F07F63D81F7A51D12C445ABF698092A24E5E5C36A52206C
0C41F7DCA529BB0A4D146DB6B4B341459FC17FFA357CA5F93DBCF30B61374613
4846D619423BCAC59B7EB40C14C70ABD985754A0094C98350D01FE9FA371B0F4
38884690DC7700C49236EF68BD6E806E8937AD8B77648F552C0C907007465A76
1475BDD3FBE1CF69C706E703226471C249A3448F81C240ADBE4B5474216D0235
6B0816BB6935A2704E851E20C002F85B653BB0700915B358DDC168ED3FAE3D91
8280A5CA5C2708D622B03DC47A70E5FFCAD5A7C8D9AD563857BBEF92A3BDB588
8B5B55CC9B960F20CA4AEB598DA8488004DEDBC9671488011E836D9D8B6251BF
256D08E6F1808E9D498449DF1F18E48B310D561D4DD3146C2BA64D960E66447F
6DA8B07194E3BFAF662C00737BB7222B55A5CC206A1C46F252ACF93D2063BABE
2BAB874C01AEC438D3F86AE37C9D7FCE4077F5B5785E12C1E0B685134CE2E8A2
2E4DCDDAED2D53D13014E428FAAE22447763D4693E82600F850CA4A49E1ADC5D
C8DFC16E97B9F6164095CF7F31373B591F815621F45DFF77BFBF89EF60C9F50F
0C2FBBA4EA9602E197B9447FAB6AB57B19B1C801DAB66BF7D263F6572B9EEF88
E06744C1FE197B8EAA71E1EB67716B7CAB30C859A2D1B2DB95ECED02B83FBA32
E62F97EE4403FADEC936CC8DAA161F7B509B2723BA2B735572A80D7D087E6395
6A9D34D5963E3C6E37F307C66D1CE551D2F055BFCC7360FBE93ACAFDE2B1A849
37FD373F62BB23C1A2E3DF61C9452A8C995B03D44D6210A968C6293B4A3BE662
C7B0B59E6EF6D53FD293B2C290436B0C448E7D15A63533DE321643E53C85EF8B
060C434E46A736EA617EA00D185323460E77B95C49070B035194A2E7693C3B15
104ED7F56FCADABE49F27F9A576B354C574B5BAFFFC57FE9AF02FBD87B8874A1
24C53826659BEB1EC50446AC26EF3A95877ED3D81D33A8BC1BF7473FB9C11ABA
0F27B38EEBDF77D3D3EA63AE6022DB0D4F1125DF274B86EF0A4A263E108D6044
7A885F5E87362293A53F457CBA6C911D23653DA7CE4BB7D4FF4481AB97C0DD81
C13515F0E3BF8A7E8DE2CE69B25BA9C185D9BF31A65DD290B0D4FDF40B61E2D9
AF92BC6468B3F5AB5D5B88710C489ACC69198D697055B39AB3DE8B3733825C5E
6E763E2698574381A01352A7042A36EA96D17DD2EEEAFF04ABF7BF7D877B0FC7
B6BA51BA994D431F472B6EC4B4C327399576470A1773BCBAC61CDBF0F95DA6A5
0BE5239B7E9CD39E1E4D27EF6695D1FB56D4CA2C2370509547D6D01273CBE6E0
66A696C35D2D0282CB8C85D7B1C51453A0AD0BC80E1D183D11AA78879643D9D9
A3D0B2BD8EE3EDF29483CC5871426232A20CB058EEBDAAED85378B163425C270
B0F7BB46B7D1B89CF84E6A06791195FB17F11F34A2548FE424DE10E376B39A2F
DD9B0BA2F2FDF3ED4AACBD0D60E67C0749D6DCBDE6E79041398DF3FC8D9B6CFC
693B870683CC425C52705902DFD324E157C9829F25B14A057AA92AFA17F156FB
0BA949698EAA0657B03D9538288D887959EF24A427EE7EDE47F304A1A6A715FA
2966273831B5B3A9C11021C153E67A73FA606FE3233C3DB217404C6AED6A4C59
DD4C2A98B31AF5604D8DE8354448B4CEC66022E756B0056CD32E9B002ADC712C
0545C2C16D9457E271D98A4ED7DDE01BBD1856F5C3DA28794D2C7951FE2FE6D9
18643CEEC41CA4A3464D3D3A102653CD6EAADA59CDD44918523B8811C2ECCABA
AC0D188F5E07B37AFD56006B10B32EDD179F4DA693EEBF4DF5425D996585F21C
8780A4D23D24FB0618C12DE65CAD42A0138E28A100257978EDCAD168C55C6F07
78A067F0299890356C2A184820A554FB07448395ECE36C45211757552E288ED3
7DFE46CB92EB2070442AFC85864A45000C4854D728096AD3D4C552EFC26DB6B9
C340358451B50AF9F1B35C2E32D495DE85B5848D78940270DEFC07A14D960730
878B5B55916FB40FD805116C9C2AC8C6D4645DA67A978F1C6FE705EC188DBF7B
FE7AD6769F2EEC4A9B05306D5BCD6EC3A240D6A29ED07D1D82E697DC8CC391AA
015DB6BCD1DA5C9A5A7BE3C5936681215E859E9837027D108A54F42AB24E38C2
4A7D8CF3264AE049D4B1AF48BBC564BCC88AF19D37DD81CCC431D0C554DF29A6
94ABDF8126EE4FE1DFB78559B9BF36FAFEC9791049C865694F9E2FFB7A308FEB
EF0195FAA6BFE7A081B65C5125623903828372F117EE17E588B2FA26DC9AE37D
9A6F0043C019624D3D87AFDB4B90C46AEA78919CEF5D7ACEE316F30EA0229742
55E02E0E2533CAD78CE9BD6E0260A695D776ABA229D89CF9BEA92CE0397821A8
830A557021B3B90CE0B07A4B34C24337FA3FA4A3728B6E013BA01071CA7FA667
6FFB4BA3A28B5D5614ACD4E80E00938C2589CC6CF885A260AF7589240BF8987B
20A19FDAC73FAEEDD93EBCB3D46F735214164AFAF1A7828FE96E2BF7CE1EA46E
FC1FC4527A0ADF2B81CA51E3D96F3E786511AF00FDDD9764CD3178362CF9DEE5
F05D100EC21A301F40FEFC3EF05AFEC140A9466AE68FCFD6CAC1A143BAF2B7BF
D0DF808F0CF87FE2399CD9D2DD424227CA7D4073ED002CD555FBE8057A797B60
313D18ECDD779FA7289D4E7BF82D95A7535CE3F0F4164AF239AC666653736654
C13E436B526EC5A1DC97E1D85C4EB563C7061AE1E81F0B38BC45B17C15FDB0DA
E5F6332721A925D4DD5A97BFF3E3F11D4F4F43BAE4E73A294D314527397F03CE
AFD12DDF9D07DAD8D6C8EFAFC2F52E20FBF62026810C0C31A1EF71FBD612654D
C68B7A24112F0ABDD20EFF3DADBE447AF9CE568F873ACE72B63283CB26B89BED
4B3315F26084453B1EB0877065A76E7B704B27F93DBEB365574A78E92FDB4B82
D6ED91A1728F571FC9CAB636A6E81D0C1C4F5E3F6F4574B6EED48BB61EFDDC80
1831E2AB9327B37881F0CA5D5265575F210BF4BCD8653B4193F74E3FF65028F9
2968B8127C68CA2919DDF529EC882EE99901146CA629A07B4DC59E7868DBE083
6E546C5769655EF6628FE2EA78AC891D130108192053D5056A7BD06C09592AF9
6310B3586A2609DB94CB0079550358F5547B9FBB2B77917A327EFE3F972C7263
54076627B4DD74638C3105FB25DA246484799D5326EE80503F18672B893289CB
1FFF8D3F662FB33E93025D86803551A8A1DE363D1534BFA3EF968871B19FB189
DAD841C177E2AC98B6B69A78048221C5EBBBB86511939D3A9963B3BF021185AB
0B26CA7D0A779DC2F7693C7E48286BD60EE46615E31B93FB0E6992AE20C792A4
72AD6FFAD6682D0F606807D7AE63A6280B5967FAB889DCDF0F76347CE302FAED
A59E1B1AB785D9D0ED695A0D05DD3DF0EF0B275AFCF9EC7031E1357E99A3DB85
B4D137567875F7580E2BEC96B08C97ECB40876000B610E0BFE81E7884C9BBAE6
6BE9C2C612475396BC10EC7FFBD1118A7971FE1971DFD0CB677ECA65DD837B5E
C7D36FE9F20A15A941F1E77C11093C902DF5B7639580B9C0E4AAD13518E1901C
1162FA095F301848770C6C618E371A0AC3463D0D94221EFCC0884B21300194B5
97E03BCD5C4878CEBF352EDD1D2173B56C9B6A08BF3F33419DF226E1633CC5CA
A88A57AA85E21657569916E9B4B79E51B5535A57B2D6FA3EED1D0AA32DC0165B
12F8F5A681040B456D8DF175AD6053A2954F327F4EB4CD453A056FB1701242C2
59755058640C62632C764E002CE928E6B908BB137C28630A3CDBC7C34CF2B643
FFAFF20E345A86F31756C78A8EE2B9B1C5DAB2C863B29A44190770FD90BC6AED
0C25942BBD6A370C21650947B49AC8EB6825BE65DEFAFDDA32007754DFE0273F
B995B8986E505F95E58A3F8873545DDA6F3FFAADE992F3FF7B2DAB76D663280E
CF2BA18BC8871A7C361AA3600B192948CB918FEB0F2900AF2BCF169576828325
449CBF0C7AEDC299FCBB061F491469B9ED1D56771A03F9F202550E17FDB15B51
4772B2F06E6AABA4027D13E8730999532DB2475630D2F8EB98242E36F5B45A94
2D8083014B63A806BB9A01906143482C614B5CFBE8C5354A3F2438B2160F6DC0
81AFCEB201EC67F66DC5808C907A3C6CB664F444D24095D9A11D4978A7B57037
87C67552FD59F5713D0FE03462F9A1A323BB3EFF0AAD61B1792CB109CA9AE4D4
D7F7FBD3FB91258DCFFB4634669FA13E03C0AF699165311CBF37D24378022787
87D1320ECF878F859149B2F994E700A32CB7253297AC58753E4583A08A1F83D5
CBFF10F2D26D71CDB20E1C69A666E9C4D23BB0E6BF1097FBBB204EB736E61FF0
C3FDE1986938F8099694B9F998B3C735770FF21F73B1A6B750498BFD21184F11
5E6AF0F1FBB08EAD436C4AADE1E6B815F5E58988C113B4B2335A340798BFB201
40586D0BCD6AF5A08CE9AA042910197F47D98CBB4411A6D435A46F46B3964F85
032D7F8D880732276A8FD24DA772F642F06C9F3EB4C9090AE4A3AAE67D8768A1
7B2A57E15B7FC626450372F40E3EE28D8D997CCC8CC89C644461D1110740407E
F6D884A0503E05AF830994AD0CEEA924D935749F6EE9F2DD65A58ECD59229918
A303C90E19E9C411FAF24AD5E9B786178F8182692CDD508A4755123B4A594AF1
A8E7287456C1CE2CA485CF4CF9DEE5238AA7328DA204816F98B7EF49EDB30875
3CF8C48E0465BFFA8F2A1CFB6A8F165B63CC80F54C669D02BFD9A0EA0FDE2B40
D69F0101AE4D2C10185AB10953019FE7D373BF40C2F6D4E36693F118866D1267
12BA7987ED4313E8635DA02A4FC1F7815105F8EDFE8004A8801CC1AFA8D123FD
1768A6C39E838BD489C6BEFFD3BDF650DF48D5F8D99DD5A2E8AD235F2CAE8BC9
C13AE9B214CF3FBFAC7BDFA54CB6E675273330608BD35600775FFB2A96FF648E
DF55A78B43CF54CABC0DA8D574CC5C5C62E9D658EC62035EA5028767749E48D5
658212BD39C7E76ED0C6F3E0A1D138A0DB8BE574987AF1E43070F1F12C560009
F48993FAC935EB56A5793BA13C28293601D268B4880F9BC33D553FF3B6A7900D
37900BD3B4B558C84BBAB09B4BC2B14D32E49596DA090E586E28D560903B9744
7D014EF2A6AC4F711A025DBBC841F1C1C93BA1F8327DFE33C803A0993050D590
C7AE262261DB7D04B9DD91F89927161A69E14BB2A48D29578410E312A4793101
B6CD65B298988AB798F45B76E1F58BE24DB207C7E07014E17525B436D41FDB28
D1072CBEB526E17C72DDA00ECDD06394940DEE8BD02CD3C81BFD12BE0568A459
0F53010A0655942C932905FEE87183CE357887E2ED286DC1E89F2F401CDDDFA9
B418F218D4115043892882C09F2E3749D4671E75AB1AD01C78F59FE3F54276D2
A91512C21C68180CCC0E147E834002D7799FF393842CE88BEA714672E1952C9F
7CEF2FD0115B0E292079909A7775769341A7888CE6063537ACFF225B4F396972
41BF46C599D278906F3BCFF81DF941BF5888DE8A53CB0A2D71610CDCDCC1760A
7844F89FCBB892AEA853CF5D967648995559EFE852C95D2EFDA2CF063500F88D
2C83B615618831267BD8F5438DC53C6433CE7347E9C55E103B450EBED6229219
20E979C00B0B9D86345FC3A8EA2B049B7E148A7AA1C859AFE93381DA74CA578F
8FAAB28175D5B57F6A74F9869B2F530009E953913C6925D0045CB2E817A17742
3C5B7574E9BF3BA7B769C161C2496EA2D346B4E19E434120FE92A0ED3F4A9ACC
A8BFE55F04D17DF035D01FC0B06182D8C27B6D32F36551B9AA56D61FB6A34254
D0DF918C6716D8D05B973C8BAD5AD52C06EF3C6503D4E0F7F791511C79AE74E4
4B707612149D583C5D96E534CB45F1E7CA5B23642B1BDBC881FD8E4F66CCEE96
7CC0509B5CFB0B3596682A81E682DAF6AE58F605FD7A1F414F62572298AD8491
B76D0A23B4AC731FB8E7682F506B5CC02F7029827FFD866EF4DBF56E07E7743A
D42CE65B38EBDEA193CE5B172E87DC88452C3DE192E363EB9DBEC4EC65F53002
BE9E94180F73B53CE1E8EE9333DC86DF5FB2561FA1F9B2511962CBEFACA739CC
38A286651CEFBF451FF6568CFFBA8AA68555181147C1CDBA18C4F5C77BA8548D
2B1BA37E05EAF7F69879C3ECBD02783028CB1A8649842EB71023F89CEB36CEEF
A9B04E9ECB0577536B88ECE7C1D81B0D6D5A478F8E92DF83D194759437088D7B
E93C6AFD0CC6D568E60E2F1265A6613F97A6C4068C8EEBA70F6CC4E88A80F65D
EA7B498395390A74BA57221B86611D3EE5DC4632F139CA8A15E5B9D2DC97088D
7CC65197CD93F4803BE4246394F40EDC2CB4904BC273C597F13C8DC680245A3F
F1AF2D7BCE5D69E9CFC81E5E9F46927C5F55C719AFDB2CB1AF2E4D55B0E3ACA8
6BBBCF253CCFF8F02B8542F296CED0EB8A06A88549DC959E22C3D6C48F310452
22B32C44B046A61A4F7F8AED613DCD3C464DB2280D56E517CFD16DC32C83EACC
D3E936D2F3A883B265444D818393E30EE3AA59E6FA73DDC421F5A0FC8442F89D
CCE98189ECADC080F1973E14012C2B87F6A8289D7E168092C539BD54D5D3FFCD
2B5E02399614BD5085D49ECD04E14FDB8686A39D6B3F7FAD25D751CA66148781
32296AFD919D83DF85BA4FCBD7FFAA1D831C8897E39819D72F271AB142F1C4B5
D94BB96F64B76C0C8A2D1481910C9571078DC7A4E23C0F133241F06609699988
7AD4D12DD860E2A8E037290EACAB5FC3D90C30A01449D0F3EB9358A8B1E1C2D6
AB92277FC241439926F02B1D5E36F4A5E94C0430A0400E3EDDCCE5BE60B3AEF9
BA97205FA0BAD80C3EDDB35945946E27DC9682816BFA4436B7C995E8353CA6CE
A532D8D57FF0B407C2AD1E917998E0394DA34FB91A4D0DDC48A5A864FD0F9471
93E02919AD6C9143CEAF479DE58330B0464489C0F01853B81FABA80ED0589969
89300C1C867B4F94BD7F470F4F5AE4EB6AD1762D78FDB389BCD7741A144219C0
E2F6E9DC24349F2961470464810C45AC5AD0E28D8F0E2587FE660D65C6BBE763
702D84FF4B2745F76C02E7AC61087EFBC6CD51FD2DD5378881998F9BF4B6EBC0
9EFCADFFA77B37CB2A2C4B91E7ADEBB51D7D870BBFF53D5BA93EF4F0C2A3EE8E
5DEC67F8F66758319E367DF053CBBF541B36FF1AF7F13D61514DA087F692D465
04F825D7568476E6096B0A2575B5F433CC6016EFD0B4441393F46F86995FD975
41CB68E7867D2FF922F2F3D987809908D8A1D433FA5DFF828643F695693AD4B5
871886C89460293D001D2C7F8ECF6763A4C4CBA78F0B28F629AC72C68E4504CE
7BCFCC4FA6AA5E44EF8363BBC98C217C76927006378FE621985D9E96
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: NimbusSanL-BoldItal
%!PS-AdobeFont-1.0: NimbusSanL-BoldItal 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Sans L Bold Italic) readonly def
/FamilyName (Nimbus Sans L) readonly def
/Weight (Bold) readonly def
/ItalicAngle -12.0 def
/isFixedPitch false def
/UnderlinePosition -111 def
/UnderlineThickness 69 def
end readonly def
/FontName /NimbusSanL-BoldItal def
/PaintType 0 def
/WMode 0 def
/FontBBox {-177 -309 1107 953} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B8CB756BFBA4D5AECF4BE5E
CD4699C683E5E6E065CEDD296F8EEF1D3836662A861996EE78FD9D22FF3AFF04
47A8B7FD0FDD2F2867810E1559355E99439DEFA982006CB3C153627A15770AD3
9B9DEFFC210261733003C864223974E842F5C50DC4466F905B826F103F09117D
A18CAD1CD1C450EDBC35A1DDB1411A6B70DD82C6D263F9668A53A8D5BE4523E4
310D3C300046B7ED546245ED686428447BD857D2FC5D2F7C13359F95FBDBF0C8
65FE137C5706D12E3756C2E2722EE193DCB95928742FF603D2F8DCAC9381C8A6
93C435D832691D9F03E2D49FA26C67CE66F45C0097819521128F868EC3DC1848
830DC53D7ACDEADD8DB05EDA4C465B0FA706A05E17091D994579C89890897F2F
847729712FDDCD476D4122751B5485A0292278490A7F09E311F6188F2AC426A6
8702FBCFBC3BE34A3F6B57D45EE25F3332FF220108296B151895D06BED1D9B82
1C9EB7946197ACA04E7EF6F89DF820042478B5146078201573D3E0C5CBA457CF
17E17C8CE317F8047C0A8941039B7255CF90F60D51E1ABE0CCD86BE3F28B1F64
F6DDB25DB89A6A408985414BD11EEC5DE5200200999929ABABD227CEA73D9A47
75083D96B0469B6CBA06BE5ABB69368254BA6A28520DF69BEB167A68E5FD9F55
79139771FF3CEA9690EBC0759A11CCC3FCD5501A83B2624A5E8BC33B04E27901
EF48523C4779D9317A295FCC99B62A4BC9C8DAEE06FDE9B482A53B7D889A9FA0
379669AD9D9DFE63D85FB36204B0C56B563C813D8FE5F96EC166CBCA4110D1F8
197928ED01932308A1C9F4C8CA95E5EDC2BFF60C929F02AE87F5D62290D83B30
45AE7B8381255F8C39C370F9E9B0E4820B4185F2DB8FDFA795D4E0F57AF743C4
A1453AF3FFC96A7F864470FEE912C7A16BA596C8D1286A8B9D15CAA534860B07
AA63CC8D12DCF1F26DB6592515EBD6F73F63A55A12B9C84AD19C21824CCC9E0C
E6AF42F220B87F2291BFB1E1140AAE4EFCB4DCDBBEA45AD2998C692316CBB248
6D61BED35C2A60966857E924FF8CB6D27941097CFBC0152DADAD834A435DFB38
9CC14E33D4CE17497C23877EF771E24ABDD91972D5B20AC7484E4EEF35CC0716
19B9438692C501C7DCD7FFEA4E889870116EC2165B90EE4264B1C4E91D35DF76
7FB1F6AE193A55D17766E68064A83C6231A4FE72F042ECEE7BCDA604B971DF71
5A959492560DBF9027FBFF6B20D68DA5B49ABA0D67A2F6C006B65A81BD05FA8F
CDBA92637D2CE33D4EEBF0AD2A8782CDF9E0ED9ECEFADAE921575CF4A518C1E5
1B921FB8BF6CD7F036B7A36FEBD489C0E4B284FFA332B3D433E40E8CDAD78E42
F9D49AE24D11B9B064801D47F41B366BC38AB11EC6790DA9A6B6B3B8B66822C8
E94A33FB5033DBEA582F8B401381B9B86AB1E1B7E0C048E542485D8916D49130
1D6F8F9E8864D2E7440A64DAC8E1EF4AC76A7070F1256E6DDD52B18DA4304B1B
63AF7EFD23CAE96C94B20AE2F1D147AAB602E9889CA3D7B79D9FE70A9C4D0076
715533B2F948ADF90E8319EAF91DD6435FC6A7C2B91B672FA23D9F875C001E76
EE74EFC86063DE74AB46A38EF4A83D2E4D14BBA67CDE2BA21A60DDB2317D3C80
B1A70B71AA537516A6AE97864CD95FDC0C8D5BF2E7D04AF5F2FCA69C377DDE8B
FDFAAAD7096E1F56D8759534421E85750C955879D940EAB8B5863110DFE711E9
88086AD2A5BCDD97447886FE244E61483722BB725B80C85E2356A05DFAE2F930
17FD89C13B5E45FC7AB9A306F4E8DCC0EC329C83EDD50502FF5CBB09590B40FF
E9611D320B35F5D7A492397D9101BADE7EA701B5F07DF7B38E8D2BB0A148F6A0
013292F581E7E675136A907D99247AA85BBCE75BF96A710C206B78D6B9EB6AC3
9B6BD772E8E2779F1AA6C042AC6847F2B3291D30D4EEB934A0173199B0306F86
50AFE3009F4B5B5B94363EB81B61D72242433D85534DC1B358CE61FA4B9A8A2D
C1BBD437830EF669589A52D66CD401D3BE7B698CB264399D901F1DF32CD5B746
6F76A8368D8F9543230805C8763BA4DF2418489580229DFEA4CF551103450057
E27BFA25D69BC72D24DB44795B8A0E1BEFD383D8280DFB565176F46B6376AC6E
3F7414E4A017F9FAE43F47C36E5544A790DA1EC1000BF23A56FBFBFE048D06EF
30420DAB5F6E30A982C30AA85A6DAD465D7F23FA6CC431D01F3E73FF7F5B209C
5BA293122C6599386A9FDE5673CF35E206C199AD291CD4F0E033445E86EED300
3DF83FCB4D8216D136C4B20B96065574316F2EE82417F462A0254946C2A763DA
FF66422D6CECDF2A91EA9B6982110264E4B82391D797E8F45B23CBA363CD7215
BAA2D57AA59F7A302CA639A34667A82A4C20F71129F117536ED7582550ED1801
D2E1E0890E1A6EC8766C28863DA14FEBA138BC4638F601D167121F2EE337886D
0C1D801AE1CB0BF72A5339374C40C301C20129F370A31CC4DB362A3EC3AD4451
93BF8FD4C70AE34CB2B48DB39EADBD5B796593ABFB7AE698D5D27BA7D7566DF5
77FAB300B6827464032E307878F37560196B744498262C6E8C4C3F2D12308839
530395F5A21DBE11C8E3123588FB9F523440F4C0EE87E3199D01AE237BCA3BA8
093A81FC067869C3112E7DA26D679ED4D88F60425F55F7A116CE6C27E6B87268
B66C9423855D10E969517CBEBB35358D4A2136D6F059E45618804459B97194AF
A15325E3517D7711D1F495D780F5288AF6F8184A73A5CC6D1EC909ECC922D5BF
C1C82638EDDE790B529C3B1B74485813A61582FBE603D54C4AA4831BC0B7A2F8
AAF27E7E115BE85D71C300391464383F84C9F6BD8300C9106E18207935824E6A
56F38B6E73AF842E172330B7C45B67C84563320D69DF611059AB782AAD5BC543
27AB3774CB6B1166CF26E5DD772E599AC1B58628694B42C1373ACFF3D6705B75
CCADBFCF366596F5E35C9B8FC70A618F06E7EA8857421D03BE31EB29C735E3C8
6A6D4BC14018A5E4C844A0E1323D2B6F8AB106FFC9385D0A86BA9936555A6B03
931A7BD7AAC7DF2A8EDD75837F0A4EB5F509A3EAA3441E8203F9481BA4311F6D
D40479F67BC42485D9DB3D8AD97119ECC9771B459F638927F3DC3EF44719CA6C
14D8519CE6AE125904A0668B48B8BFA23840DB74481700CEE9F0A507E3127711
1BC4FC2CE0E37DA58E38CDB754ED372B6E21F2FBB89979DD6B882A592014C28C
C80021BC78B56EAE35EAB4C8C9BEB5303B6BF637826BAC89547EE7EDABF40531
F48A8DB2C360DA554628A3046D90AF2F763B996B536C7F37A046D4D5B2BCDA76
05BC83A83F169F626D49C409EEB53974A69D2FC7B2005207EE7676D8ABC67D28
7AAF68FFDB416935BF25534EF2624694FA3898FB8BA8080801F9BC7611DCF9D6
AA4A8651177CB857FAFC17E3470B4B43338895F3EA54C559CF33FB7376D464D6
3141B1EDA0E6FFD1D82CE4D084352E97F0925B11B8FDD312B5CBFC4A916A6CDB
708E37926B072C4FCC51FC11AF7D0A61C666D3550DABE839BC2DB2DE0B56D88F
2DB4AAA5027F87D7C0A8DC3082D35617EEEBFE47051BBAA42A15C48FFB0FEC7B
89209983F00331BDD361103A359B68FCBAADEA205D585BABD246585FD44C7FFB
D5B878504A44F088E9CCE364DA954F895436AD8E34AB6B32B5003F5D19B78C7F
280053479A3A8234D93B303EDBBE9C97735FB9C83587A2536500DAFBE0CA7772
A589F8D9CDE094D032050163A73F6EA328E44125303428643E8ED21FCA15FAA0
DF5303BDF4C89757BD860D5479A701BBE303E74E8428BBBB487D799F17A28722
DDF48A5182F822529623BD472E3A7B05FDC80205ED6680C2F4E22C93778C30C7
07F241997679C770C20768A0635F43121CCA21E2CFE07DEA46CE64D8A8853C69
5C665F456A96319D7561B43F3859F3821264DA5AA9E03C2096BDEB4024E035D4
468AE5C73036F3704B16222179BC1698D28901577DF22473C89EDBE0951BFD3B
3E5B49EC9A2BAED7052DB44215D6E646EC37BB6FBA5169B7ED30FCFA10237565
6D225707AE1E8BD59E1DEBCC065A98958F8901269120B0F07596530D42F2E319
95DDB0BB2E0B2ADF528AFFE256CD3BF8A84E0EF98138912565D06D282A433E1C
09BC01838E1415387B024B70766152AC159C272B1B9E1A445D5693EDE464C9AC
BAF5B64CECBC44440DF602DDCE0966A6AF25584B16E80D26624B1D7DE6F3AE16
301E644CF68041D4E1FB4CFB98609000DD08748B2D340F5C5E0C8DA6D7D809C7
9DB6E45C56E52B786689D12F58A2C5DC8E33C024353D906B89C79A1D8F75E1FE
87F564DC023CFF61C7324BDFB76CA74C9D6DDBAF21002A1CC5E9D2D252CB24E5
ED04ED73C0E7EE1B6CDF41D5E0BC9B2E7FDBE23A8AA1FF6203A51656470E261E
8C48403B5D89BBCB8E30233EB228E96BB183F54581052B63B704A3C238DCFCD3
AD96645559ACA5056F7FD695D18FC6BE2133004BB7CCB2A35D5C9B4D8E318D16
23B71D63015A8035A9BF1DA3F832114E67896323A364BCBE7828A529F46FFE55
CEC85629C30877B40378154F3C9AE8D3DD9B34A60A1DF76873BD1D5812330D6A
3040C01B13F40D3F8D619DB75BBA85281C413245BACAF61A76C03F37CEF94FA4
247020DABD961136713786AD1DE6AF42F220B87F22913A4347A4522359194522
155CCE495AE3EC6EE9C4FADAA72FC2C4A95C05EDB283FAA0E3C33421B8006C3C
D93617E6B0B1E0DFED7FE5744266CE245095B21421E755BECBE942D5F370CE0C
31BE367A364877B96A40346172CE44FF83A7FC46882A67033816D6BB0CB3B1B5
A5C3D0DCB573C959B446A8A15EE28E5772676DF8F2F603F3442EE12E1992F5F2
4D6DF96C7906DC4D3F814370CD3B1ACEE58FA0AECF8C1F0C4EC952C94AD319C7
15F1CABAA2BB9F7F40C658B8D7EDBF8D085F082F84A35063986A42B54CEA1FF7
1BD3AB8647D6542B4C13689C8AAE5CD664275A5230AAD9DBB9D5FE2EC20FF979
82022F676F74FBCA5445D5B4714DF71181B2244F41DEFEA8CBEB1D816CD92891
EF8EF3001EC59B39FD2733B795EFD6DF67C7D6282C2710A0005699C8E9233C1A
D116C8B52E7064C70C76C8A0F9C4BC6A0E21E540522005D44BE632DF43872D7B
D88A0BD8C6A80494B0F1484E50DA2F8F634EF811C7B0A8DD0C05C28DD04BB003
7FE312A5EEDC40B7A9B5CEE8D867F7A98040673AE5154B9227AB5D9DB4C8E6E9
5D303B716ED984B70273199BC6BC8BAB20AC92EEBB236A1AC1465969C26EF641
9C4C121B84DE8B70FBF0214838753649B7A640441E9F1D298A6451A3275DFEFF
1F9667F2F3067413877FCCDC7736299743FD492FE7C3D7CC0EC29B34165459AF
6AD6A0BD3491332087146DB1E0DA32A221D8C377EF43D68390822CE151FB514D
0FEFBBF1F53606B8481ECD5FA685C542CA5D86A25E591E0531A442F63B6D8659
0198C5957B4070796ECBDC51BE128255227235973697DB087A97CAD622AD2C6A
842FA509880E0C448046CD4A643BCD5069B7523F3406A4BC08DD6698ABE4BA9B
D95617B6ECAED1A7BF1BFEFD016105D2909FAD92EE25DD8427BF0C1FD943FFFB
0B4E00ECFF538E8D3BF95924D84CD1829BA9D358006D2A7FFA731AB0A699687E
5A666547A6C579E0320DFA04DAB4649C9BD693699D467EDF1DC93410DE39713E
FCC5B80930DECE8AB7D09C59200534183A7BC46FD2BE0EC3855E96425AA5F10C
A1EF4608FE644DA9ECBF9FB40C3B28B0F44DBB92FD793EA37DC67D93D0487E79
FE4943C4932B82A848D79FA178B893E3FADC53835443CC5F676C71FDA5E29DF4
C794A4FA812B13AD32B28BC12419F66734602C39047FD0BAFA91D2389F1C2E3B
262BC5DE05E422B435B4D7D91EB17F913A93505042CD6689CE381DAAB3EC41E1
C8BBEAB138088F3E3123018D1A923A078A952BE760F64560F50B146EC0F3B3FF
B1F9D7B7AAEAF9EF398C700948FADE7A6E4B2335E903D3CCD64BCE98CF50EE18
EB907EC3136954D4A9D288D2883F713271099A724DEF3F5D38202A50A8BF86DB
590037D31B757D1835465DB7CC5CEB8D1EEA9E6BA8CDE849B513EE32BC4C0A5E
98B39A9288698AF06712270221C5903F8C590D0E36FD60FA010DE7B08CD1A4F8
FB4DDD2E8CE937DDDDFB2F10CC9D7A16A35DBC00B6445547C25D2893E35EA436
B561FE32BC7FD7832388AC7C94B0BC073FD16A8A80B3FBAECC6BCBF8E6854D2A
1901F8EE29A61E6CB6FE7024057C14583B86DD47D7D0D43830E2B903B64F1AFC
602FCCE890DA197DC0DBFCE43D1E50E454F6200692EC078E3B168C8C7A3EDA1C
457AE3FC7E2EB583176495683BFC3A7D14BBC95AB950C5C0BD9FC83853B47E46
3D7894836A4D7E1FE8FC184AE202B86E7BFB4B00186D318D849C05B30F285EB6
3583B1E81D6C228D0DF0F0D753C3BE52510FF11A6F9E0B83389981067B92DAE7
C12F2BCCDB5E70D725E484023D78E9DB5A0B980BC0BD5160CA0E9A2BAF50FC17
42AC2642EA361544EF101FA8F2D5A9DB4D534757A78CA6082ADD110ED96539CF
733FC53C12C123AE2FFA1E577E1050048F02E8D2D3B22B04F444394CD43A53D6
392EF768BD776EEE1EA3895F1B317E75E5E54D0FEB31A7A07AA201C7E71AB5FC
72AF08A8D70AEE51EB0ABDEEAC94BF3611A6C3560C88244EA38E7D327F0F4C11
7F34AB17610F5D7F76C207FAF95A3296F1F66DE67304C8159E8EB6B7275C48C2
FF8E0AF8A0ABC2E2D3BC6E2C50316E16C3790BA720C7FE89091CAFC6BBB366C7
05803E0F3428DEB8FDB828986367E2372D33DEC4370B18001316F0FFFFFCDE7D
4EDE64887E6AA4AC90243C33DE88A0A1796ABF91B9F2F8642AD3DA077FF97308
0C388746C5C68AC1700237D1B40A978F1EE6D211E53A1EA2B9AE53C9B5DC7867
BE5AB7DCB5083BF52F48B60E9E83E4AD91AEFE55D3F68D46F3ADD237D911F846
A5F811DCCF566089489F7ACAEDD9B914AD2DA85750468534353B20EB77100338
5D82C58509CC2E624E0CFA8AB1B31853FDBE3AEF577B39129A89428301D4DD8E
99CEB625B6DF09BC50C1BC7652B9E76547FDD7396C26BABB986161BC527AE249
95B1DB317AF64FFF99D2B0B7FDC88AC122B16BF91328B4AE1AA41603038510D2
D48CF8D73541D32DC9374FA1C341F87805145CA7C88BBC805C8BD33872E29655
12717D1E7DB316E8D6B5566E53A71D7CC728DFC2FE9054E16FA097D94FDA04E9
77358F9E072E8639DDD327A43E4AE932E2B747CBC8110A5CE80B433B16E39C30
B9A7FD44766E184A71F7A8B57BF15ED1DB28B0D52DDE2B6DCEDA4BB16291A5A7
1D14516CF75DDD0810F02433FFD5B823CD6A422A625C8E686F3F263BC002C888
4F38F3BB6E09768DA01CD5AA7450D22A8FF7418B1748B2B229488CF16B268AA7
54D994E3AF90ECD2A3E0234F01BE72BADE44EB00EE2B7543187ACC0F680A66AA
8D29846FD6EF898C821C238EF07B60D548453D4D8E36CCEA4B9801A1E8530E53
12EC071B101196D37D8E4370C478020D11CD0C411592CCE94339C59CD62730CF
66AC12CF4AB1A44FB87FFAF7E49D20C538F1852A4F8BC1AE23EB9CBE9934A549
ABD10B4D63EA1E87EA4F5ADADB3A9F520F437814780848F8FE3903A941EA2090
2678ED433A0031BCD6269FCB4E10CD9438F6C1C35A6E519B911E95A2EAE2D316
3A6B891F80D2282642457C821A57DEA70CD2286D0B5604241F395CE5D1B5202E
D38F2E4C0363B0ABC51DCE4D89D490458248397176142194F2186E9B1804A05B
350671BA7D5EDFBA344D6BBED49CD71965ABFFB6F13DA4C09C3CE18C36952952
92CCEEA7B21C9B8A0DFE02B50E3354FF10196BCDF6635B99138BBF76176410FC
32F24F319099CB79BBAFA8C8A4D4DAF1BFBB93C7DBEA42BD43657B8718D8FDCB
2D1A3B6A94B3667CEF0FD5FF75032BC8A1930CA75318F382399E28AB06FCF003
3314795375478B68865970DAC97B0963E96D04B6E9D31DF73907739D7EC6A3BD
1B16ED4B0620CD94F6A13F151FC941D0082658D35A251EA07539866A1DB78393
61A2A39E35F4A55A241F8CC5DBE1FF101A0A492961BCB7BCDC2FD909F8B12994
1C49A1B9D9D18DFB3515FCECDBAA9174D995F4154FDB773A7D9E29FE46E464E6
02CD2067CE591D242C1D066E165BF330F4D3A0A807DA8C72ECC33595EF5AE62D
CFB82C50EC9EFD3DB2AFCF4C308C9E0CE76BF62652F79150A2D35BD4580DAC8D
FCB09C9B2F0CAF51517BC04AB08EB03EF22105AE17B1F03D21129B5E9C9CBE06
88490B3A656582CBC1D90D9931DFAAFEF5383EB3A8AE43F782C9C7F3EAAB6839
3918581E5D402BDB26097BCE9413D853847B32CD7D5C5097943F10715FABCBDA
C6D93BCA5F131550E83404843FC36D9283B20A208840FFBAE3ADFCD1893A370F
E5428EC243C0232D9275B6618CD94CE466C1FC3E5A53B11E8B8D4B8190C71F21
94541D624210DE3E63C206E7044D53414D19B1396528AEFE032A82125B839CDF
D2D76DA8AC2E55757D240A62C6D6E0250A358A65ADDBE9EA367E12C615910335
910CA61F5B36096DED07A8250C684DAC5D5595A3C018ED39462647319E38C8A5
EFCAA822840BC8FA3E02D9B520F7E8785DFEF225DBB0E088A006D05396235E0E
22F5A84982C779EC123B4524C794D282665B4A9A9E06210DC568582584C21E0F
14B839C1813663D33205454A1A4B2D9173D593615C445987E30E3040EED97319
A0009DA31174DCF5C2A980B837E51DD299B23B877A487B252B5C8AF4283C0FCA
892719668573A26CC0D7138FEB68C2F14FA41AD6019E7F444B549234C8F9539C
E48B10DFF138B6EAF2FD0B521E205D472B96D3FD0505E6532BEFB47A747E91FA
2F5CF6657549CD60A676FD98E1D866463FB7CDEA3D21FC14CECB4AD7EFC5E0AD
4ACCB17706DA244B8DFDC8B09D4AC677316AC50B0116FDB2C01C1D7ED7215213
846BF109C4ACB558B54D39BD054AD811A883E3DF73C5DF2A818ABA85EF3003CD
3D55C132C55164C6EC8FB34EA7F2003D5029B9867FFFA5FAE46743E6A86CD4EB
C8FB5B0EEC03D9581EA1CEA938B1DEF9713FE5D7AE249A449513D50B8908B6E7
86F693FEC96DB845C708A8A275F0A0D47AB0CB042F19683E6F6CEEA8A4B011B6
12C8579B7CC6B3085775664EC99C0AA51F05BFCB0D4DC15FB599B9EEB0C060DE
98E2C08A663CDE6E83DFD6A950CC30E00C41B94131082DBD5EF01A0F11922C2C
89763C7B0BB6ADF4E299555567A88F879C0A52C826F56408295B70D9FE022B5A
91BB6E98159DCF07FB3038A0C431DC3EA5609FB01BD14B61BD20023FF06A9ED9
A189D846763667E9ACA2D76BF06F0F125F1A9F4A31C461CD143594271E3C1AC3
B1A8B6DC7EF39886E8B9CB758DE90DA4F0049C2A4ED08E25C48440AF23544DDD
A002535DB573AC33814083C5AC36998F18A6397080D2E5361CCF32578540D0EE
AE169098644153D0267A1475E4FC00DDD285958BD97DCF653F1D721BA2E185FD
DAAC32C6925A84ABECFC00B4E520F17DC65DEB358C78F2596A6F892A1DBBB791
C07A45E7DDE2364F63929EEC1D9B8C14D8053F84E69AFF1EDEE23D1E18F1D52C
D2D3EA73BAB53FFDE586EF02F559A6FA964FE50C29555126C69131A962A8AAF3
D3B33E7D926FA19CE25F7EA026E67B750712929867B787B5162ADCF329D2710D
1EF4D0F225214B02885D5423AE88422D79BBDE21C1148FB7EB0E766E84F722FA
B55AB7413849E3AA278F364C3138255AAA8F67C9B93900B00D5149CA89A28A29
4E6D7348787C8498C8EFB529F24A018A1B71BEDD6874F4C01BBA0380FE446359
2A0CC0D168074E8665A397202623D88C45C1D1BD43A33F5CDBBDFBAA5653F93E
CF4E53A4012773A0997220CF12DDA6256AA2F9C8EB37BD583B0A36EA2AFD824C
88453970C05823D0AB800B022A9B59500133156F283BDB4CE6BD2F4C3AE574C7
BC11A9052D06C9F508DE64083AA77BA1EFFF5D089C9E19C81CAC4811C8833E79
F367A8A3E3C33421B8006C3C144934DF04844389AEE76CEDCD7E0DCE9CA8470C
8CAAA290F5900666EBAB3704DA8B2CEAC86A5309E31CFBABE20AB2D4B19221FA
2C1C11CF6FDF3E6E71FAA5EE8939B362568EBA5408F46433EE7C22146826EC90
B35F14FAF24C762E3214DF693A24B1B8860CF9581AD617D1B957D2A7432584FB
EE46CE0AFE56B567F2A61A3D11171B23C397A958A8B899C7CC8821B070E435D5
C3FDE1812802B91DC7E796617ED244FF89F652FA542AD968CB3E74C7CECC76C3
298B3C4B80F0AAD183BCE7B6313C2AC8E0C145A72A0D9F60313880D8716B3961
5FA4C409F6738E71063022D2D73A70AC8A43D9FC05C91A42A2F3FC6977DFF7D0
79EF1BD499EF6DA752362F09843CB94153EF99E148C093F5D97A18B6708EC8BF
2F92C199A49A16AD389EF091D247429B9615F2BDFD8203AAA65D8116A0074C84
695FDDBC264BF43CECD490197823BE01251F876D9294CEA0A46C54B51684BC2F
BD7A7777F475837169F780251F107E276C9A2285E9D60E4A48C3743A1026A65C
7D6B4D981AAA739ECF1848244C116CD5839F6CC423A2BD76A70CA4D0E6EBD329
D7DE0197C5D6AD69FAAEE71B0EFD89B801BE95FDE887CD5181A6F96DF0EABA40
DB4B37C49CB83F7BD49261920D83FD6887591645C92297A264445CD3E15DB85C
9CC6EC08DB9DEC93771232F2E1D7A3CA79BC7B918159496F21A113BFF0AAA5BD
833B0D91A874F95BA4E3D11AA35703BA6031FBCFFC0B180D3D55633A6BF62386
16B603788F6CB5C564ECD7F4FB614D7F21CB0D414EDB9C1D2935C2D2A1FF5DDB
689091FCC695DA147F072986067B33E9581104AAE504A742A8DC81ECF8F3935A
61579F8FB30C4311DA767A96B81C8D5F45186CDFF72CD784CB460D09B477E2EE
FFD527EAE7BD7991197BAE7E68CC6E0BD1464339FE1676F1EC07027C9F3B6B3E
B1E52B6FFFCC8581FEB9998D73417558944C53BC9A850E70D539DD8DB003E563
A48EA308C580BA84A84C9BC409E869FC6B31F156CF93EEF96E46B8A574CBDF3E
43550BB004964050C48466C4352CE45F1E40886EB59A661131E339589950507E
B1A5101DE7E9881C23C57B5FC434FE4B67B08FC64863E15152954169F5E44EA3
EB2FAAF67B8EA4E1A2877E657A2D3EE98F8C8E2C255E2AFC6EDB5EBD070C7B72
27AB621416AC7A810EBAF32A00CBFEF7D2743C3FFE091E57641459A6489F03F9
BA2DF35D2174C21C9AB231D65CCADEA4A530A39880BEF6301EB2A0443C0DFAAD
91E9C3A34577669C6CC81D6483EB03B3D774D50E46BFDF3602743AB24AAB7879
7EB93819B3155BE8B892AC85DF820F51EBFFC16239E346D2597002613A73572D
79A8CBE1700412FF4E99A8AFBFAB8583AE4D112C05816B6C6B60DB5AEA07A6EC
2C6585FC74036F39BAE4AA3FF2FD0FB165D2DD92A6351ED6FE1722ABE70E9065
9DAF0C5B1C80F749FD9E579FCF288653F9B3C73DA6A2F1D8BB9EFA02055754AD
FE28B025DD2E0545805617031403BB992601D292FB22F192CF42985E5FD5D026
EB71DAADF23A51E140DD3D824379C42E7D5EF72A7D5BFB0D0117B54436513885
E1F90D286C7C959A9D114D5E47831EE6A3EAAD746F
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: NimbusSanL-Bold
%!PS-AdobeFont-1.0: NimbusSanL-Bold 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Sans L Bold) readonly def
/FamilyName (Nimbus Sans L) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -155 def
/UnderlineThickness 69 def
end readonly def
/FontName /NimbusSanL-Bold def
/PaintType 0 def
/WMode 0 def
/FontBBox {-173 -307 1003 949} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B8D62A63193C4AE94C086C1
552833DDD8F116B5DF33205AE709B3AA63DA7BEBB165B67281827B48FB5EDBED
02A1A5C0784FC57D3487DAA59520BADA1BE3FB9795669924321CE4F466CD8E3F
7E8EC2494AEE80E2DD7A48A6861AF5B9F0CCAA4A2FE2B03498EACACD6B9C39C6
A8F2E39E06BBB061CF2EC380A32EFAD0B790974BB5CC3DAF0992471456967362
77DE34813F27ABE99302F86BB4D293A37F84667E7F3DFEE4CFE9D1A676A5728C
AEB5222FF50DA97E74B2CDEBF725FBCA7015A188891C8A376B9DD8A642C4B184
B1BBF3F376A6D6E31EF1C8354DDF8039CB20FAABCB34D4749B3C8C8D6972CEB1
06B8A5AAE3AE40A91F1F2B1155681A9CC933F87528C99A2B0268B43A3E829E7F
3BD863CB52950773BD9B0731DC4992541D7DE7A055CA65DDD2317F1705C20D1F
93291BCC254CBABA425C032B3B15050D41DA14FFE1B3D684EEA428095A01E931
98D4F849B239AD9D79F4502F0271AFFB0C297F2F347BFB9C137782646F648F77
0076B85F5A929FCDEA2703333F6918B8F125627F8B505C688E30F258DED1AECF
2C86EDCD88C29249A8081731737195FAB7ADBB54743BD66511194DEE2516959B
A20701E2D97342248297425491F6C9471EC9A98E630D734DAC19721F0B324432
C8D7A0B751453F89F7008BA37BC48E0831EE3ECBD8A0A292D63CFC890B28F695
9E29AC3B4DDB78A6883B9272CE34A012A82ADEC0B6B641E3940A438A098CCFBF
C50544B94FACFD9D7AE09AD0632015F81D2F77FC6D80A42EC11D67D8A91C376C
13C8E3444CDFDE4D2A1ED021410F4D6A4E97804AE949BD913094D23108C9D384
56F11025E2D24939114B6BCF579A0315C52F3CA1BCC2860FC1A0B9FB8A37AE2F
C20C0FD44D215FC2AF737FD0339B070D54E664021240071C665DE4170DFA182D
4E385685FB41A2D85888B1149E9A766CB4F309B4E2BAA28CF1F8CC12C4B19E33
F046CE97B53DEB549FEA96CF6CE66357C4904B7932F5B1CE03CFE3A10C976B9C
C9AD11D7A02816F8E11666CA8B3EE1411DF2CA94172659BAD929E3E3E5248F48
0690CEC6D8F7061608CF2672F65ABDC96B4FCA84D5C847440CF9523D3BF23F6B
D4365582E4B187B6A1A0282ED323BF221EDD0A4CE11CE7EDA738D1AF48B2E19F
EB3DA1664DE99C447C35DFD45069FDED1FCD70B4A6855E91FFBD7146EFE88012
0BFF1D6D1ACB53D5E07FB5795F561A4A3E953BBA7C03A9762ADAE18E58DCE6B3
B1A703122EF3B16963AC7CB9682CE60E17947E7E675D19901C7E8272CE4C9FDF
536ABDFFA429B820A82AEE9A73D7DCF77DDE4D8E251CB3B3A5B0A91C0FCD7FBB
EAD7A812FF194FD049F28B82F4C2D73E41CC73C1C9F668931A2C7EBA5400A1B9
0902EFE6792F207136E1E16B41794E6CBF7316889A602D35C37EF36DEC95AF26
E9BB0900456F2EBF2705ECCE7B2ED90343D23E006ECB282D4B3629BB0C3892F3
FF9C17FE6C5FAB68358E1CD44AFF021948AC9FB8410A3DE22E0A01E367C52470
2A8CFD284CF9E8F505D5DBD7BBE242FE071FEA0094A55ED1CD7C9BE6B7C56C98
16AD1985FB7624F5E48CF6C0C2ED85B466F64C52F017B20CDABB85D24452E086
3942362E764A2BDA0F6C1B24426E302DDC4403A087EFB2850CF3275C7B24275A
AE270F212831F4C4A5D95DEAB61923CA126E587E8F5ED4F2D5738F06E8C4F911
B346B8ECDAC481DEDD2F546305A7CD63CB67D40093C618FBBDF498C8D7EAD8C7
1F5F022D0BBCFAA8670E3B3B999A1697C947AF38D7E1A360E3F0825A9AA77840
D7A9DFD575CE2F04D308F7C553EBF569AC84F2C12AA0869CE107C713A3CCE624
5059BFB3F5AA27D10E337086144AB09286BE3825A3482C5422454C6A9CBBF205
833316780EB88302796FC427A0FB9E53A7BF24577FEB3FA5D85CB6344F908007
183522D3C760C11FC7DA8D14BB5DD800576A6B4D1B991C1BF3DB0F9CA2AC5D22
91079A199F2F6E6DC68213D33EA893B74F6AFF30ED1B51F8B53A015FFD4D2076
B71F73225B151CFCF11E2A2917CF1B3F60E2B4D442307C394E1625F7E60EB12A
F2EB9CA7B17B082F1664D09CB7A3F38AEA99A13F659089426126F47FAD5B6DC7
64101CD437DA3C22BC43E7A8DE07253EB371470EE1E4E42A5D1FA2C4DB5565AD
79D6271AE28E8FDE5D4CB24064C145DE44ED486A1E7DF2DF921F2B1BE5FDB120
D8B781C3655EA72DC22A2A2D37579F0AF60B42320AB25C8D769124328C2718FD
61DD12AEB2F205F7524BDB04A71B9B841E8D1718EC76B4126B1DEFC3C980F9B6
85AADCB99E46ED8A27ED6D85F54C29D524819DF6BCF9D3243E962E5E31B8CCE6
97B76D97B63AA7873A68434E3E19F8BB602F4C370C2628CF64FDF0B9B21B55CD
BC9D43984BD552A6A9DD8168CC7A6B6A8764526105E28C7BAD368EC5EDA3BDC4
2B5E33E37105E1AF8C09C79770359C39E044865DE7308E8B8CC58DFAA362D839
33ACA7B15E5D7DA44256843CFBBC7F844FFE16EF6BB90BE6C4280377C44427AE
AB1B276B793ACF6AED80A2B715340059B49F7CCAFF73E3C7106DE30A0BE3EFD4
7261CBE2F070C4F44720B3C5E0DCD6D6D2C4E34FA18BAC8819AD0AF42F590873
2E97533B225B51D3135CABF9616A60B3F25A32DA0A4430366BD60DA9B1672F58
2F3BD23BB986A6E37E3E99FD381850AE69AE49C54A2D5CF136CF9D10AFF24E0E
C808FB679E3102A6ADCCE719330551E0D6B47E695101EF6B65B0DF76203100ED
60175732483C4717174821FAB3A35463DCC6064489AD1F64B881DFF6FF6642DE
566DF11DFB61516526DB97696A0687421ED026722BDF06E5C2CB6465F357A300
3EA84B1B240B00801872410D07764882E2572D2ADCADBFCA9441E69AB04A10B2
22EB2A73449D8EC84F76CB7C170C51BEEE7495F8C6A43E3257EABB57F4F77133
6D985C0C360B2F5A5877FD00B36CAD20D0DAC57265D721915708AB5C96653E33
2DFECD4974305BFAA1F1C1F92F82DDF3142D2940FCF6BAF0643EEF378752D3CC
D67BFACA1F9168BFCED95DF198A8710094E2F544BCC791D7F03B5D86E8FC36D1
1A069B28E6F993B0458F8008A371CC3E826B53F33B91BDFCE8083AC0179569BE
F78E29D44A9FE5DE1D9C1AA8B44C5BA5FA52C7AE1642BDB232CD5DC3B2E4BB3F
A06632C6E1954359F1D07FB900188796BCD2E7E98D4B35F1A52670B48E62F8B9
B96E2D21F0A1CFFC30CDFC5AB855D56C144D266207BE9EF39DC8AF336680BBC4
AB0D5BEB5160BA66CB7B4B0E3BB4A408480E34D300EE501D5669581704870679
9A5EF39565513DECE394056EC3A3F78459EEC14BB6C8293B5DB98EB8B4C9C1AE
7FE199B0D73D6A1FE327D70B1C97FC8574D4180B533C631D8D3C8313DA9EFC27
F32CC74CF2C8217DFD1C4FFA9B6206002F4CE1B34B581417DF480B97EC3E58C2
261DC3CD4D4201384F271438EC6932AE5DBA545ACD7513D83BD41AA384CC7826
BED655B4CD79B46A5752527AF38AE130DE58928B59A875DA2A45093DA88F34C5
83904DC284B45B1FE4B6E9E11795C3AFBFE14B9497864B3E16A7E9544EA7E773
049D63B95B4F921C1FBB5E6B223264627A5C9762E9CB4B3DC971BE5390402C15
688F7C1E91033937FC0C66EEEF2FED377776CAC680F2C0627E7A167A2992206E
64FEDF1E82380CF54718F6DF85A7723685A2800C540B997CFC98C86E5BCCA2C2
6CA0AF8A510C59E5785C54299607C439FAA1E16B9860765031E331E896F6E15F
7597803B1B466B77EAAE2FDDCE250F72D212A64427572EEE2EA522F9BB9A0BA1
83AE7EB5185BC9CF8B986A4A800FDD3858D5F37D82BC4A7ED4D48EBEC0315B46
B7EBAF4D51258AD07F49A868C4FFC458419F8D592EA8EFBF5E2EE16884FF136F
2A2B90961AAF2D7EA5F3D1B1B84960F0FB847AB87709AAD4FCC3EC39852005B4
6123D78C296F0A156E288433A91BF5609DAAECB93C7FFF2F16174606AB277029
9A4EAE74104605803F4C580F80546B2D997B174FD53FA4041B0FD6BB628629DB
6BACF364CFE0C551D22C5EF1C00A20F0BA977D02FCDE4C04BE4470B80644208D
CE745284110ED7EF071525CDB938F964F5BBE7CF9228753FF3099B6A595701A2
4169C2A186AD44405BC535E9863F9A149CE12F1FE0721CD8D8E065D7C9C6A502
07DA9592497101ED625D14D389D4E56966044459C3DD2F9D9404AFBDF96E2AC9
9278210E77A74435F29222AC582F7FCD6D68B6F9FC4824F1ADC5F2CC68433FB1
34EFE54B10448E8C8F84EEB6D58D4ACD4ADAE3DC844BD3047B4E34A0A1B92BB9
8F32ADAE3D3D0D60999FF81AD0F65C99D72D0A04E30A519843CF0206062083EA
C81F2742AEB6E685240E829C07F1B008DA0116634DF87737685EC44CAFED396F
68A43C26BF138202E62D8480008E8B7182D08C0D5622CDEE56212D57F9F2F1D1
27CF15FFDFCAF50F763A9498D14245AECE2267EF877EEAE8A7AE912C213D0F38
0112FEBD737CFF6C1483C4577C95F1FEF8041C8357BFC56893182C034354025F
52AF6C751600330F1417DA1FC08EF218B03254F3561CCCCD674B510C09A2BB47
9C57B9143F8C0213688E636CEA1803EAC4AB9F7D674E7089B4D57115306585F4
92D646AC1CBBA7BDD35F637D616C7003024B08E527856CAF559ECD0A293D4022
6636CF8C61221FE0317A60F1BAD110A8BAF3885629F8DDBC3D3B09C57DEA2E61
587A2D7443368FD6795C2ABC2ED198C21C8B2AF77235C05A887F3881C8F1E9A6
8F6AAD8752FB17179D13D395636AFEED8611EE838259723F78C8EC10C2B12196
6B6823BF1E21636818710B6DB6E96A27992B79BA074C4EAC795789EED5859CA1
1C16BAC45E60E19DBF82842E4890E6B385589C6DDE14043EB75BE06C5A3CC6F6
149DDAE2C6A58166DB9A61885A88D88CBFBE4AF7B655ED7915395A1A52DDD8F6
C69AD73771BDCDE623755091C2353598B5EB451E530950C37A3179B5AC61D513
37FE31F8036029B4269B792E8CF7A04B2BE35F5C7D69509DCD6128A9CD8A0E2F
DF6D78CAF76B9DAB0828839572DFE2ADEC5F0C84C7C7A5EAB096AB6D59F9F111
74163E97784AFFF0FEF2C579A9A7E69E052BAEFE1843D07A7B9945FAACE021EA
9E5116550CBDB8E6211C6A7FB56A86E3C536C3BC468BDCD6D69D3C10A0DBB28E
FC16DB6E1A98FC287C5803B56F4058A19FEAC02F63B3708C71B2B30DEB9011C8
D330F0AD6E39F97419EBE9E6DB6DC7391E2C7C242639D8BF382EB337A50ADCFA
03668530FAD2A7FD8F2383A264BEAA45DAD0BA52D237B23906BCE0819679CE3F
65BA19BD9C6392ADAE10E55B1B2E09DF55FAD89B5C7897BA6168C3AAC0EFBBC0
B69365635E9B89C55918E9C42B9C0059BFBBA612CB04CD30819105D7AB5A115E
4DE96983411217BE8AF5ABCB55D2B616D782D5FD2AE1B8ED3F847E1F03905ED4
68E6CDBAE1F8F66E8C07CC430D70EB815B198890C950FF790C5A334016AB3ED7
96B8189A3F832DD03EC4580007F8F8E667C4F3D1BF4E59504FF34AF5C161CF5C
41C774F9C387C22A2E265AC2F21881EE4A6A137E0B4AA99C38F96B4345B162F7
6F8EFC842611C42026B404E02EB8191EAA439478B9B1B1F7B02562314DC4491E
D726309882D74B96AA8DAD5A13ECAAA9BE86C412A88C243F5F57472348B3CC0D
AC444A776AD756C5D874E4F17842A352AEC94A848756307559490FD901651FC4
E537FF9D6CEEE5278FF99CF84193B36278E44FC3AAC5B80EC514976A747B8E08
E66BC3DDA8287F5E4F171F41A35364E573321A926C7C3DE13338F52F24008CE6
A6EC278081506796D4251764F007A01BAE472E8FC284B538A32295BC54CD78AA
2D09F2A0667A4E0B5D9B594A936857EF19151A5916068F4BB7DA76A29057CE36
18998113988006CADF804B4CC7F21DAD1DE4D31E6B140C876DD15B613C7179F4
2E5E915D1F750541D0B1B7553345FCD90634DB2C66DB55409F6738433EAE7959
22E4C382719280134F9D707542BC10E7F9CF2F2EF2838BA35F3553AF5AA0226C
3B81EF70708D8A505C6C1A2CE52CB2275A21A0FD2F1AC15524D32435521A8578
C51E3748EB41A2C42B59F33E4BF6F24C4501A77D867131C874F08E1EFE7E5A10
E949CC927688548BA6B34283D255854A6BBC6F8D1151137A4BED203327FBE150
53BDD0E5EB12444C38B9DE6CE7B9F86A4234E8F7CAF7905AD3001E74DDA3963D
32CFADC6FC03A06F64D7D5EB49B35C4AD0806014C06CB8B7CBB380C215122FD3
732F1DC9F07F18E19F263E100C4C34A4E3ADE805C3D97E00EBA2CAC2D3B2BD92
90506FFF73AE30E401718CF5AAD7E22761850AD054A5CA5522B0F83620B26F55
D7620C2C1C3923E74CB7F5565385DEC0F3EC7AA8C5CEAAFA731ED6D7FB3AC4DE
69C21A42C19DA52D91AFF478F3C229917B97854048965A57BE19FD700F2EB01A
51AE4850C6FDD58E79E0E6A882AA9B11484D9D6F78C0AD68FD2CF04671D4CEB5
C030A7D2F463F821FB6A1CC91AE662CB73E8D951FB8665046D5D9F6385A49E0A
2F9E79134B3AEBD6E73F9DBC35578467F47C386353D5A63B21174ABB2A1E512D
4ACCD94B7FE732B0C4FE8F9ECC7D708592EDA8C52B00C27A150A4A4A3521BF39
9EE062ACF3D7BD3584AB708702A0E6B17FEF28F267B209D6F82000FD6F98ED76
A6282D4A4D45BAA857546F5C733A0C1F4B22E80DF4D0331EE368C918F6EC3423
C8E1FD728214B64E0DC12CB7A1D572BE83ECA5F0B4168993AE7EBE492614B0BE
03FB19A4F46AAE973CBD3D374CA6971ABF644768F00C0BB1D84C289C6BED3299
74594AFAA0009F6A887AA619D243DBBA7E8660988DC3F503D1A6B62708A8216F
8AB8DC8B253A1FA329E58BC26CE436CB8730DD1D4D5EFAF5FA6A47330C651427
63BD025D257624B3EE5A864F6E65094FD7C7013485E5F5126C18C3A842411785
C1BD11C11813F5DE80450CFE4C4E9808EBF05438BFF6863DD089D7C65B696A7C
FBC5CF9CCA7ECA1ACF199BBF4D64A79967870EDF81FA758201DEAD290AAEBDBE
1DB3AEBC667103482B960981B7D3C9BE8A6C419CB4C2C27BFF7D29A3BCFCE2D4
ECFB23FC3C815F4EF44DD5BA87073DEEC9E6D631999374675D9CAB44C37888C0
6355C62305904A36E5A1DC6EDC72B7B9B4BCC1DCFD03A93BCC1E9BE1676EBB01
B0469B34E58A94404B6B11DA1125C0A15CCA4C3648D039C427A14D885D3186F0
F44A5CACB22DCA7BFCD6522ABEDAED579E0B7970CA866C9F8013D6FF1CFC9280
8045A2343483AF5C5FFEDEBA07B8A43718162868ED328CAA64576DABD857F3BB
9E88C8C4326A1387E99BDF607D46EA79450694CF5FD407CA097DF8FD1D545A1F
1986B06BD6BEA93941103E88DB6DE7760168FF738C1D4BC1F344CBED40224644
F4BA8AECF2933CFAD5F041561B6E99B21777D46CE9212C1F00409F1184AE358D
6F5C5432DBA9D9E35DC2345A102333C67F1ADE0BF892F79B30340EAD85358FEB
021DF2C59722F53286DDB254A6DB1E5706DDC1694B10366FD9AB35CEFAE60FC9
7C6B9EF843CD60CE8C6A8EA362D28850ACB783E4227EFEF7F632A2402B20E1C0
AFDBD8277B11607975CC29FBB8D7229DA29624B70E814F626AC6C1937BCECA23
9F907EC7A8EC3A02D7040923B21A62F245D9E49B3A42967A84A2B04CC19B94A5
6D2DD0BCEB9F5002AE1230C4BC5F76AD2134CC4DDB0863CD18C93DCAAE5B6CEB
2B2A3C2A5085BB0E87DFD0B90AC2C351BA6EBB99DCDE2D95074091ABC9CC2542
CD6C109DBCB5C3134C59FAE8DB8EFA707B43D3EBA7D9183C5C6E2B24FF0F2D9C
F2B5EECBF408B54C3E0E0F292CC210EDE8F060F63EFE2FC361E1EA453299493D
312C76192227B941A1B3C5FD5763CC275434AED1CD23DDF4C4304586CF70217D
B6C8F2F209C4EF07C1FDF20A19AADB222DE680131F1A03E44B2FE08BCBE67CB6
18261D2629A0BF33B8D7689449C6D974A97D5AEA4652625C005977FC252CC996
F7AD55497B8FC451BCDB48DC414AE5293A605A5A4C527243E99F2D426A73BD08
77FB0707FD0CFB80D2FCF9F3F3A7A5FBADAB4FCA85D1E0E9149E638845279D79
C1B5243275263E4EB261F6718E3F503B5CC7854330D0C2D9FCFCCE59FF198E73
60BB6B879F181917D92AA6370CEF974A6F2066C49523AB4124DC8E4769FE4510
9090A5B591174692B55138F509EFC2864447914DF3ED2C719753BB1EED9C435C
9A480B725F50C0CC1C0B40C04D1680D51033154CDEFAC563B42523EFE5142D55
24B8229FED115DC70A9B60E94FFE1B985F869B5ED92BF513ADD2A34677D5EEDE
8D2A7823964AC08E3D7F0D04A17C5233C2CBC92DD03C1A882AEA6B71A0E91D39
A856F11BE21F316D94ECBCAD9BD77552C4EB2E24242C086E4EA35EA092DF7815
ED4F2F33633BA3A8571D54EDA7D7E39BFCCB87122F41D6F72A7579AEF62A1197
54DAEB4C88C6F6D2CA046B557000AEE5E00C06300A30CD7AB167F8259FCEC503
AC5A3F9D962D87D11B33CD5242B5037208B1CBC9EBF18103447074EABCE14AF7
23F47C6B168CB7269CC802B14545C8448B5C20549A60253F6EB8ACC485B94BC0
2933B8C3977CE08FF70A49868C6E6828362D6B0DC62FCECBD07189491F2E775A
0495EC336F3C1D9A1E59A95F78FB1586CAA81FEA580A1478BCA357B775F889B9
CE9C940FCCC0AEB79888AF725FDD448CDF0F93E4251EE82AFF5518CA6552F1E2
67B9D8B999D9C6FCE1A0E970036618920F2767C8107B34C9599D05229EA734F3
0CACBBAACE4CB46D33F7C5693AA1E7439E164C9917034FFD7D8035CC8D6A6697
B991B77215DAF2128AA192C25517C108B57320F745448DD51F67EE0B1AE2D30E
77F33E7412101CF3D43E18F8AC96397D2098E320E702623BC550ED580FCED5E8
56E201E888148FD13E5C50156C4396A0BE02CB815DAFEC717882611322EE7BB5
FBCFE8F5D07B521E633CAE4BDF60C685784E82F71128C8342292E97CC1DA26CA
C3FCFFE7172C43FE1F2239481B4CF2CFE510B3DA87082208A9BCC1A6D5250933
CAFB1CF9BB615C787800A5CFD3E46C91AD6B133CD24712A45F0183943B017645
27624018E49E1E1E69999B7D6D97263AFEF2F393F214E1FE3AC9706FC603E704
31F6CED04F3A8C0B3B69EE8E32552AAF0725E827350C3BAC24D321072172A26D
0D8B416DD36D773B81B30EA0FFD4D16AFFCDDF2F0D1973AD7BF3CF5B4CC2E2AD
193F4267388BC9BEA7BC07D3E97FFC9E66DE917ADDAE9DA196D8C824E9AC1BC9
5FCFCB8CA0FDE70916F28C946B04CAF56AE8A01587FE3544CBA47F93F0201678
4488754D3B1FA9C64BE79F450CC13C83FCE5547874AD2E0F53322EEE450FCDD7
E26609F58395A70F1B1D534C2E55FCCC63B159EB8C3458B69664BDA407BFAA6F
D142DA641DCB36D8C4F81292CAB0DB0F3D315214C42F7D6D45D54C3D6938FD62
9F16BACAA2CF8EFC5D14F1A1BC360DFDEB9BE81630C673E43CBF393C75FA91BF
87EF9C4D65FB49811A35231494D291C6F3D21FBBAAD0C226101662C75E7FBD52
C72DFEABAF369810B74671529714E61FCD8B88ADA8AB8A2D91B70CDB6BD2CD39
23DAFD7F686AF9FEF2CE96725F983CC01156E9C527420C59205A0161A72941B8
7B793928BA3DB39B09143BC359CA01849BD312172484A96877709ABB83A3DBBF
533EDF379026BC2A179C3F6B63AC798A3890D987B503C384E548E87ABF1D2D04
BFE759A4C6754F6487EE04AC7B055094E9271C3E421D4988F15BB23ECFB90516
E65128796E46CB0AF41F57EA415308D1907E4CA0AFB65A0F775E028A31F7CAB5
E80C2FBFC8F75E596CC80B4996040AEAB2967D5D5500A4375B4BB1F576928A84
6B6E36C19942528928EDF6C5117D673C96F240A7A4C25C3C324DA48070618FEE
A18613D4EEC6EAF95EB25090CDB87E2182EB80D8FDACB47960C22D33E5E2C360
DA0DD7E497112F6027A8C2CE72029D4325A8F7F184511D53682BB3519205D57B
695F14CF6B2AF55EC207C310E7B804E5FDD8C8713B1E2696726C88444C4A6927
BB90817267DA513F356FC40CD8EC22C45CFD577B292BA309CD9179A965484CFC
50DBBBC66E68C775838CEC645F17289EB252D3D91C46E2DC6D152EBB70EE8469
FA6A8F62C949A4A723CB17217DD48D07379CFD0466C53D3E8A661E529C04BD1E
E74577203E5CA225E5C0E7D728CAFCB4504B5843A969D6FBBD8CA17327C5C331
4BB8B8E6121EEB51000D67E479244837961C77A8981DF709795FC5276B56E128
8621C12EFFE5CEB8C1916093D111F7304E764EE26758BA750BD1757A4AC10E9F
E347D984E5586E92CF119514DF3F1540298C7D69AFB40DE770F60BA3212FB19A
98B2A8AE89651758ED2B65133A3DC7FE788A443D02852E6C2FC780520586DDE5
3E11FF89D4616DBA38D4F74A005B76CFD9A0489BCB11A79F79D260F1C8245D29
CB6A14CC79F11ABBF07D31D7AE561EA78C8C5C39A794A1390BF355735D190F17
E7A8618E286DD678A2102905B8CCB2F6B7B7F43E838A1D93D959FE208BE25DDE
4529450E1E32BC49D87043C4686B227FFAEC9C78C3B651B513DC9EBEFFDE6E52
897B26EFBF8E35785CCA7AD223B026A633AA78498DC991E307CDA8AAD0AC9380
4896139C643FC2517A66DC93A8C848688390AD9E1C6281A3B8523A0C785BDDFD
1A8C60740A2ADC0ECC0EE8678AC286F60BF1AA7494757B641E8F4A5826DDD98C
1705C0313797A2C620D72FE1451C0006E98FF7F5C5F3BE0384696297085118BF
8300E8B9ED080FF948FC9A6EC9513C2842F7C70A0E169E2A544F9D00D70D4F24
3943EDBCB3622DEA688C3641117A32704993FC9A45ADA7FF7498CB1910FB3661
D8B5F4D9DC0CAA3CA37E6036AB8131D57510D80A9263B57D012F5BFCE34DB39D
8690F6969216B4E98D3FC4381EB2F3A49BCCDC59B82CC534F0D9E4255605AFCB
9AA4030E2A84AD8F9A0D5A83B709E71BCA99D6F1CDB9629A93FDC1A9327292CF
3264350D354A75B08D86BE2B0CBD4B74B7659E2C4DEE7D88F92849EFE0780FF6
958FF3FCA1F198634A9D0D18AD474AC4C4B98E42842077CAD5D91F5FDC8E338A
D950C4FC1759DD835792A5E833E47A60293FC77CFDE05A5FFCBE544F4B1C24D7
9D715B6E9E72E787D97600BBF26852029F35444AF79F7B91ADE618DDA3FACDBA
13D7BC188DA29CB40718C340A7ED0345400570236E627895DEECB32E5B0E3471
4636AF178AE80D825CE04816411FBCF4921E7D82A3460EC8F7ED926CE0A42C8F
128C06A23519BEF2C84A36B921C2832744062043A10D02A8EF9118F807F33382
3E91C0CDC8B98DD1F7FA68D7DC236A8FE58A96452C3B74BDE9537FA3832DEFDC
307A20A5C00E4239600CCB6F9F20CB17C92CA1D5572E627B6BBC493AE424DBB7
8F3A5C8D96B13A39D90CCD4EFEC775B13B6EBEA1DAA33DDAB7803869718BD527
D72A23AE80C7C88535E25973F80D8C9939A61CEBB09430690CC89CF7F3002E1B
EC4D3D1CE6A3AE5B700141C97B533E95703338384FB2613B4160DE2419AB0218
04F9770DF883F690685D793C0A4E6D899A2A1991DC659D832692AA3C9BB9DD82
E36E743507C462E0E6670AF7E8F0398C396F38E0BB67CD0D57D36E84EE3F6A8E
B6105EC250352F91BC6E3FDB1DE21AE6364258F5A5EF845A91776572A0B906CD
7D2391D929BFCF29E28E35D3DAB1BB2C9BF543BA9957A4253AC2DA7289C873E4
6D5BFA7E6DB2C7FFFBAADA7E9DBEC548D2C42A9F82407E080216C299C9E343D9
042F5DE001230048591AC64C6CE5E58F30FC5606CDFA9860EE06AB54B83AD419
FA8307544529B3EF35F55F257378178118112FC86E9B5CF75CDB67C83BB8AA22
E69558DC59D27B9CC238CF9B70D806C062B6CBE4F768EDCC44A84D847AD995C0
390EC9C68ED29B8FFAFC68782FA481F6254C8F896B7A9634C3CC60A90694B9F6
05907079D37CEEFFCDCA8522D2593F753852A53D468179AC6B01598EFFE885FA
9D6FF0A935278B37BF4DCEEC5FF06DFDCB7F027FA3B7D083EC058B32F78448CE
A601476A8C2C0B95DE2830AB16310C72345FE927E044B967A5D5D9909A1AFCD6
3F8EA2A7E25B5868FFFF9FB02F7FEB4B5E9C840D70AF5273E84E828E1682C1E3
E666D4A61FF4C2350073A130BF2707F74AEC051E4D6D1A9414AC8ED4D851B3A6
99C1243E78DCAE0D99F291317F169AA47E255F85E66F87AC92B395A0F3FF28AA
7B66577449B26645A6CC87A85BAD8F8A3A4289A84E046FA3A092A0685F664AFA
C1ACCF240FC9E046714D32E7AA9DA5C96668D3F532799FEE3A61C2267A89B7B9
E61965EDF3806A341029195F82D0C765C41FE7C6E47DA3755DBB0A2715E64FFE
443A980A38968FF9B81549E39836AB386DA0C95650D17A28902D6326D151905B
B8364C968E0310928829B08D73013D0A482AFD2B5DCAFDA79E65E6F44B5A2660
160BC64A3A9887432961F7D4CA79A3ABEE51623503B93D69AAEF0E069A6ABF8D
F646689717C540DBA9FF37C6774401293E9F33E1A8B2631FA0D99624225C1CA5
93AD61A7C9ADB5BE9234980C3B11FD84CCB31B150B10C2C1D62F31A01E1383BA
6D010AF7827F855104B85695CDAA92DFA3358817A7BFE8187A139EB996DE9881
2DC54E06DD0D8839D886A50F0733AB3264B5A235787A0BFF5FFE25BB1C3CBB5A
9837BB30282688137CD087EACD0DD36E24E2A21A0F362EF39108819896A0F39C
2966427BC7097FFC0059F71D4AE1D15B9C88650DD40E23F76405582A41310B48
5B11969F89225B14A3EBA6117797D246684C2EED17FC6B4C17155A6EFBD3
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMSY7
%!PS-AdobeFont-1.0: CMSY7 003.002
%%Title: CMSY7
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSY7.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSY7 known{/CMSY7 findfont dup/UniqueID known{dup
/UniqueID get 5096648 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSY7 def
/FontBBox {-15 -951 1251 782 }readonly def
/UniqueID 5096648 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSY7.) readonly def
/FullName (CMSY7) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 13 /circlecopyrt put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C29547000FCC8A4D9DAFF1B3EA76067
C5493B69F73B89C8B61804A34FCEC826343337CCDFFCE17BF343EA8034BF95AA
14C56862C2C052569AFB236E1F1795F05150C8F28DFEF6BF4BCBACB678D00036
30EE84FEB44B1A8438185EB45654E6853C1159B073E54292D135F0961A64E8A5
AAE49C4BA9C44156C123426212120F99F3E8B7425752A5FE384AAEF755A8464B
51F015F9E2967477D57B22627D75CEF8AAAF0AEBD504EB46D0289DFC8D86C972
F042BD88A90A53613DD93D8A7A8460E63D85F6C15C000C0AAEE4BD5130B6E668
8C9B3F3FFD804745DA1D5EC0AB85C96E1724FA67F9324C59275415182AB48D57
9722DCF602396AD4B5C075A5A89A5D005C9FE11273E5FBDDD1800F11BBDF6AEC
6711C5633A73AC5DF038BA521AC492E138F7FFC7C5438FFD32FEAA1128C66E83
0D3AA40665F05E62D7EF00B1B0596162C402A34B6BAE6300D43F3DFCC84860F5
C0F0F1CE28FC60642BBFE9BC9102E80146774CDC88F9C250DE762D24A3484BCD
1D26B6D9FE981CA5AAB2A4BEDC528115043DC18D7105735D7528C2C5DD89A812
75B5D7B2E5A586FBB0C061E708F92C1552F64A296490BD0F20243986A4707FF9
8AB3C917B8DB92F19DCA6B9D4A1DB57515E51DD85D5C9D2CAF7A036AA3F9E9B1
5B5E099CC05A9126AB274C17D75CB4FAF78052366D2F21EDAADF84B22A2D645A
3E65C4BC0F540B5D9609D88DD0E4CBEEF87C16447D43A5F98528FD45ADD10DE6
41AEC411FD6929308F0E4F48A8D9C9EE386E920D41C1CC98A52073011DF5BD28
5683F280B5CF7F27DC50930C81D344FF5A8A9258A207D2531AC21A735B14155B
C22C752DD22AA33C52D6D4D053B3E46FD4C9129068DFF52695A3A9184D04E8EC
93696A3FEC3AEB3814D9015EC14C22EC3ABD5070E8C28A3B42F5596D948212B4
AFB9978A0A361135C9E18CBDC98E0D1E8BDC17E25DDB3D52E86127E5AAECC55D
FEE61693190E378978EF1BBD4D1AF005D511C7607CCFA4BCBD3EC427CAD82809
B725B25AE8A03EE88F80A7732A571A2317E0B6A0D072EE8CE2EB9E033CDCC899
B64CF4FA1C708A885442062F08D3D8DAF44C066EE278714D1486EB709D327865
A483F62709E89D08291F044325208EBA758DD459481334F5D9AE3BB61B3020F2
A4538CFC2C94BE84C920BE80806FDCEE394230730E049333A7E16509207514FD
695B5E0AEA9E4A9737311AA0B33B15F6769FF865D1ACB63DC6201C3F1062A3FD
1B446C1857460745917A36289DD57C94FE6240F4A40FBDFC10E91B91B79029D9
9F1B9C74E8E5AA011A0ECBEC660230AD5929F01D0325D15FDC0040406F124021
02AE176F4C98BAC1706F03C2B5B40F325A50CA4683B2BB4605E68E72D0CBDC2D
96B3BBCDD01201B650A7E7744D58D1E36D81FBF72E0A875FF29B4C109A1950FC
9621B18D58806392EEE9841794DFD39E3C4E20D45384FE07F9D445F143B922D1
AB350AA6DFC51FCF767B141A392D6A8B633AACBCEC9F56A0CF40AB08020EE63E
08CC0BE01B40E86388A65F5869F2F4D022DD4B912031CB8CEDEDFC2473772569
5B28F66AB74CD7902A0061AA3547D13C7F0C6EEEA7B0BD316694A94E4D672520
EA044AB28D8D01076C486CE456EDA1811F7ACA75D27473080D27D3E681E35FC6
447046120C6CC4C17674F0F051570A79DCA74848F3F300B58B19018430D99858
CA5504084D6BB74CFDB635B6866974A9AF05DF201C69352B2663B0623E7828B9
5EC5FFA8D8F10A7C28000F8C679B180067D5481D6315BF1C4194EB171C8F3CE2
4CE319975B9E948D907F9F7EEAF07089844391555F329E331D52FF114668B8A4
80704B3C6AC0CCAA2F5D043CE44E65EDA89A0CA854CFDCB11D549B7FA72EDB90
D35353C34A771B1FAF96F83FCA5258AAB65384BAFFCE448690C1432A1F749C20
5817205185F973FA098BA856584753E75EBEBF387FC155202885F5B67117DD7E
70D1CD887183C5573B6FB607D4F6CC9F8B94B09B3F3AEC2EF1E6A320CF6D0112
63046321941D1FB3F2140B59370AA9387E24D579D389A166A10C989497FE9549
34E1AC2E546CC06C5308460DBEF3E1AEEB6CBB0FFDAC458E61DE3391480CF5CD
34A647D4DE15B81131B7D1F9EED4C6837A32E89B0EAAD6A05F5F67518655E5DB
224D4833CEC60D5DBBDB8A03FB1A9730589BB4F0FF56191D17E73B9562E0C356
B188882B36F9505F6F42EB2644FEE125C2A7D12227ABC8ADB924E88B0A9E8DC2
79762523B0B88DBBE6AC7968A46BD9E9F0C3F03F5F64724CA07782195F01F130
30DBE895C212E0EE20162D863F46A674D85232FA0DEE69A8DF019794AF6873AD
9CC2A5EEEF9393313CA519BF95C08ADF7A75B6F53EDCDC39851D20E58B97CA57
A7523717AA1821DEA94C8A9F8B82346B16D92D15AEDC16F0011A45A44B09DE47
08CBA46E8511D0C5CC83F952EEFA4ACFA7F3D7FA5E113EF6B70E5ABA6F1AD3B1
E4D3B15AC6D5C3BC70A3946F411A7D965D6FA9D7B6C6ECE19B2C29A2FF476251
EBF0CF3BF658A1D896323706172746F58B2DE49F8B7E431E20304A42694CCF73
11C4E9E96260CC442E2938A1E27EE6744C7CAB01634C8210CE40488B9CBD757C
4277B5E3E43C7560291D945F9128AF1F85924003418F96458ADDC5BB8EC431D5
AC9093D20DEA69B92454613BC1A82DAD4FBF8E56084494D9D2FFABD82A7C9847
171FE36B265B546F3072B0923840E6C6BB12CA53E05A99F0E8FD4F5109782746
7CAB9B35B68050230736AE624B7862D1244C7D9BE4D1CAAE21B123D1E8372377
F1FEF269A9A2EDF02CE0CC8BF92FD7EF09556987B8A3BF6D8C0A663DB6B9742B
E9AC61A449106AF1EA7ACAD40AC6F59427CC51865E6A90CF2AEED8D6037BA70E
4ADDAF622CDE877C98C3B2006B4721FC9BA18E30F0752BD4ACE36221F5CD1497
8FEDA5D643BE2EE007970A68E53D85975116E6CC09F0039A09EBAF0CA4B0EED6
A485CC0B69E526033FD1C1190BC5686739CE13D1AE8EBCABC01FCFF26141867C
44ED291196E546369129B9F759FDD7DC21BAF0A528FC34BA9FA8937813953644
C539F9DA4E55E83DB3D6DA309C562DA1330B157957B18F7618544AB738E25F16
F0517CD13C1F11BB8EA056BDC575D77CDC526EF497639DD89C2098660C5C45B2
D7CF715AC5E76847E0D3178360DAC1BAF6ACAEE72453B845B9F86621C166857B
029CEF5AFE29D1EDB4CA3AD7D008B7550A779E0066D7312DD6C7AFE1C0BFFF25
7B062B0DF30032EA2A2FE3CC46C96A3A0BA1888D1D2B05424A59ABE3EE928ED8
B67F507EFA78AE128F58B54634C7F534B3D0F4AFC23E38FB56EB39CFA425FD37
848545EAD03EDC5A9E796CEFB345F527615C785963F536972EBD9CFC4A6A4A07
5A31A508CA147FBB762ADD198CE36DF86730FCE2B643D1E7DF0BDE800DE7AF89
44A36B04193E44231E08919EE91A8B559646DC4DFAFF0AD891890A0A88FFA8EF
B066BCB7AFCA409C51889E7FEB33F19A3CB1268BD0EA74AF29C1401BABD16F87
ACF7DD65A8513DA9995C5092C36A774BC4260113360D29AF7ADF5D22B5B58E7E
A9BEFC33B9A91D2C397B27A81087376CB623318A8362C3FA9CBE3026675723C2
E711910DDB328E0EE3FCE219F44FE528B70E58B8E6CDB4AAB48237DD933D9639
E9D4F9EADAA8D46537D964D75C27F210B0C2473CB60D65F61BBD91ADE01576BF
77C49E31936138B0FBA066BE910DE1B1F0E4FFB5E81038E8656ABFF08DFD923E
6BA2AFEDCE6998BBF7045393C34811501586A4846E5B942C8E99D4C481D3AE60
2796ADBB5242D59F1116EBB828014BD903EF58B223DFD18BFBAAE4D348876B06
CAC10B7AF0DC270E6702A3F75D4DCEF872F2CDB9470AC9A1DC1ABCB55636D26F
9CB6BF27A0DAEB1F62AFEC12F55F78C9B59AC6DA9DB4B45444B0C582DB4DB8A4
B31EF4AFB77988E92FC0B257374B4408406490D9AFCC495316D6C08BEC9A76C7
12371E14417711EF802FB7151B3F6A2580C97527C9C3A0FAAB8D62FD992AA18F
EBEB36F7910186CD5F70A55DFE932757C299D9D2289796769A00A0C6ABD18F82
E0D4E95D6477E67B4C012DBBD098FE20E2F15C412DD2AD5471A65EACE05B3A1A
0C9C430BAEF4887F2CCE668116B87FFD9DAB4B9B3605CD26E6B12488058AFA30
8843791A95BB322DF5C47387F3EC72343855D6B23D72144EB5EB5157B8B238FD
6C71DDDA64C9539F66A7DD569FFF43DBE4A8F0608A3CBD354DD9BAB5E3C756DD
92C3C1B3E169D86A2230299432488BC04A87E08A80809F9968676DF9157B1C91
27C664ABCCBA9997FAD8966F766B325086899D1FE44581FE07C97688B3E15B0C
234A22646C32BB965B9BFD2CD34854D1488AAF021E169BF9CA9665CF040E25A8
16156C80A2F47397CD370AAEDA731E0D14FBEE1E51A17DB972D96DBCCE33F937
5CDBF1A650BF1D3536BA4CB7A1CACFD5CB457E2368A660A62AC26E64A631B2BA
6B08EBE42E02D9B1B2E95BF9F0A6B59C96A122968FD46A4D17BA3D018CCBA0F9
80BA3C1E6C683111AFF79303CF64F1D2CCBD7571C6E09DD9B27B8E101BE219F0
E075880A0E367885AC94143E777DAE455B990383100EADF786300602C2CE28F2
4F44662FDF03BD39A5181912D8F1243C36FF88882CFC4B34C1D4EBBC01D96A7D
9CE5303042D1B21042E4FEAA455F22A01333FCAD7E4AACA5D3A5386331985F6B
9B247EC6310BB07507321BEF3E4ECFC3B915AAA6E029B3999644C987640863B0
5DCF58CE479497AFAD1208FEFD1796E74467E9F7867C313A3412E6923F4C9144
C69EFA17965056DF043DB465BF2F1E191706D3AAB47E6AD5C9767E4A73B29F2D
E2E579D0262237568F82B360ADB6D0219B7535EFD02DD0688CDD23D84FC4F308
5D2D0010B1A9F4F0321A00C154672D21708B66B91ADCF98BAC7A2F94848E9A4E
86CC82EDD0399BD9F13E43359E71F80086B9B0C3B6D08831D4479ED83E7892C4
90C477BD1F06DFEBBF60F26516EECDEFE4787EEA8683754F2B257D0BAA607DBA
35EC6D1618C2FDF3881827F92D793ECF152D761F2423A96210F582DC9B90120F
26A33025414716A5E6F56D712E31BABE5047EC4855B767AC63D793995C9E074B
6E35C7E5255FBF4C3F17E7AD7B2A6C5F7459794FC94306B581536910F244BF5A
3158E821CE75F4B0565EBE985DF24DAA92F9C1D848EEC6B88E21FB6C51125872
1752F7352291960E5BD36F78AABBCF6DAA4D07AF56E4B6058AAB13D41BCDAA14
C0D63C6807FCD0E2B4B9CC892F224843173A75DC53A8F0FA396959C2E2CFE3F5
9B1C8B62797F34E7A0BFCF0787C73FEF98442234A617CF161829498035D30B29
ADFEAABD0B496E8A2E764D22DB7737F950FC5982F1C5F4FD414C1B0202F40FBA
62C81B8F0E836CD73D79366FD62388B437B81FC673442EE34BF27454F72A08F3
389E60CE28A050601A42FB4491C60DC02EC008E6B9DD2495522BBEC7293E2923
120584E88412DA7137397B41A28706B1CC6BB0C80709A2A4BA79822D245757A4
3EE454198942ED2316FAEB981F7615E642167620EBDDC5B271E273216EB119C6
4F2F0412F0BA6E3BA396217597575C6739194E1F839232FF088FDDFD3695A5CB
9A0E220389938596D8BDB183138E1F73F64512E4FAB5E1328F9B42364E3113B8
004BE2CA0B074EE271BBE0260D31CE555D535C16EBB528747EBAFFF253E659DA
3A377CBE0B296276AACF0294CF90FDAADB4EAD5E2F600E5B2A018DEFB86FF61C
84296480A425687CCE37D671472537E897AFD4B8C6A6175E1ADDF9AD24DFC5C3
A73E18AC2D9B28BDA2F17D51DB3521945850DAF0EE48B0FAC271544C1B4F3B2D
53BFC8DE32BA366FB1FEC0DD6C0B1FEA374CBE2B96F5B235A1D83A240DB442C7
1460980A3E5B96AE3D5784DE2C2DFFA671E0A856DB2FF4130E5905F3D5338856
C11A468D867D0C6EC585F1AD3E7164B8598BB59973B9A952FAE819F052A6554D
EDC342BCCB0525905D1D27ECB9EE43847B69AE116F494CB2DBBAFB2773F1A3E1
C75FBDF8D66FA5AB4005757D631A0D9424FCDA91A1D2AC6FCE7CC7A23E84C65B
3E92BC684F23467DCF8521E0E27CF1441C487EC6E3BCA0AB54BB137E83776009
833D772FD225E88A8BD992FD69819B3BA90BAAD1DDF16E4326190CC4BF9C30F2
AF7CA1FB38E6387D9745FC5E176B248B1581BF7A4CA2FCA8E423DF340EAE29AA
7E07A25FF838F67378F9A6A9A0B404E01E86E64FEF71DD3D540D4711AEB1974D
E2E0D485DAFFC74BA6B8E9AFDA245BC8997BB39BB6BD52B496A09C68F7A8E900
8DB3007643416040FCEC85B407EA0A946827771FBBEE49A3DA5542CC5173A31A
0280AB8E922C23C1BDD88D70627EF124633C318E7C9ACBC14AE216BFD41C0B6B
3A0161757913CA1F7B6626963C09936A52E73DD9B3D86DEEE73C0293A646FCF1
21D4C33DFF1671DA7A53E77E20233EDE51571549AACB7968602CD03EE67ACACA
B231661CA9DA2BEC5795A83DFAF675E9B052C8BDD51490F7874C91EF5ED2E0A6
BE9CBABB98A950F7E55DDA3823036437C11F614E27DA5BB8BC6D955FFE54B825
0201275C2C49A3908BEF1DB3D87792DDFFED23DE7FD9CFC284F6255C77E54A39
C2FDBCD28F2938E4CC135829AC1867CAA5705674062C9639FEEFBE49D6108091
7C58585B80464F7E69966D7933C7019BF336B88B9E0E7073A85EAF297B71B303
31EEE9121347A482D28CCE942AF53E94F88A97EF2F1860A92CE29A14495D67B7
D37E207D42F3891E0423F5BCFFCAAC057FEC683696ED6FEEFA65C8FB6F1312C5
24A1130192B4179F3B08DA1C951D988894E7FE7CFC28C56992A1CA82BF8BDBDA
E021F16E630FF67201BA4DF5F3F4D6AA65B8347FC1575C142C6C1868E8472BD2
CF191137AE1B36F32FD84DCAD50644AD55EBA2694C93BDF984A5C9E7C92B73A0
26769F00831537266FD2E711AB3F8AFC5F3FDA3C9E6439FFC48C3D1B5527FC56
1FEDE991E66E8465C0E395EAD0A22A2FDC001E449AB9C5E0EF187A1DE9B74696
BEB6A525DBF3A60DA2FBF1579150DEE1C5D1B6F55FF2708CE23289803CE123BD
C81E25DB96551A13AD713D5C7BFDD3F2E1D5C12463A195442B51909CC1724E50
A1F6F4EADB3B7355908F36F88521F333C4E7C70B094209D1F883B961DFAC32BC
8C5A2CAF77CA5E6AAB714CC0AF2B42FFF6F73301FC71AFFA9B33A2153F55C2DB
C1C111874DEC37CB746BEC9A3A9A37A2DD098CE7C66B0FE38460ACD77A47D53C
1550F857FFB733B5A8D02FB56790A09190B29CCB4F4A3058B1C82F0CC5E1B2EB
2F8E06F2DE531E1EB81326A8EF0F82843A4AC59D267EEE45730895752820BA93
A129C22A78C1AB28BCF67AD5DF372FECC9EE6719A02E499FD5CA866688E86089
7EE8E5912087E0C4588DE38428114785E0CFEDB1E2EE24CC067D107DFDF1E2BD
B1C4F9C6B740F3DEA0BD315581004E851ED5A9F66C4F9E95DE97D355DB06F482
A43B565F1255A85710B15A281E2F034B1C23FEE6CDF3A043780CB6AB18A016F1
9EAFE545CA5A5B5AAE2459D69D2151E99D029FB5C1649B9DA784BFDF7D177385
4D8B16B9922D149FFF6B4F99311D52BEC9A9FC098E7192180DBB38767DA9B9C6
E8CFC98615219EF3AD4A8157D14C72BA3F91C8B78381383E0BCA1A5319749E08
D67D1208C693A6640D1BD6B9285AC0D3110CBF8F7747AD12585141C3248D0BB5
BDE892F91A4B3291F21F30294693518E4629A3ADD7C8640E424FF615602C603E
1E14DCB3B17D34C090BEAD2A523E260A599522329B698729A635CFB15BE7E79E
6A34DAC7C3ED57340821A4E7A0C7F88F64BAA69BB80DFA8B659F4756878E3044
E1DB7EE4FE60074AF97818B3D36CF51110191B4E10655F52CC5D11F56517CFF9
04BA2676F4147DC8192C98C555B00F6C8614D23084A0A70E5D9D0DCD118ABC5B
96912E91FA3F6A8B9A7B83BBB1BD9C2044B5335493C1B74A8C85971E454FE379
C971CC567A316AA11D6745C6489340A939E49D3E402213EFD8AE74ED4DECD30B
3395BAD7D65DCAB84EF2B2BD6E178687EC870720A395B69F7F7EDCF23C703F76
42509CF6CFDF972BBF78431564286903743B208817297B75D9F46F272A3F78C8
9D302D05377EEF4C4109087264467E3E76615D94ECA5E9F4D1C6F05BF19C11DD
D76D595AB0A57E455857E8B1EB46CE0DE84F08D145CDBF6154E83A1CC3EA7E36
D05BDE406BC36D8B66DC0E03E487
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: NimbusSanL-Regu
%!PS-AdobeFont-1.0: NimbusSanL-Regu 1.05a
%%Title: NimbusSanL-Regu
%%CreationDate: Thu Mar 20 10:08:51 2003
%%Creator: Primoz Peterlin
%%DocumentSuppliedResources: font NimbusSanL-Regu
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% Generated by PfaEdit 1.0 (http://pfaedit.sf.net/)
%%EndComments
FontDirectory/NimbusSanL-Regu known{/NimbusSanL-Regu findfont dup/UniqueID known{dup
/UniqueID get 5020902 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /NimbusSanL-Regu def
/FontBBox [-174 -285 1001 953 ]readonly def
/UniqueID 5020902 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (1.05a) readonly def
/Notice (Copyright \050URW\051++,Copyright 1999 by \050URW\051++ Design & Development) readonly def
/FullName (Nimbus Sans L Regular) readonly def
/FamilyName (Nimbus Sans L) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -151 def
/UnderlineThickness 50 def
end readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE33C33655F6FF751F340A8D6C01E3
2E02C24E186BA91B34A1F538959D4450CB683EAE5B034D030186901B458D3777
6B3942BD2E07121385120248891AEC2EB33C4E3A0CF00828D0F130C31A918C18
979FE94379C648EF21ABF659253E43CD1253866F157F1DF85AE7E8714F061B1E
ABA3AD094FE8D6293916FA82EE4F486C7E513A06D4C9BE44306A8287970B4ABF
B6D1F9274A5A0BB6ECF713ADBD1260D5D6C4420D357FD486470A74B2F0621B59
A9373ABECDBF32FA68AABB66FAB0C970A3354A335D70DB2CC5A3208BB6D768E7
B58CD9BC2B6B7E110693C5A88D680B7290DB121996E3B7C8AE3C23147280F8BF
D8C60B415552700FF0E44C2257B467ADD5D550F61EC34A76143393E0B34D55C0
8B64B48E5F1FD16E16B967511AE15434B7F755BDF2574191E3C3DC528B69B5BA
7DDBBD3C7878FA69ADE75011A2C0F02F5707E86FA632D1269281D3C265B31F3B
F3145052467647AFE18B9D763FAEE4BA72CB9C385568EE5BBF5854C278F1E3CC
475C6234E83ED33345268BE52F0931B58F302EDA0D5751348E7B7E53D4882FB6
9343BDAAE87E48F6E82024D8EC1FACBBA36582092CCD76553B0449A5090774EA
7242123C53B80F2E927B98DF2B36C403D1FA1E9F8439F3964DC9F89A0CAB5AE2
C907309460F097AA87BD156575D6C73EDB2B40C015E67734397ED14395C43394
7A0201C6B0F652B035FD7BB82ED236D0F7C20048AFD83A56925C7A2898B46270
B440913E4714FD89697B3E59F5BDD5A2AACF6630257957ABE1A63502A3081B6E
307A534A9E238F986D4C866AFBAB7A0B1B5A6E99AA0A56DC1FD7E8A39CC45147
259AC7033A0C58192CA82FB12E09F309F75690043646193AD92D2368F345771F
01CFD21236BA52F74E36CF4B94259CDBA2EF1D61AD93A2B942A9896B0819D20C
59E440851CB99E89C887FC62FD9E7F88F54E5BC157D81A5FBC70699820C51BC6
27D7755B195C0BAD8225A6F3EAE0A5A674E8AF6B11BCC69DCF5FB89D8BE0E2E5
FE7E2588F93F583E4E2F6ED5457E90B902B02F51D54B9F0BA54291E687F4A7A2
08CA5FCE0C9F3B954247312EDA3C532D3DCDFDCB56FFE03B36DB7D549D4203C6
7DA8772A2F732A15DE675D3212C28DC755E3D0156A777BF514112ABBE4372ACB
97D7834813E1850F90CEE543B4C09BE1E93742EA98B8CACC09FCC4D2595EECD4
46C942EEA60211FA7DBC11CE869D55BF0C7EC6AA747EB2AE2CB3CC2DBEC936C9
540CE2E08291323B36F6549CDB97BBF9F0DA429CA9C863B629410885540DA6C4
9AAADB30C39051C993CB547BCD573D6448DC09BF7FF2D1B108ABEC2AAEE4060D
182ABDB3100AC627E5C883E8F42D90D699C8028D4123472F211C8FBB744D7E3D
C626ED03D8517D69E1ACD26BE4F83FAE31122294816736827D138E4F4CAB1681
236C1654E01231EA7F08AD0E73BBE1BE19A7AD6DA63AE0C7F5A360A53BB35268
CC90125C7545D9D59F5127F0AD964AA66DF020F639832FAF9C2CCA82C01120BA
6469960C350D3AF786666EC14158728E0BA2DD8A639C28E0A7EA8BBF608FD7DF
79C7B5DDEA05C8C3D6FC70177D1A9EA9AD056F0CE31AB535A22FF7EB33748071
6B28CA5465E87196191BE975E7C827B443B92E15342609FB93598571C63AE16F
CB7CCF15B8921F38FDB6F24403EBD6D6BB66AB49962AD578E93B235E6180B4FD
4920794B3F976477A04AD21728815D3185C74C8A1DF224DD3EE5110C18BF691A
987AEFB1DA55E4EF631C48E3B2431BF959A66D710C206B8AE5E988B7929BEFDB
CAA93FCD07341EAB622A755FF5608562153DD6A09E462ADBE677E6F550F93921
299E8A99B0B72E990A1D84831236FB6E9D0A187FD36BFA9D85C9CB0414FA7B15
EC02E8C08C8A4F71226A952C5164E68A44344BC4E6810FAD9BFD3532A9A515AC
5D6B5F8B5A1402C2C4DC011B043066ED02AF0030ED0D0769FFA19112C97076BF
F950438DC37B172FADA65DBF0C00EBA9A358B189F80CAB3A55341E4AB391F7C7
C03F47494A607BAF90BBFE31BE2A5E1FBDB07D5BCEE30EC3FE52FF996A595DB1
2AECFA9F05D26DCBE562B2A1AA7A2EB7727816C25E40F84CD33FAD87D5051181
315AEF884EABB76C5B134E7E0185E7D59A2DA456CEDC82C054F197229990E895
ABB45C025940C558D4C98C6764B00D6917766CABAAEE890025CF7C0B1A6BD5BF
1F8E62D380C7849CDF06492BEC78C972A98026CDDF2A30625A96D549BC5441D7
447FA16D4EE9D8C8E841269B1D361F0D9EA02154A8F563979FA89334075CB13E
CAFA59D893763EBCE2B810B880C9135064B104573E9606ABA81A5F36CC8C1A96
A16F057568420A735A17630589E37624FBE48F378107E6EA880A578654ACA1F7
80307168F5F61A1BE8D00DA9D4DC314723B7A2960FE961F23AAB485260F1FAB5
D7EB7B5BC72B8D783E03E76AF474F73A6ADA241621C368BA9CCFE1E68464873A
5914E66617D23AF3A4A972B07B5E6DA345F29CD2561EEF398658783FAA758D30
BB16F55AABDC8377A9F37112DCFE34DC3BC7889625773C7E53224FFFCEE27D32
9A62F6D03DEB59AEFE38551259A8CB31CF7C554C013617581ED034C304360FCB
2040E7C672920455151F81E76A0A95A558E056DFF187989EA1554A4608FE9446
5849B7FA0B5CE164777E439F98CB68C43D7561C8C3974A27AEBB8E50DD091B91
7FFB06EF9CA11F2B83B1A01E3FBAA321D869F1CCD34F56387A78B42685D9AE18
4801CC10F5A1E58E8097DE61046499135FAF474A25E2CA705906A6E15CB57F34
1B05C9D8A5E002854FD16417A7461A508B17DACB587D2C489DDF4EA5F644DBD7
ED1CD223F5F35BA3609BEF46966F9D76990019363CF8E32F286D48D6166E317E
F1297C3BA5E075FCB5F05A12EA2E30F1BE91DCBE42C0D814EAFBE88F1F99445B
49849681DDEC62792828FFF60407BC2A0D2B07C9EED014D89AB4CB82245B574C
006312B0F8FC10B66615CC18BFA5486EDE7284B2871960D316A48AC87E1F9887
01ADD7AA3ED43BF28647D31AAAC8455E617FEB0602B482C0B2BACAFBCC1DDEA0
E7B467FC1D8606ED27EBA786A6267DD8A194A076D5414BFD725E486BBE696AA6
732DBA9D7180CFEA2E4A4C69E45EA1BFEDFBEE2A8C2BF11950654B8BCD2CEE8F
016B5F91CD7BD3C3FDDF87640C0EF718D0F9456E8A6C60FDEF6AE1F8495374FC
EE1BA5EF594812C2DC4989142C4E619B7CE1F7A9D8E6C397E843568DE2D3773F
1011A0DE01524197270E30BAE6F3C9CD656B21DB4796149E6CD9DAA0CA26D7EF
CFEAAC163E337CE82307FF5DE31660FEDB2AE59C1D4E1175EF8D7A10A775188A
72902E320D50767E09F1278BE056BD58AD9AD4EC1F8E6B3249A9C6C27FEDE92D
2AD1C6AFC0752C458860508D87D25D0B9C28CF30998559750979B19A4B62B720
22AEDED9D382C39395666DB76713A79530C8136AE87DB1B3D9CA2207493839F3
E07B353232C40180C4CED3A7FD0CC1D283AB1F0F060B8D6B64408887F615FAB9
EA50E0F2ECE0634A27C43C08DAAB74A12CFFE749970AFDB1D4DE3734728EDE27
D14989F669418D13DE286A49D8130FD9D8D886BAB6ED0F599425336EE08FBFAB
89B236F46D82754F9DDC4A2DCE4E19F69D17044114CD3570D74E2FF553452E6E
F8AE1F93765D6FB5A67A4B449E67EA3A80F21E0E8800FF1C2762EA5E07953BE7
860B8A7F0A82FF0E2DE8322DDB90FC76457AA8D32148F44CD5A5B676946F75BF
A20792906C047FD39065E0873E6959FD85F905D764E04EE5FF731205C532B74E
69D245FD9F07D76946A5F8F62D306F35BAD19087C4E4B0E7759068C23BC1A6B1
A6EE9D2C3C52B7CE0DCC9F3DFD62A83E26AC82AC04BE0D2EFDA868C149EC1EB7
631F1E2E7B4CAB582212E15C2D654F4233D90846D961BD487BA083144D5CD7BD
EEAF39009C9929BF96E423AF2C38119D31FCCA8C32828938B364ED6A170B7683
9FA54672EF1C51FDDBFCF0D49666BA2026714FF6ADA7DB1A742C5A929A73E402
E0E6963E5DD271B704621F1E1DE328C69803AF416FE004123C2746578D3D9660
718963D2BA3FB65439BE3270F5C1238349532D95DA7E932330A2F2D237FC51C6
DFD371960096345E7D020DAE503830C360F1A559C01580A8F0D97C42609BB5C6
4856232D0BF8B91612DD9174425D7F2A3010565DD690BE27EBF822D259C967FE
2FDCE11DA91B1E3AE0582086500C81DE3893324801FAEE0A59A59D691BA3D9FE
DE8E6C5D25271573CF5142B6D7E769F98E3C5A346362A6420675F14C4FC0D59C
19163E5D3342F58043E892BEAA103475EA9DA7E3A2CA5DFBB0476DBFE41EFC33
64FDB70D25053CADA1637224839D315801068EA1DB11704AFEC76D4D9F6A7B0F
7014BC2FDE1AE34DD8EBD294917437F62D307B8596516E4B68E4C7F0FF28E437
9ED86CF203EC068C99DF9526672081AE5805FA162E869FD2E1EBA35E7359649E
5CD868C8F6ABD48EFC0810BB10D119A3BCF07CBA109D9AEC08CDABEE17DDC06B
A9B94F9A3804974F314005723C647EA273E8A7EC585243685975FFDB593D6026
68F0471391284B2A7764050AEDB086D5B4C770BEF2BF2D09FD4EBFE6B5F85C91
C3B79CB1D9086B2B5DEB217AA83051D08B96F66288FCC0631D2DA3F37D33EC3A
468D598C9BEB9FBE45D324615D82F42FB1C12D5949D491DF7578CB5124E84199
31EBD1BC0744B18DFA94FC2496C25597B4B735CFB94E8C41F3318CC0C27D5251
EA488F7FE10CDBA8430E199ED73B69ED71F2FA5A9D72339FB0026DDF4CE4733D
F52A6911F54E03866610C5E9E947022219FB50BAF7177A60B46E67115BDED44B
5D6D8818ABC94FA0592E602779555DD428C9F3F13B01F1A73BB31222FBF9E5DF
4796E21E564B10D478DDBAF6B70FB3860C515C963599B60768220ADEC9AA59FB
5ACD3CE676A6488DF87619D44BB4A81905C4907B40F3DC74417118406B12C8E8
1A6F27E54FC50FC0A1D45C2B3654CBD100750F8DB5F74BCE782109C97130C7BE
E473E08ACE6A5A65822C5C5A89A0A7D76D5FB00519A4545E3EFD4AE559050A72
BD737ACFB883008CC426E579244022611ACFB1C6DF69A1CEA378E83489F806C4
096D777C5D513C452CC084706F4F0FF197B3805FA306FFF6A07D9DC2B7252DBB
05A5E23EB3806C7359C97BDC7A97AEAF643914DCFC7139406E9A98BEDD2B8A8B
9A1D19073CD5B8D07AF32AF35382F7B94603DB3EE4FE664C296B7961981E6E0F
BCA70C9395AABAB8C5BA750DB6CE53E77DF14DD43CF935DDB829964612879D5D
16A663D9A988C0A44D523F9DE328F3740E889516E7234299D93D87F832357650
72A3D8B45E4C134BA365685A39715590784F36E4B70CF918CDF47EF121D588E6
2D879636D432A549BDA22544BA75AE3B94706455C2C0452E9960772C1845C2EF
35327D6E049AAB05581AAAA02AF6368E0CC5A92E4B68CED7DFDB3596EDD0522A
9CB8ECAED4B0E95401B5BE938C7F4E3CC2E3D25690450EC7A2157477A0D09D45
F792CC9593A4B30E0704964F634BA5600D36084D2D4BC32CE67DE84E93244901
A544DB42DFD9CB49E06D59AC3218A94B9A2A04FC5A7AFBC7F8F9C24AB29A3034
B48111656DF1A1FB96FE7AA60DB81235C8781832F8E40A7EF3E6772027F5D80B
033FCCF56970FD3239C744603DB7404A2BA3D54CCDAF1AB445C500145FCF7D27
07F9EFD9F05421594AC565C2626AD071F48B9E23DE6AC2048880E6429B2DF0F1
938F10CC615C5860240F5AB9982627117AAAAB619EF352A0C35D66954B824589
F338011D41F14F06C622F747EC999A5F89025FF0589F675BEAB29A0007C76A1A
FFF48F6B707E39E9A233FEE16D4EE3BE252178749745758B563A53A26E95576C
9901425779FE7C82880687BB40289610F177AF7A1DF5749B392E5159F8D02800
65CA4FD6D28F2411B534A10DC536DC9C9B1B3E5D29B012BF9D65625B26CAF259
B2B6F4B57CD5DCB3261B26615CF520002D18D914141F46B49A637D7BBA40EBD7
AD5E5F1A6F4926DD901F238425E15DFB050760BFC5A9FE2900C81C55C43E2BCE
415D3BE06380E6B6833A74ADEE2645628C1682B2FAD31C60B5FB3117F692FFFB
1003E1E6E9E477B96428E6CDD76A87258C825A5CAF45BE21EBEAFCE67EDC5E74
5BC2E7009E018B93FA9735E228F1DEF47507F95F1F7E06CD5EF9D51B942527FC
3C7896A62C66F02FA1023A1439F8748BA9E4009D232F0EA8A1072A6F3E025D00
7685B9247CE568F21135CC701B886A18601E037BA4A2EBA0A1E1ED59FA779398
E247ECCF3766D1E0ACF358076B6757A348361CD4D20D015E32A4F79D2537DFC7
F615CF0A1B12304EE3045D4EF5AB7960FB243D449605F8010839AC9E4CBFF755
5FFDEEDBA4DB9B1A1223F404815131BD24171299154E93311993F4C7B971A0AC
B9C7003090B45F18A7AFE33A230D451A6617D909FEF32E2C51FAAB861C681B8A
5C35F3F8D45083ED0EC6AF1E05521DEFD54A0E99F03CF553C9902F404B82269D
176A22403033109F52AF47368AFF480DF1D86FC01779B7C8D4E8EEFA4AA67521
1546DE0F1A1DE734C773FF80FD6FAD879B8BAEAFDD46594BF4E27099DDEAA657
51ED019A21CF1FDCE21FB66834781DF8A989FA960AF71417EF12820CE7788D71
7A67D8CA18024B72A24F07A82B1471C283C39FEB05DBF8EA463AE4E0D26EA108
E8056CB31C18CEF9592F8BE7EE320D4D45A402AA972A7CB57FB1B7D5548B58B5
7E814C0382DBE24856A902AB63D1C547D8680BF37BBF6B1830D2679E12CD8A7D
7E87A79C1FDA2F27D007F68E2B11985E1D4C80BD27DEE1CE6C773CE47B83FC72
8C750A674D2B0FD69FC8A5620A83C0FB05578BEFF5EF48762ADF2263EF8C8EC3
7AAE08ACDDC78814FB2D45C6B11C6DC7293F682535DF0D3778A9CD1F5E0125C0
9378828F3AAAA64892BB8ADA34BFD595F4B23AFC3403D512FD654124C9A5BBFE
E4786CF9DDF81FB6AD481331591ED2C202772389ACABB181F4A73D36DEC2489C
25898255E71FECA5232B330EA99DB79561573A2AD1D77B75DC7D0510A6E7D1EC
171245F40D7AB37E3CB514A78A0C23569EF32DD70DBDCEAE546F1EFD3F7BBE3A
FE5AF9B41765F43AF746C2629DBB23C444E6B6365012FB284F2BCD65D69CE88F
32A457B437924737835B73891EBDB9886FA51BD76F811E95AFDB963D17047235
5DED8FA3432EFD096824A07C5D2543FAEA008CA5E4F815D21ECD7E93CF170EBF
61D194C8BD3EF63A91755C47502710D4F8A92A2BF4066F7910EC437CFA6443D5
D379513629E5F3804A14488DF17C3F32864EA9991C3B8EA62EDA4204BC825049
2C1E65B8F66E43698E4EAEDED41BB8D4290F85A8CD521DE44641FC3F732E0DFF
5EF316B131E187FE0373D0F7BDD005EB43F27B42D9D7EA6BB01FC6E8EB0263D0
FF027AE2C689C020E949F81E0FC8A4F176A732BCCC3CC4F6300E9DB21A9E7514
166FA3232BDFBB4E198F6682230A272855126CC8CAE8E1D0FFDE0FDFAA2F124B
A1C76A3046DFF3EE254C9714068784A643CF52C84769C085C68202A07ED77830
BA2067D03A0D88DB25670D1AF557FB6E87D8158F1D953D8450902F8473679F95
6E412D720F31721E671B95BC78C2532FEB86BEFC62C03755034D8BE4D2D05B17
F37968F66C7B757816655E3CEBA82DD98FAABBC2158AE68537E6B4501852249D
3ADAD4C2009E635B54448755A44CF7829C1861BAC13A8F0073FE12546AEAC545
2D41983CEC21FDE8E6005EDC130CE8028224D60923070D1BE64C667C7CED3C47
C8B149D1F3DD5FD7C5B4840DB15C95B7182CAA2BC5694F17797C405FA1035C81
A99357D681924559F41FBAB1CC65B9AD88427DA6C7F64C6085E38C489EE38BB6
D38F336B09923CD26DF46341FDD761F7C6910D096DFEDBD833FFD50B450FD7DE
8DB02E00B98B69994D8A97F03E6DDECB79B3E2CDDA9053FBD22B85CC59097B4A
35E6A54E508F6A0812B824C79B5FBF3DFD41928C66654471729CF48D0C801F87
4B7BB20B539BA1E7F53FA6DA525531E489D1351FD8A82F02BBE82C89CAFA539C
6BF59B65CF19425E7753A49736AB0367DF51956AE30433C576C3545D9B4919F9
9CBA7E0F702A35EA992EA08BC3B3765D573587AB052F85986D8ECC9C2D7D0581
3D73630AFDAEBEAF72B53C3D1A1F28512B16658CBFB2A591F564AA0C4B52476C
A9CDE588E4A909903C6926F9E2E18CDCD4084EFCC7EE774AE25030756BA2C5EB
E769D8873A3CEE5DFFBCE12EF4A77F3AF203976CA8DD346912292894859E6BE9
183187D4B8CF3F628CAF7D3262589CC23A4DAAB30F7D077DEE8652760788EA6D
0162982C8544A40F6952D00C608A1C913CFEB52826AED98F2C9A2A9313B6843A
3904CE09A418CF5B899C31B2732D02BDE0E219AA2DAA60868393FC7BF05DF389
CEB0A938935D81281382A9BC5E2E2DF677BE956D49C3F2DA4318849DB4A179CD
00246FF8DE68BE32591DAC5BA231AF509D36EB88E0DC7696C26B18FA1C9F18E3
57BD2113D571310F3A1648897F25B54FE19F690C3C108D4534AC158EE1C3D1D5
8471FD353BD3C98F05486092AAF38C9D60531622EEF58E1D3601B275792F6256
0DD11136278F94CF74EE191588897ABE38716E510616C785AD272FACA4F803B0
818E4B568BB958C900975CB7B9DE244384872121E5AAB182455C8C5772BC5F09
0DA9A09A6FA686E2CDA29B71B62C61449CEFDF2FBB8E06EA9A43CB3537CE775C
82320622CEEBF7964714A8CD3E9A4B247D64FED74FF5A1D64AE4FBDB4A3FD5CC
6391D4C810EA8486A51F268ADFAFEAF1872637607AF7AA181264E76AE3834CFB
55FF9FAD7A9C68C0C12AF249110BDC13E4A6E4CB04E580511F0AFE6A5DD7C6FB
3247BA68A701515A080F9199EC28EBE1A43C382A08318726348CE49CD7BEDF6D
598B478CBB42FEA8C44547FED8B274EAE0EF731EBD547ADE9AFA351066DD31D4
BD0D77654B8A85886AE9813E8545546897BBDA8EC67FFB51D7B9D8432D402792
A721C733B5E041EFA3890B15CCC2C82F068ED4633F5A56C9D7C43FA850552A9D
A45BD9F9509C91BCA3FD99DD51F48F81BE1838999319B9B5FDF51F2A1DE5E7A8
B10E7E82AD63CEAE02062C962F5DD3BCD415E38B6A2CF214C61D19DA6EC8167C
11D47D9CADCC299E1978BA02B78B487089F9A54E25439DD1C7252DF94EBF2297
C0036D9220442D0F460CC9E97BC0AEA739A7BB2591553F3E13C3C3221F8B2BD7
AC1E4012A676F53B18F91A7E8E47EE6FC6A79FB8BB9EDBFBB491E58A39098AC9
6EFAB69DF50D8F4ACF2F2AA8D267D0794C5641BCB4CECFE8413D328BB35807A6
927AD212C38C87FD8BCC391AAA1243518EA064F2F344F3C06199F62A521DBEFB
9C776D36DE24ED307EF2C47C2E8097D1BB77162BBDA7470FD939C1B465FF1A5A
0E661B952043B1354A473D1AD14537C6E4508C4A8348D90D4EC8E29A7D9A2108
AA530B7221A84C0A702F08BC12EF0D42B4F06ADFBAE1523114426389F09AB331
F36CB737D7C35921CD72E513CFEC37828A4EF2A0BD6370299853C23CBE76B891
4022C234C73B8246F29B5073C1343EFAC3CCC35C17DAE07DE8B8AE7E05896271
BA1703F28D8759081F6E960466A56CA72E10E5208B92778DDDECD77F66A6245D
16E5CBDD297202E2BDB9EC3484162E40EB91C601A40948080E0F9322F5E64ABD
8906D804001417E95F043B4EBE90EB1456D90FE029953E35AAFE4EADD6673B0B
EFE4109EE0DFE24C20CF6078E02DF8038E361E1DA6BA8A070BBAA86B2A31E289
1A866F290BC329974ED7B66EB99FE2092DA8E7935058EEBF32F88D680243832F
77F0B38C96786656CF91C310F89BA56DE6F78DD1AC8D63A884EBBEC89E092AE9
81B91D1B72EAC3371FDBAAD0F607D10BAEC4807B71DBCC1AE32FB68237102B7F
585B1B9711B67260210E94FEE9118EC4B994E4BC480FCD122FFB0ADA031BD6C6
2DCB891E1DB6FA65465B1FD4126757D2CD0D0C3950D1E7C2EA0559DDE5EF252B
4FE08034913D6519FD268D5B098183FCFFCFD6A25CC70DD5CB2E1EE2A3F7FE26
7F901280462D45C7F5F2CAA0892FB710619DA48446453ACA62B45CA722D1E137
63D255D9E62A04BBBF99A714D9145D3A6914DFFBE3DFDAF1A187F108420D1238
2DFC6DB909B90B9A07196AA8C253ABCC1A29226D4A9AA2A31F6EE63196D709B2
B112D527CFC4740750B428423DFD640E87B14E1954F8F6B6728DD4A83C48CD79
9479C0BA1E87E8B57850F124DB4FDA7431A93F5F926E8FE4D07B973D335C8670
9DF282DF9AD60301DCDE22B9FE93EF577D7A2837A80CB93940A213881C84455B

0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMSY6
%!PS-AdobeFont-1.0: CMSY6 003.002
%%Title: CMSY6
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSY6.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSY6 known{/CMSY6 findfont dup/UniqueID known{dup
/UniqueID get 5096647 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSY6 def
/FontBBox {-4 -948 1329 786 }readonly def
/UniqueID 5096647 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSY6.) readonly def
/FullName (CMSY6) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 3 /asteriskmath put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C29547000FCC8A4D6AE353EAB9DBA0D
4335868937E3A2D0F9C8A4FBEAE138AE56EF84665582DDEF7B546714518D224A
F91D19409EC600924626D79F58E272E3657E631C06412F9D42732B6AE0A93D81
E2B13A81C76CC37FCA6DB35A1C6A572EFFEC7E1581C57B1D22EAE9C407771F40
71D002A06A6AC249FCB7605C902A76EB298B05E39D543A63332A91B8A1ACE05B
F902540FEC1024680B8D5857E4931D00781747C87ADCC45430B5462EA480BE50
D07C5C9EA0D8D6447324434CF0D637BB13037B6E1C48F191C52CF2B9511690B5
405280D5C825BD376EF12429837CD44BEA223DC8E199D8F85856C0FD551471CA
B30481FAE99B71FAA56B639F549F449F2CA6F5450AADEAD4C09595A7A8530D12
B23E012978225E112D23BD1D48DB097994A9D5EC707216D2BF5DF8B69E66ADBF
DBDA4737737F51EB7A38A4207BB46456A8117067748659D654B1D14849F14920
E57462ECFF602A181700A346C1E95131C6F1C66132915FFD999FD4105AFFE7D6
7DA46DFCC4FE53265B14D7326F5A44A3E97902CCB106AE99ED6434AA9EEE7E6F
60B8034EF80DF885FC63DFACB0AD1C00BE56F79B1AD41B065C59A35073B450F3
7E6BC7B90C9D9337F9636943ED701398E6886947E126F1E12D74C5E4B5CF06EA
E60F9B121B9B15E6752B127CCB9C26017A84BE6DD918AFE46DBF27BC06E66AD9
830BF2D6CA9E24A0199DD3E732405F3210C97C9BD21545B5E4DC10E17C1A2C71
851ED2B272055831A6F95864137C218E555B054BE3616820FE671E5BC08E7A48
D683ACDB91E05F469C0C8919D71027E179F4911E878F8D13F999C63C4EC2C21D
ADE1A11979B539C4C5746AA157A4EB4A7A153BC5D966197A7FF6A2DA3FDB161A
EF43C2D906C617868617E72163D5B0BC29C36A60867C120A02E08264231FD46C
1D3B62622A05129188D818E2AE83FB2770DF1D466CA38A49D15F9056BB7AB8BF
D7DEB2E3B3A8157B59D138787B21CE3B3A456E230CFEC1374AC66B7DBBE788FD
5182DA23264093CEF60D5BB0073AEDB68A61ECF1C69669244A1FA0CBA44DB83F
352AEE6012082B8A3FD62F4497B1BE0E4FF77FF94BF221212D63BC1E35B9758F
2D7F8FA002751DC0380AB954331E9AABA6C122F8F3D7E69CE8A6B359184F0531
6B158ACF34C64C32F4671D430820B36C9A9397E9C877D734B17C3BBD8A88CE2B
9F96D7AC5B8D55415E942D6C05392D03DAE53449F8FBE2225C91F228704BE9A1
ECC568FB2E90C73F2F7AFA62859C35F0FB26756DE719BEA5A3EB81A6481507F1
813CD1680EBFCF612FD9D3AA4B90688521446FABD5C54CAFE7B879F24B54449D
2B30738B137B5E212B34BC5384BC2216A5D13F761D6E13A043DB2AABC0276705
5C80CA394A8179D60DCA4651CE8B0A477165FF48A31BEC6B7C0852C9D72E11BE
FEC5E4B984DFDE90218C105999E070FC83F1716D13389B5EEAE3F26C82FE9A7D
3C67A98027D15DAD791348A21DD922C71145D287C7EA83B225377744BBB0082C
22FD44E1B0DF60956DB9C4790F4E2F81C477DD4CA9F4BBB4287914EBBB4F6E36
976C9E573496A2311E5C7677FBC4BB755B8BF925F291DE0442FBB8921402A487
ECF23EC556C3FD66158727B10B74C778FA91EC16629F6E949624D265FA6FDF1F
772E965A2C30C80AEEDC4A1867AE3D6D116BCE0F96D1A0C5138F294CC7C2AD72
8BE152B314E26422FA2DDDFA89A054CEFC6607D932FACB035FC9FD9959C4A468
CAC0F4DD41DFB83297EFFE36C352CA0A6B1485BF8433522BBBCCF9C73FB7334D
1CFC92348F91C4D0EAD90B22BAC6B27D21CDF5AE65C056BDE3B30424F76C8EFE
D7CDBC854B13EAEE0485CC348AC52F5345B7545B4FFC60B6E7CEF8D32354B233
8DF503A03F5201EC012AA67157F4A47B902D269A060A5B8E10A37CA7CAAFD417
1A13EED9533BD4A6E8845D7D236CB254D40930C273EA4372E0B13912B2CE9261
275D51D202D461FD69AE352E95F72D61683267D4951BB602A0BACEAFF9516F3A
C30EFFF3ACC08AD374A730287B148FE8E168089D239E1084E0F7D83CB9815031
5428874FA4640E1C216514AA16C74BD2B9A95EFD7B6B0C575A5D5B3AD1086CE7
E8EEE33490CDCF2E3FBAEDC984FE53D033987580E75E74E455E44496E186349A
DE4B5125F69BF79936565986B3D91E6A25CE6E1C4527FE22580A39805A91BF6B
90EFC8AD31FBA71FCC90EA04875B5A7ED05BA2FFD1C04774E1ECE84B4105ABBA
798C339FB61ABF75C6FD3F24BC775A7FDBDD87BACCB9A86B4D928917CA62C0B8
56343CAE0051A1172E7F234001A5FAA947CAF382FBF23E57F1144425713423E4
4FC1AE1D096D10D6FECAA6A9186B0D519F51D06CC976A65A37E9219492E6218A
FE9F99700C0D0D18BC48632268DA0F0CC24BE660E30645E7F63B0AD49CCA26EA
CEDE4DED685DBD38F5C4BB6AD6CDFEBED1B14A456C27C448C91CBF6337FB3632
7B9A565874F9849FC5E22C5A0437AF29E2B7FA405CF6B7AFEF66AE7449E89746
66ED2D4C15A36C45C0F64E6F185B808FC788984C230B4BA63204B38C309F2DE2
2937A92C184077F5252C9D6171EC6378273C32B61CF65E4DC124B321A4049294
BB6CDD064D4E07605DA5FFB7B3B0A55A09D26C8624F03D8C197885BFF0A20B77
257637447F628A4A642F6F92019F9ECA5B2DBCEDA63C05E5258C9DF131EDD1B2
B4B04E7A5441035163BC2769B79C89ECFDF071E3517C59A45C9E97800724E1F5
FDF504E2798FA9074A37B210B1C24DCC0B78263E2297ECA31D5C258BDD92D2DD
8C53DD3B3BC3835E5AF52311EF0AACD6DCD159C45743B1AE7EE5A0111DCC9193
441FB81F945D219DFF26BF50D80606DD3392CE941242CBAEA45077FBE6AD78E3
0DF4FA54CC33CAC27A337FF307F14E60D1FA48FB8368E307441D6811676CFD38
094A558CBF0B92503014BB169E345C27C74543CDA9E8134F85AA0DCE45EAF612
1AB1D86FFB5E13CBDE8E0F68B19E30D0D9F5F0A3EF2A84AEE4D7F1F63A045297
3F5C3080F313B32066E0C209C2708636C33A6531F1A483F3AFDFEA62305EF41E
C55594660133146B24184070B87C22EE5B80D66C409076D733245FD100E936D4
E844D8A15CF45C0CD6AB04F3B5FCB0BC7B1517BAF21CED4D6CCC3F19D21BABC5
FFA9768D77A41BC3F5C4595D868F2FCA88D6E41558FA5A70FB562E4EB22651A3
886F0ED1B46BFFF297A28ED67BAA28A1302BC866AA7A73418BADE0870872CE0A
305A5E46BE0CF6B5794539B8509F1E2DB4E40124D72201589BC4B55ABA2F5C40
E167175C7F7378203C949B8967E8CCC40F44A2D1D555A4273733874265542C0A
3C47FF7144C4DB276320150FD5CF453A505BD3BC1E98738A1CBE175574037D47
8EF9F80622F57DF4DAB8FB13004ED1DBBFB4664F8D7ADCCBD529B22235740EB1
216799B2D8CEC7CC4D16D8273B6AEEA427D480AA6E3C463F46763864856713DB
05307CE674714CAC8351410627B8D1087155F3788E744158F3428A767CDC9769
CFBE28A30D635D7C4FC44E43E7F13128A867389FD66CFAE939AE2745055BE71A
AA7A7817E24D38773771C77328F4A755C872AA977C062A3BF7EBCD6DEBC7746E
70346293A661684D3988A5D0B29860E6789FA8911E0C0749ADCB9A6B053B0E31
3D490B9A2982CFC167001648FDF96D040BEFDB75A4EB90E2974927BF38F10E78
17FFB9DF2A65CF56C1F63544662CEA0E88A5141F990DF6B5DA79CEB5B4744083
C4697EB37422BF120332AB934D292CE8A3624E2C8FE6862C2211254558459BAB
D8F1D8C76C604098701163703FAED0BB298396C86A0427106C007A7CDBB0AC8E
35F39B240F8D9D43C1BCECAB622C02E721A323383973B61DB81115E3552E4260
9F252F18E01C1EA2B0A1DED4BA50A5822D10AC7ABD664C460A4022BA910804E2
2094A3AE0F2AE375FB22CBD35CE9C2542C240A79BC6A79F1135E58985837E1CC
1E5D6666BC5D61FE6EF590316F9D1E80C42B9A7B6106D8B7F575447AACBB2660
2C96D7F024FFE3292611E82CFE62D95646B92CEF6F03EEFCB3F6950A22B0997E
52C38B55B77C2EE7A4D047F27ADEC6BF0BC639589FD0D1E0A47C948AB5BADA43
9846CBB5B1CE53E96622B59133303AA0F559A481E50382A2A38C98C1A56D9AD1
1668FDDBB1FE8068DCE68E5DA13C2D9918D1FEC7F69A6DDD3A29E31A57B7BDDA
EAC616202162DCC7B9DC52AF821A9C1D2D7F860A2F294904A55499432C7098CA
BF79B1B0A1527B99A4C57673AF54297BA822AF200FFBDEC475158AD6ECB55F87
555012ACFBDD0EA527CB5793CA7CACE2FD956F30D7A8AC7F6A98979BE4BD744F
BB84A87668E3DE62A814B92D3139981200D5ADA86C5D733CF5107DF6CB5C999F
F6F63ABEBC9694F0F67EC632BA8C58E715D92FD6BDD056F29753BCC3E54B0A7E
63EC33F7A29740EF0D8351B5897B126FB6C33E9A33CC83DAB91691690B8B9598
FD3F397FAD45555CF5FB9CD80879A0CAC1CD8E8D536F05134B21FA4065452DE4
BC8F63C82A3C34A01D00F4BB254F2AD7F6171EFFF6D7BE1213C9456AB383C568
BEC17694C545B98E8AD734D0522FEC92EB3182DDDAC54740AD352E7645D08B4D
CB4DA9B381D36C920C77869619855B4CF730E590B0405CD25884D6DB4D49F1E3
D79EC4D0489514359CABED492BD751104091A661A510F268EC681F818780F304
D960A15E583F354DD574767B860C57CC9CCA991E710576C626EA909C6677057A
C409AEE846B4D5C0535F849F33470FA395CCF5C05CBB9A1FB62CF656F7A2AA42
34730F786153A9856C337112F6A555A70EFA76404E2B88DA2DB91E8A2BC5A05C
CC339DCA364A87738B60497CB790EF16875CBC506695DC7D70C6ACCDB2A00555
3877A013482D55281C83BB630CB3EFB0657E5490176CF23420B97265B22B4CFE
1DF9E0B294F064F5160540EF3A452641C82E347A96514E4063A7FF16832736A8
6F21F6881E269CA09FB66DF37CAE7FF46D6B9AE42B6396EBF9A7A06453A81EBD
808B047421B0F88F62B3FF217542FBDA872D03A476FBC7C0D658C03AF70ABB40
03F1A3027E0FE186A22AD461835877ECF843C0E8B8340306092FBC5E91783A48
E010EBD29F114BC273BDC53D2C94275F8956A74561813AA6C2D896CB3F6E13E3
30F6C230C00917A40EC6F4689B65BEE32F5722BB1D1147585AB3B3D2D5EB8273
CBE30D1C6CA1BCC4BEA9B87A014E7ED3CE53D13ACC8D426267CD3BFB8497E1DC
C51CEB14F9CFB4D4BC9D6EA5A49DC3871DE59C89F855F079299F45D363F78634
493829329E3F370D117DEAA18E7A6989C515667C2229779B9A5494DF0B4109E7
71D79D379FA7B408A4675FA3DE17ED0ED632F9A443527CDA8E960411AD4070EE
173ABBFAF9101BE92BE59707F98419503A85AC58B949E8595D66D7B13B8FD4EF
11B28FCB5955C5F147BD7FA141AE0CA2ABCB1CAF82FE22D3281852205087CF45
549F4D5B47F52AF50E8F6FA0AEC0F95FD0B1EBDCF965BC8A924CE0F4598AC546
C15CEE4EDE7E6DD0E5FEC3A531B944CEA406DBEE21C4CF3384A79D0D5CD51BD8
AA5B8B1FC987AEB57E86D3C6FDFADF998A6D6043449FA5B88BB2DCBF2945A513
AD7ECD01B39BE46A577437E1774C3FEA176287C51ACCA15909E987B5AC2CA664
709AA5605EA89A8DCE6B4014CFA781E822E8B05F377BD0187D5EAA0585A98E2D
6726C471578295D824D1FBFE89F04A67F1A360D799CDF92C1218F29C24DE22CB
C6B625D044404C22C89C433715BD77D0BF171030BA84E292B7A81E2FD99D4E67
BA702C2EFA11D4461D833E74E97C9E295C6D170DB6BD73D615D03E678B0296C0
F8BF99321767684127625942B4C3241BD0608460C81D97FA658BC179917B5065
74A4D1F729CEB1D51C82F9C90F0C712917AC482D413ED7CAAFD545508652DACC
1A03842E354F734C5FCEC8C7BEA4C69B066DBC83BFAA473D0A632DA2CEDF20B7
6C7C83B4AE2AF7E05AA2C081BB6870AE38848F3870DD62C7D56EF1CCDD4BA3B0
32C61ABE629BBC464BBAB06AA0202772C16D82427ABAB4830ACEA267B0109A81
BA5D832731D1E9C9F0552BEF7A9B7AAA73760C6A09B910009BA9D93F1A56298B
A43A32D43CAA3988643DE373FF47C176CE92D7931601F0034E6CC303876498AC
026BB32D2F656A3541815697CBA2B6D527B69816161B2E13171E073D7CD85435
3D32708391F63D592B71D98805CD19978C2BAF780CB124372EEA0A3DAB537683
DC74F9E9EF98843F170FB086AEFD526CB81A7CC88046C52E1E56EB40F6F5C75A
FE9D5ADE49E82078858072F68BCD02487EBAF4E3F7F309628C1FDCD4B01F7D00
E1AE0A7CD3455953FFC77EEDCC5B5ECB1FA583064EC17132A3C12C0153C4B87D
AA57FF73AD33C22C81C545F0593DC7EF438FF7A5F76A04E52848E00CF2C8CB06
F295B1CD3BDB1D9E4EDD765D3753EA8DB76DAACAD75CEAC866FC4CA41501200F
F12998E8DA573786AA9A7232287A6D19A12536026BA4423EF0B6D81D38BDCD9D
2BEF15BCF32824F8EE802B461F52BD926A5BEB2E6CB31AF83E98E849D4339FFF
95419941B12D2F3B76CCD34D6B78B91BDFA5DB4D4879501DF3E514A5EA8F1713
E96330C5B4F1B7BA42D42F05E229FC303AE00E954A81F9BD43016F5930A0C490
6C753157E4355F6ED3C5D1963779EB27402522B5E9D459206B3A06E594DF198B
785F96B96E13045594EB42EF4A8BFE0DFCB4C5A2DA9594431FBE72A5AE18991A
36FEB5FD9E8B238B3A095939B6ECAF5644BCE7DFFD8EA3E723F66B305F142B71
B26F34E0538E4B58C4B5984883C6B08F3D1F596B56578FFB0EDFFE3F95E3B6AB
63CEFA183A5A49F07F0F7559994F56D7305139D06AC8DF9466E715D90AECB1E2
C35E3CD3F387579B3C9CA6F5BD741A7A5D7B63FC0130AF374124DC8C6AFA4FAC
E40BD5923FE889E87126FB22C1AC4FFBD351F884D70803BBE1BD0D40D3CDA0DA
F6984C373D3174358BC41C8DD4A215283ECCBC24F345FE65E316F24940198A6C
3B5483129706AEB60D6C0CCE0DF9C130593475C72A92662A323EA5B689E5AD0F
C949536875C37AA2517281A36A1C1D5650AC96E0CC00C03266E279B54232A1E6
E6697196A4270E1DC794D8DBDF0690372AE19121B85FFD357E965228C66BBE6B
D2E55533F7A1BF30B2EABBAC98CE35C619556CF9F0A522E8EFE4BE3EC61FDFE4
E364608963C928AA8B302B1636DE15C83711C8FA060C5BBB1BCB8E02215A4F4D
560DBC4A235F6F07EFD20ABAFEDE0795AA3932556D6AE3F6EB8FD0C1C509FAA2
55CCC2703661C9F48233B429F020E01C1F3B8090D331C3B925DD5D1CF9D19F95
6B192C593225B5186109D3E6636E87BA6F24EFEACD1F06A29DB1D1F4DE0D0253
87641AA4A1113755D0DDA6EE4234CD9AF550DF63A46FC6F698E623BBF6F05278
858904B415033C1A33B7770D99247815E2A8F1216EB42EF9742EEB4E1D90EC3E
F2C0661DFDD996CE1FD66F946B9D4FFADF86861CF8EDCD570CB400D181697747
83F38B92B1803874C24AF99C66E5F966B0E72B725FFBC6172341596D8AE51C3C
4676A65E4D32F499FB1ED170554DA7AFD79DE5953988516A8B2B123FA207BC49
D80645DFB16A79549BD5E41606D80424DBFD6F5BA1DF0EC271C596EBB4FD0B84
DC5EEC45C3FF598241368442A3FB06B460C7D46678069011FFAA3072402D4DD2
3DA6139A548FA99A68AC61134087071ED8B4A37A0A8A1A3B48A2A8CCAA351D75
1828BA7DD5B7758A43F98F4D449ECB58B20B26C40B35AC82623961CD892B5DE3
777908625E1A91DDE62DEBB2EE5EA3CAD7E089F421DF613D976660D547CCB02B
3C6B01F009299124A78E46BDFFC3F2497C435678B4DFF0E94094B0DD3B930E62
909CED0E31BE64C98755D78874558397C923C330CCAC7180CE00525B342BB015
E59A1DB2C85CBBE849DC5E9A1E035F4F81843522148C0B0286B281E1CAB803DB
56AA72F379E098B55246D2DECC5A3F186E3B8B32621FB10E7AAB28BE4D673CF3
76230ECB7C6BFB808A1BA421A17DA6ED7EEC042B3522294A7AF140F4D6B48895
8C858454A427A661603136FB4838F3D6DA238DCE958DF8C6E008DC8615647607
C3196F3C4A5FA658EA3E0FA46FF50A880933B2FE621B3E32870B5DE9A1D48E2B
F9452CF6D043D2AF01D609C4AEAE00D64586CFABF000AA6FCC6773015975DF8B
D150E30874ABF6CC106B4510079DD1C09247A6AD308598E7F421AEF13B2B2F2A
02AB93D42D66591C190156585A2264856BE3DAF0044B7BB8387612E6C66A6619
10364C80E2968A1508A3B1183A76C850A03AE894C4B1B35490BAD29BA8E74140
7F76410D5FDAD273F5F78157632276BC39BD69D7047E9DAD1E8BE9
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR7
%!PS-AdobeFont-1.0: CMR7 003.002
%%Title: CMR7
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR7.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR7 known{/CMR7 findfont dup/UniqueID known{dup
/UniqueID get 5000790 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR7 def
/FontBBox {-27 -250 1122 750 }readonly def
/UniqueID 5000790 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR7.) readonly def
/FullName (CMR7) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB981ABA2ACC9A23A5
3E152596AF52983541F86D859FC064A0E3D5FC6647C3CAB83AD4F31DDA35019C
CDB9E3DD3FEBD4C2B36BA3CF6E6C7DA85E25D8A31A9BAD39BDF31FD0D1790707
9DE6A078E8A409D8295F642DF492AC4F86AC84383B0F4C6BAA7C22AD5A898A71
D6CB34D2CD12266C486B75E75A69C14819DD9BB8159088E04D4717E576B8482D
BDA52110AC8B8A80E4E9D58F470EEBD3CF44A1E1EE8DA318FFF3611B02534FC9
F4018C7C57E80570D2F634D98BE5D5EC6D95051157F0EA94A3D12BE0B4B79939
F82F8D73136D3337C44E314B0B16CB030D9A12E01FB667105F334C3EE965E5A3
D410D2F1531547A4497C355AEEB295CD3C5334BEE5232992960B757594B89F3E
52095042DBE6B4DA3C3AD50CA95EA9EBADA10630B500CF1FCCA7D60306743681
7E428D33B7F7C40B425CD58E4CD8AB474BCE6A307BC6C6EBC15A8A96E0E2977E
A33389154536F5C5D8CF036D07F24094E779E5ACBE5502C92892F10F4C6DB627
C7EC4C7BF20B39418A8A85D7FD9B0EAAFD871DDD41F93BDE5FE619AFB8711824
DE890E62C1969A6FE28DD3578AF43D58A728FAFF0B9FAA640962C8F35A26F76C
67F3548D6DB54A25CEB368B47F97EA2B0C4D7C0E7894A4F0C823C6C1922CF9DC
10E05600556F1C7C9AFB33A2DB6F8730F70D6BF94B1FB0887451F2FFEEF3584F
DFADCFA9A2D4846B8F0E51620E1327D994CDF973B837D10C90FF76DE22B47CD5
EE3183898D156861AB4DFAD34A1E3FA260B8164E6680BF58413A553E88F6100B
C4F4E8E972C81A5F88A7DBCDC308B4C3581BCDE13877B976B1F84330839FE5CF
C78551620EB803DF94A5C921F8EE24F7EF8FC4C3E1653514212631F54F90E3DC
E9EAF96E998F340C4F729ECF7AB430FDB7C0BE3DF2C0D23015820E28B743CAD7
7F0AE95413C3EEABBC69E852F53EE1DC260D7F1E712BECEF2F18437DB23D8E74
2902AAFBC733AC5BAA452DD6F3671859AD836C8564E99CDC4183D8495AFD99D6
1F0D65B6588CE7546717911E25BDCA6C2649E3A7466A3E2DA7C7994A30AB4449
672EFD00632EFA8629C1AFB7D53D801028F77C864869FE636213A69173003EA6
BE1ABA95EB07B13D1594BEFCC95ECB0A9CFA9892EE0677D6B6C250855762B7A7
8E4E022640F93169DFA0303A0D5E73BF3E0F4D4AAD10FD7E4EB20532BA30371F
E9F480F9513432946F9828AFB5D4AEAFA5829B2CB544E5EB634C4537EF7DF08A
A1CFD94A52DCF0E7CE4C5EFFB01E6D50558B75DB4C8D5512B06080F27BE62E01
2EEA6A0357441401458C842D3DD4C35B8F561D816B336216CE0C14BF77648AF5
E33912CF95872A1E1AB9A18980A0B29A881D13397C15E1CBA5D3E0B27943EBE2
F3003D15EB446BCFC1C231832475D5B7AA19E4CFDE119D6CD62D053C6D29C333
5F729791D17B3F7108074EEF4D1BD101CB33E01004532CB0D716D2E54D169C6E
80163E70C0E9081F31A1ECBAE079D2A518B790B0CB2CD03DFD034A0F4788E800
B0CD2DC1FAFDD487C2F381EBAB2A2F3F3AF82021B211DC9CD2FBA6A1BB3D4AEA
4C7F3D9A5C21DFF284CCB827D205A69638E98D5DD8E36AFC1A4481B5CB2A2E8F
D6C838DA6F81990F5ED928DC7457501B5C979FF4CD20A830896A460C5DB13D56
A3B2B5D9B292374A9BF392894DD99FCD6A1E655AB395E839F074D1596488700C
4E2891C8AEEF66568E82A8B826F9A28FF84D4D9BDA21F638EAF96880B4EBE0D8
081982F34831A03BEE81FC177700C2360D2A48915EC40D5FE85B400E175D5AF1
067FA0097904FB647757BB44B4042D30D1557BD0F7922D731142FD682139CEB7
58CA4C8C240A0B86B1888CACC507E24E04020BF1882BD9B4CAECFA97DB24D7F5
AD64C69454027F198BA35881B94EE9159A2D73E450C3BDAED66B886D6DEBC84B
653E165176228F88993F12A170775A8D7038BDF2FE8DC1F7B98BDC02D1E6686E
9B834F6C0AD90780B17DFE25F0A4E470CBA84E73F2D22BEE09A040F14CFA2C14
0FDA5A5149B5FAFFE49F55EEFC43831BC43A8326FEE9C7F469C0FC3B000884FA
41DA7318EB57262CB96FC4EC7F16CA07FE1C3BE8C2DBC8A8135953D6DDF20BDF
75A2B6D26074FCE752BD32FB9F5CA797775E8DB9BB9786B469A3CD65A0D9DDDA
C2A166E454A94860EEF5B5C12172DDFC576A03F6E6F8A735FF21A3E9CCB4CAA1
3064893487697986A42CB5888B2B0A79FA3C74E8187BDDF7BEAB884B70B8D4AA
AC6615745AEB906E08BF831CFDE222F58D02B428D55E9D5A3CDE74E42D8A2CB7
E1A3A9439B678AD438793ABBEB72B21C58981DAF3EDCE4BB93D95F4A1E943BBC
B3A012DE92FED4F232A3A7D60CE60B605151F9C7C18A5C653E5D6D15E5B49A63
73E7A339504D0ACC74B8B116EA88C3EBA2CC631AAB29F761E5F062966AD2FD28
7FFE52FA8A115DBE23E471094FFB3CBAFBDF11B7E9058313F2D069B2CE98A962
64645738F02A31E2F2AC11628724034ADBCEE012721EBF0A567893411F950410
B20754A7510D041FFA6144AC9CC46D846B82581F20BBD001D34D9764010824BE
61C30D05E5C5D100A24F1917F01799CF5BC4E50FCECFEA732CB50196825F0E08
8A1EC868C6D4357857EE2957E081A0E4372E31A8ABEF23C3F2EA0FEE57DE4D08
61C570175C41AA0C7A3A579ADF593F18B4AE3782D2552E4E0759C32E059EE741
2D8191E381731769F6648B3581CAF11DAE46471896666F18F02918B0860BDA3C
BD5DE777672447C23C62ACFC2611ED5239D6A266FDA6031EBC5A530C1A2FF7A6
B4380B9A4C877267854AD1F1677CB5433F28894ADF93D39EAB94541A8D232E08
22D082D0951A60F62B87DC028714EC74133A4D65F7D0D1296C0E189C4A42AA98
28E8AE7ECBB9FC8DFABCC6EEB1E9FB06227F90808EF31331CCC5D4C9A6182181
047902DC9FD0444FB94B60FC74F3B677758088CE6A159D940C5CF682335E756A
8BACF06AD7225D49B0002392C889B0FE2C71311D2596F4903D12FA20BA2FFE25
A0804B4BC282929BE31E0F46B34532CB5795A65218CFAE21F390792DA67775C7
B91A2BF4C16DE4F6551DAE3A5827F616BE9040EE6B1008DA2F99A01EF66D697A
6CD1A44E0A15D1F39EA8025E886A68A1E9C334327C7703EE721E497CA924AC90
7723106D913C5ED4BA4FC743CEA8D0F5172526107DA65775C0B1B77179D336C2
9B09B608D80B1A1E87CA1A84A833A00D980D919BFF56F6390E9D5B45E9935CF5
E69D003564462F750F7DCE02DC23CC215A0696B74D8BD3156A392A94F557655E
00BFAA035647568ED66157FACC585E411F7F428569C147DC43F6E4FDE693D0F3
9917BEFEDF61FB980B85515FF6424824E2D995B05CA1E5D3E8BD8D3281DB7CE4
E54923E84058FFC0A8A2C491327D0F87CE4C352B724167CEE224DABA3B95757E
4A419594BE4F92E78BA6D35D4C93D31ECC3134B24A45DC32445725BB044F09A3
AA8C31EFC0A2944ACE2F2CE054CF24DB350FB3C71115518C24BDC0F7E54250AF
9D3378D38480E1CB9029F31570C619A28F065CA4FED5665EDB96712ABEB33B9B
4232C00C1B0215F08D53F7E430887035AC25BEAF06942FD1B6C442253C887AB7
D694C1A6115C8990B4CAF1E81DD1FDDD6B03C00055BE956BE7FD8A4E1049AE69
EDA8593CBA8C4A41E046C689FBBF9F1B64E5856A7FB1C61EC815A56DE2A8ED33
41F370B8203D4E5B19C63AE9E6E0D26F4F3814B5AF48AD30EC9B8402C941FDD9
722FCAFC638FBB835F83DC77F93D367266FA7DFFFCB567EF82B1695AB4D94D09
B18AC041811027229DF431F5CB2BBF6ACCE9D500C8F075A74590641C1A607C56
D2B8624797BCD9C91C3177818691FBB4744EDB6056464A0B95B8D63F7C22309B
82D6126E2057BCC9FE5566D96B7A9B201A09B0D3252A5494C8CA2C8BA8A13C29
37EF2A882D61DA708C279F663D88A8E2999A0F3B6F98C49901A7631BF7708B67
54D0B4C52BF4BE0DA0439E6763A7C9D639AD4092E77B13D3510DAE1475C978AC
796F9B2AAD3BFF35C5A3E19B5E2BF704B3BBDF68CE48BA4FA2496D60E58888EA
28AE12D00E9F0816FAC190590A865BB58569A91BF0345D01230ABA361442006D
BA2C90EC2036BBAB79EBAFC3F217DBD5854C519235F9627A1C3C71D21ED38AEF
0BB40F3B86BB9F09A3F309473D8757AB7E638DC1C59A7F9BCD49DE4107A2E54F
422767FB94048987847205584309397F554744690ACFFDF5902FE5DB355930B8
71863217830DD7A563B0B3A4025ACE75B0E777B4414B62A13B50C54E0E6D47E9
D43BF769B9411B74E1069BF71BA873B4B8973EC9BA492A5DEA58D267872BB246
10AA67B143D0E2223FFB4991E583E629413CC894C3FA4869B72D19CE1A0CEC8C
0FF5E5A3EC1FCB7D3C4289813F0D249A11B55104BD60B2A89BEF44CC77CCDA9A
065B8B83B4F4253AA1D535290DCFAA4773452D110D2B3370F9E2FE5432B54A9E
644EB3BA9BFF62347F376839024CD5EF3C5DFD30F412DD5474B7933E6A1AB63B
4B12F2417C72D0543C26A263AEA53E5BAEBD67E23553A72E949DEC556BEB5D09
C4D7A89B14FE4EC68D0E3E9D65A64B285E53590F418EDA8175113CA375A29930
DDCF4C71ABB26CEB800C2C2B253AC1F53651C88A56ABE5A74F3B54CB4FFDDB92
60AD7272BA25EC2F6FB759AA6E1E7964FB55AD09F4EB25DE45FD01833947BD05
6266AA8ABB7DD792941C7A070FCF3A4636FBF8921C70298D42FE92F079DBA2AD
6149D9CF9EF7264DE6DFCD4429949B15EA90B596340713BD61926DDB2BB23BE8
F9DE38A31620A817420A245946E551463960A8C5C7295E3B3D6A59BCDF5E472A
40B7A2CDDAA43CD8AAFC411D037142579D11054A903E102DF0D0C7B5BB854DBA
F3F086AF991F7F5D5C730F8F9AF213F25786F3EC0E54530FF912F4876FDE16B6
A07D0DC4FC46EC6363BCB68B83ACC448B801EC43FDD2F8BE0E93D809FF81E38E
176AE17C67C85FEA58EC95435434C49A950AA955D8B20989C550AB1F1C31B7FF
99422E1F48FB7D6F327C6DBC4695A03903DB275B94CB39386E46579271870A25
21823E75C377E9D5B46655E8CD8F986372CF8BA846423E26582315A9D19E0BF5
305C32B2A0EAC3ECB275B1D8BE11A37ADF524944219D94EA2C5DBDA768828B6D
775DA8CDB09E0570E4ADDF462EFD8D3FA3F86B1DEECDFFB699AF6507257C1879
16FC615868C2D51F03CD57BA38D42995D9164B257441210084DC409B6EE4C119
0B2E17B0A8D5326DD0010E4A325D5F77BF935693BC90A00A28C7B5F74817DA39
F47A41E32F4F92AA04D30D810F7B1484EB53AD8CFC8CE8928B570314E0F713F8
AF127227190F9C16BB73D2A217FF801C391A29095DA5E4974D137A0CAA7DE702
E20DD4755B1D78739756A5E7EC3542B96AD6844199FFA2F5F2E9C64E2DA4FB2A
ED79869F745C59D235438251BC2E6D26112AAED20E06021D1AB896EE1F1DD2EB
437FBD4A25E42245C5A647493FCC9922E6DD7AF57D5D482921D1CBD6F0F02949
C27777144751C1E72F4EE2BC343D4AE7A8A8758123B54FB1A026144C643651EF
0907A376945E19A8FC7F98A034832A5820A481B0823F980F59623E0511593FEA
BDE6EFBCC0383242CBD4954027B075B21F10472059A480D6E5ED01C3B07461CE
9810251A5C5643EC7403130C2246E8616CEA25EAC7A0076731FEA8CC43BCE3BE
933FCE61067F5FD402E67E2B9DAD954AA77C5BC86BC5E4BCE2ED676D8D8EC7D0
ABC5C86D82180B9D5D7451C71B5149B6B67883578DE9909317928C0A92E3205E
F23015400A1763A6FBF67FDE3318AD2696685A1832FC31CF38589EBC7CA1C818
60D2B2211E04EFCCEA88D9A9082E82951EEB123924A267CB03C48889032F2892
4227E217FA28F87E01CBF27BF1EA60641A4238258CB7AA355908FE36D90F5CAD
FE992D03A33E47CA9AEBEFDA57793F39DC6A9E85D5B289F6B862B35DBCF82E43
5CD6A862F6FFAC36478C384C3BDB0148CB1FEDF55969C776E77917635B5A65EB
F2AD351D21CD3822D43289FE8EB0FED58182997097C7E9F4373553AE1CA92083
EDE3BBE6C3BC7009D15AB5FEC6A59E9FD1BCC7B2099CA15FEF083B9CBF7B890E
CDDDE6BA0AFF306C76500C945DC91BD533FF9A585CEEDEF79238C54E6168001E
26FEB29E523EE501BFA4F60B782B1499B07084C35A2434B4D29D3D8E2C8F945F
A9922443B68D07DF7EAA1F4CDEFFC438B597D8943E231B5216808A85F30EDC81
9DF5DD22F54A45335B4C2203887475F39D247F0E7347BACFEAF220ED82F9263A
6488E73C1910023E505FDEB143006C1A351D441AC57F9D52D2C6D63D78C75605
999885676BBBAD56074298E0BFDACBA1830BA58E87F436CC670EE8EB1870154D
72DDBBF3794F8CAAA3F1E11DE29752DD99EAC695838A19BB67A1FA3829B6E0BC
5301610A0351AAA749F456AE31ADD87D6ABADCDD1FB3CE81C3713F48780DF407
530CB284B2AC709F52EE7AD647DEF9FA4D2A867CCEF728F3D40CF34C28D21527
10160B3DAFB5FE16AFC9D36C6EC4021FC189005862082BEA60AC72B63AD27D72
FAF3C2D89DA2648FC4C65104A069212D87144E8533CD86A6D73DC7CD9DBA25CE
7DA53B000266F3871B24663C77723703315C5E4A89DFCDBAB384AE7EB2F455AE
AB191FED406F7F6EC9E5B8276EF5C4CBA041AC7E8BCEC7CAE840154BDCA3232F
15711ABD1E867A434E9787CA0A6D1F197597DA27ED2402CB2D84ED082E8D3A39
81E6EB270DCA4E7A90E2BEBD3CBB3A2BE3CAB926192D7292CC16845B6399A543
BCFD224BB52F21352732DB5154FA3442733066CDC3E186D8AA97CD801DFBE43A
116C86889BE198DA88CA978B8C40ACB67E8F7BA499DE68A6FF0DC72C3D00BA1A
B378B39610F15CA026F95ED8155CE3FFFFA2E2FEB352DBE14CEE1669F2387B70
55B91185FBBED764266215D518716EDA3DFC9E5DB6B148A553E75AE5E38E1CFC
6EF47B314D54CF24BC13856F4F7C976BB91D143DE32FF49BFFC87E17885A1893
BA1B8E441B08EFC04F7D103C1FFBB665194B3D0920473740C55FB1C50EBCF717
A2359B687FCEAD65616EE89A68F8D91AFACAA0B238EE4AF0279AF5BE5294C3DE
A7E1F5E6248C0210E7D40683F04B12A933C746ECB517CF94BBCC6E4CF49AC715
D8005AFECBDFB7A6B417DB8A28F8E9EAF39CEC1CA64DF37A5E66A76C26F721F8
A63B003A040A62F87DCF61B298F960D510BEFA453F118E59E7DE8CA3DD002EF0
127EAF733D5C61B5132348D280F84D159809CC71A3C6F7373BBFD8D6EF715D34
0016DEFF14AA5F960BF1BB9AC304A1823722843547BB4CA5EA4C41C6C2701C8F
7BDC810443F9DF34BA469A3260009B799871BAF8523C8763544DCD0B382D44C5
F75046AFF85F0B5A3188C2EE786CEEE5496A5AF4BCB0B429CAFC403FB983EFE3
61FD9F52ADFC38E07A0FD7BACBA530D2E4DAB2592AA9564843E7E2305047F060
C5FE4243FA8FDF1B5D4F61ACA7850A604FBC6D6970959752695C90F78961B4E2
C8CFA41082B1A37405AABCEE5BA3DC2B9EA76F486117B84728EC6D8AE6379CCB
402C2AA89078EC992C00D53151E9D82C65643F549A572A20F05107A41BE5AC57
8EDE92AE20B05E2D0C98151CC92D5389A675DFE39DF546A33A84A4C534337ADE
B17C34E09145B37CE1EB1D10D42CC8D6E6B127A3809F7202381FDB88D42084CD
0AEAEB8A8288CB56870EA2BE9D0B9DC8291021CA561E2BA388DA3494E433E0EE
5E69DA51D0AC505C9F71562D3E9750F23CF14D2C8ECF0692FBBCB4A92B48B4B0
AA2163A3B9670C67D7CDBA4D5421F2A01241CED719B21FD1FFDD0A5C786D8B71
D6A0C183E57EE02710004BA25B47CB338824D7560F40B382BDA4338A2C02B3BE
B1BFAD36C649323F30FAF580B0BA100CA24CA32174B1AE755434C8540BB163E7
1AA422DB553D268C70631B80988182ECD910E31DFA7DF056AACF7D25A4C8E021
0A35ED58DFBF41CB08EFD4ECD6E80825F023C44738411DB2147CEDDEE6DB4F6A
F517976F88DB803E78AD99028EF2F2F6A93C43F1388059248EC11C62D214B0CE
1348D537A4E62C2771B6F0C49281CE9BA747224A39319AA0BDDC5A3575A75092
F4A78AAC81F189EF542EA849C6F5310F631957E6CD4C7720A4F5FC4593B43F7C
DBA6A7E92933EE6BE8EE100B3E411C70ED2AB5606CA0300F0CC76835CA612161
2D387C89EFF621E4DE9E659E463F88B99217117CE735215DB047F4477582807C
3613F962DB30F3D86B39BB351BAD24611B41F348377A602A2D96D581619FF1E0
462F8563B66E0A9510F7216D5D508AE342DD08A8A1226674657F8B55912690BE
8D182B1B87239B6219E50ABABB64E570A8A58B8504D02C5399ADE5B5D1EFB41C
E47D33596C37EC7F5E162697DB6AE7F75F36AF59BE01972D20F15455C48E0ACD
54E11361CE7C3808C90A46B388B3500E6ED9A47D25701CC2D94A4C86B4F1EF41
EA9C1152EA94E519F4D6BF023881EF20C058DA88EEA3AA27F9683C85F2843709
99DDEE77DEB4B93630BC0C734BA661BD0159E7E046E29182F0498A1DE1A31F32
A6463AC6E5AE654C23E3A51F8F17DAAF8EA752E967C518D0F8B4C8AE108675F8
97998E6F19CC0B70FAD2CE2CE20AC7C2F47266F35B0235E2A1F3B74E60B82951
3429311795C090CF2237D2CC5C578F9F8F573F469CB1768C28C863E20261C95B
4AC22395266D3E4C53FA92BC0343ED91C900553D4348DFDA79501C5FD0BE4882
DCBA26E5FC7EDDAFD9726AC0661242E7FC22863716E3323483156D2C62A3F9BF
45F942DE04794A552CCDB3988B348201D222949F7E3F96BA9033B61C6D1FE7C4
A48D29D419AFBAB5CBCDFD62360DF1F86E1B1EB94FF0D204A01DE3
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMSY9
%!PS-AdobeFont-1.0: CMSY9 003.002
%%Title: CMSY9
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSY9.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSY9 known{/CMSY9 findfont dup/UniqueID known{dup
/UniqueID get 5096650 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSY9 def
/FontBBox {-29 -958 1146 777 }readonly def
/UniqueID 5096650 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSY9.) readonly def
/FullName (CMSY9) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 3 /asteriskmath put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C29547000FCC8A580F0834F28818EBF
F29D3B2C7C9AFD969BA6D3B7429E222AF78F6DE00CE2C8008A5966422936DC5A
DE549B458EB41026E123FE75E703E046F665B7DC78298A145548DEF8D579E008
39279A5208EAF898A357DF3FD9CE4450811F20B454D86B2947BEBB11EABFC62B
187B12458E022CDBAA6EDF4A89D79300F635D8CD973E35FA8D9B1240B3D30D72
4F30444BDF0B51ABA15A181A3196A6CDF9CD1D38D64C83E745A767446641991E
23EAE067609DC2E84B44D923CC98407812813D5AEF0EA21E560B31BD77D735BD
E35EAA564A570DD3294C703E16BB9F251D54407269C8B23DEAD063018D6EB748
4204A415AAC8384025FA922E7074FA7B8A6C31FD3761E7B2737D4D9C9992B7B6
DBD0CFDBD87D42E1A451FC5C7EFAAEC65D10D278470DDF42DFABC836CF15D042
6900E0DCDD36E7153BA186B8358E74F91A1D43D62EB0B821C0E97FE63F1586D0
98F01E8F6B6F2A435343A25CDD80D3AEB42DC8E5AE02F8837B84EE5EB508B02B
6980D2349984FE1A0D3ED12355D556BA483CA078B7921FB336EDAFC22AE05C1C
5614F5025B890009272DA8C838B81913C872A54F7E932237FB1BC2CE5D64CD04
2D320C8E2E610E9EE36EAC7C28C833F8A14048E751B61D0CEB342CBAAB34D104
311B421B8CE4D903D2E2518BA8B734E2637E2CA55426C4A87EEBCE637F8D71F1
54626C52083262A5A9A3B49142948BC1AC0B7698811AE81FC3D3B1C14E6C274E
CFD6C480514F3649D7725A0A14C82C9D537B1C5A9ADC816340B8B4E484AF55AA
905EA936A83FE2BE788D084469008F407447E0077417096333F163CE94CD3098
4B9712EE23120829AE2695EA63975492DB2615214B11C87ED0ADB776ED4BA0B1
40D09D1A617D4F57EE1A9B05C8D5F42AECB9C6AE67757DE6307B1A9C467123DA
773239976AB0EA052B23F263031ACABEC9EEC7A43ACD0DC2D7AD66664FB0D937
6A0F463A173E8B90B2596DD323D2350435D9D31B638112D70492F44769FC0C6B
40A291FE78AA598CAFC19E5AD195BE7264F0EC29305D36C7AB8F2A733797D75D
94C8F7AAFC49C13C108F514745A394F460294C6F3F44162BBFA878F773A5115F
062E934253B786DA2B9A6E8E843E06B97075BE99F21B330D6684998C5C340B72
09D69B655097354CB682D42120ABF5109E5522ABEC94D05E7211DACE8737A1A9
0BD3EC16F48798E67C7C85560D79366504BBFE5F7F5EC1B05B9F68F98149A02E
E53F321C213456D802C01871E9024F965258F71215F40EA71057C15E349F06A3
A016BF1B7E44DC4766FC92EE500EBF7C47D36B1EA34981EE6FE38FF4903466A8
C9020B91CFC731642003AAEB145EC0F13D6281B0838BB4236C220F6F467F7DCB
C79BB9CD5B6A180DD2ED7F94DA6B5CB833E62E898BE832DF601BFBC8148F9430
C8AC459F23EA2536E301C9DFD3FFBAF4D01E7853B60A69B5D012DCC0054C0BA2
1293D3B4EEDF7C5C78118138544A60FB1A500F72BA39E63EF5D97D68369850E6
9B6336DA577128DE68FEB71877360D97204B5F3C06E808BF95AA6D6013524BCC
85CBA9FD2CFEF383645E7E960E7AD471A6A3B8B8C3A0A0B8464836499309D82F
52004FCDB68997BAD9E4B5B881634FE1213283B6B19308BB67F2364F7ECD5534
467EF07CBE71989FFCBC6224417C0710EB3EF2676B9DE846E7FFB1AA6608EC9A
76C31724A19ABB2AD08CC102F5DE8E4E513F90A53F06D440A66B000CCAF6AD12
6F4B161B56FA5FAED65A24FA183B84F4B45407AA69624068EE0E3E47BBE973CA
C72137823F1D676131C8CD5070092CD73FC2A93E0480310E21CFB14C031206AB
411694AFE7B639ACF35C28705A115E98BC69C66F6C58E9E79902453798D76267
29B780AFB6B895B34CBEA51530E8300569EE4D500527BA294282FED81F730A46
6ED19AA5AD45852739882216EE937FC45D75116BBDBA6FF4B4423B398E383CCD
A7D705B8BA85076133E823300C3EFC9EB9399575F5F6BBF868265304B299AD77
B6B4EEA04C83E163E8CE2BFACA65F9DAAE3AD2B0F8DA1F986E6A12DDB2AFACD2
217E37B093F46FF3E20E587A9490401C2833F5844763FE2C528E151214E8CA95
018E1D8D47C9EB5FB4F0EA2A6D064680DEFD2C5489298F83B58EA7FA8CB019E0
671028C59C3E007DD86CD247889ECFA6AD6DA2433B02180DCE6ECF9E495D0976
D063A61B007233DED5E3F351D790F26D4011582735A69F37E7CCBB0AF254B925
B378522B748BD9BF152E2187DEA12BB168C42AD8D67D18567393B35DB2AD8403
5A7093EB59FC276525B8796FE81944F7F03349BB077110E182A61754ADECECD8
A5255DBADB523F3DC251A7D97F17DC76281CC632FAEB382A972D60A15FDDA57E
2F42AA338D889B47F6A3C1FADAFA8D11D63EF8D0C8C0FCE61FBD8AD34EB8DB3B
722BD86CE5B1268F704ACE82A39466DC2D96C9849B9422567FA5E728B17FAF61
59A77E9B3289DB807DF54D076139E3DFE176C3131FA4540C1542AE5AD6200FCD
B92D5DAA77DD4D3022049B6EA2A037FE96E0CEBB1608C663F1373246FA74D70A
BAE7BD37F3AC23E003204FA8270B4514DE1FDC5401B69CBC98A67A5CAB5505F2
87C242B6ECC86E88EEF44B9C79DA5F88CFADAE8B4CF437A7CBD5E0C01A9BC479
E92EA48C808820C567E74D62ED7597FCEC53DE9A0B3EBB9A3FB50AEACAB82BF9
2AA56D029357AAE016582592972ED01C0ADE565E87607F17BCF4983E3321F606
ED664B9516D404B277C2C1B0F873D469D64A9744D9C1897125FD471E71BE060B
A3A617DC8D812E184664BD83EC74EEB5197611380F2D859E1A61A14404493D04
B5537C04541E557CB5039905F37E72B762EBD2321633E12C38C409338AD5AAD3
1A507BB2B8F5235F0614D0CEC2BE44CAD504C9B2CD3E45437A493A33B9BF8A1C
3FE66B1E673449A54E8E3C3470688E94EE4404C888583F7C96B43A592D586D25
8AC1F206EE5FBF3AFF7EDF9BA91EEC6BABD573D455E0AD6802E7E23A662D4F12
FDDA00EA054CD331DF86C099C4BE8AB4EAF5D8EC1BFEFCF50302BE61E6FF26D8
1E88C544570E8D6F7D875466C70AA91D6CCD4DF4BBA34FC67191D1692D3FB76A
66F114152956A5E38345E7495BEB1A389B7D0A59624ABA784F77C1BF7728E556
F9D97D71858D61624C22C6914A3A995BD75922A2C37EF2CA91F923A4561CD3D5
2DCEACD9C3A65A9FAFFFA4822E79D6D89D6366DA6362DB16FF061840582DA35D
E4EE8308040C2DA5F298944EED470D6E4E1FF58DFDDA96C20C85E2DF2652E12B
2EFB8F890D301E8CE777678FA786E552A62A60DFC369AF4BDC069F5457FC86F5
1FB1A38A2222EEE86FE1AC9A8227663AE33217C1F381115CCD04D2F381A27E97
36D356DC64615AD63E1952B37AD4F967317D76A6DEF039CE8446AA634086BFB7
7B0B34F595B61ACEB346F51ED10ADDB7B852B5B2BCFE416D0435A7CAA4C9D9A6
152D9AD938F39E9756AC752F1604D884992BAD768C720C45479F5AD8E53A4832
1B44D6109DE4460A662DA6081465E2BE02ACBEB52259E046767DA24E1416FF44
D5AA1D303CC4249510D703CC6CD0FD7DDB078A91089FD86ACE1721F875F019B9
82D7C5B2530567F2306F47DE90EADDCD12AA1C693B1982827DC36A74C86474B7
0A8A2E084CA403AF654E2F8488806B943E38ABF544ECD45FECDC441DD970B180
FF3FFF1A50D5E22216B240A527F95DA1E43770A3867F225DD2A8AF01A965E06E
A063997C4CDC0B16B52F9B9C8B0DBA94F88F26A7A01E596DCF8F33DA3DA5B02D
2ACF771F25A1372F521A80B93DB0337886FCAC0A2E8FAE0D7E1E0C31EB43AE3D
B4C2020F322A9857A9EADFA7782CA70DE7421B9A83DE1873EED8D096701370B7
7EC33B9C104E9CC16DF8C80ED24D1F91677E355DF037621ABBB75E09ACDBEB82
30F1AFB82FAEC4D9E2DA93303F72C1078679EDDA35ABF2AB38DFF091AEB273CC
5A7B29C0164977160CA75F62BC20474C7C1F127AE7E4DE865FBCEF852698AB80
B61340CAB6F86017FEF570104E46B6FB3320E78D387CC58DF1C4FAD8570C0126
B6F54AB5BCD47904A9255366AC9C88576456D3CF605822269CC65979EC3CC740
AE3D09257BA3AC7A364A7F5EECA3E658AA20B53423553C416D98FD8100D80A30
A1B19F029B7473070D7C60CDE51BBEEFD2B45B1C82F4FE32A5BB6BB5BC32BBB8
F600ABE893B83B806A5435AE2B40E5CEA9068C6ABBCE73C9B3533520439F28F5
E171DB1DD90B2EC04A1F36767B2B97D4EC0FBF217D4E80ADA5383BADCD7E066F
5F4B23738A14F19AC7D765119AAC9AB6CD0A8AD4EAF8955CB9F5BDB0156CACFF
236D24E8A12AEBA549FAA9D7053D10AB7094B5D9B86FC7375E245EA8D7FC64B9
859A1A37C006E0449AA8DB8B89730348C71C7E014A2EF8D871AAA856407C33C9
392720173DA60850938D0537564455C3957631AC8F8C0B3B29BF6163828796E6
0944C3000B990715188203B32BC4E3FCDF173A4A9C78753AB7D76BB9A4C2DA4E
3EC638753D6FF6356EBB07D0A9E8D3F50EA5451FB6C836B9E5EBB8F1331C8CA0
B0CD271AF316502CBE87F652B5ACCD43176AAA32C6530C69E77E3C85DA496F3C
06980ACA739DECB5D986622AD81F204579218660EA791774C2D11878DE23F858
BBC4ABC7EBA01B7FEBB32BC914FEA8E5720731FD43F8A5CC53954D13455827EE
9C7BADAE8322E77EE7413D6C86E6D378FF8044F50F529E765A1CAC29E8B1D91E
CD40F70F2D4890E0FD04502933212D5AB176DB143831958605C1667B8841E770
CB4D513DF0C3182C23CA653A7A714B2A8DE29D6B203F5A9481E0CF3FF073FC6F
476B0B205136DA43650A940035A970584DD7D06B7CDA8E960186158B75FE3917
9B1D0FFE45EE1606C875DF635B80F5A9E5B67A6ED748F52A53A710A45AC20BCF
FC96755E685A3B0712D5E09D860986C61C631A8D2A505C57D57C1D4AE78C552C
DC5C9EE15B82A4C3020331B78FDEFDE53974C391F375E8118EB7B2D23DFA3F15
389043EB6F33842C82B896073760197B13D3DAC172D77779DF517AE31BAC43BF
5BD6F75B59AAA59C7EB81B776FADB720282DC06BBC9C33AF5AC0BC59F6A0044E
3898A4B5868EF32BC4F980DD863E8EDF6DE3E753A7B3E39F8E8BCB3D3BF14EDE
3395E73BD07440FCE88FB28A96878E823C1E5519650F2054EC2CF733EB8AEB0D
510E5659A3179C3FA8E31EED621BE0EA648D76C370C3CBD8043BE206F28699D7
5871DA483AA5D3580CD55902C85DB9EF5CF5D3191738FE64DB42410F5AB8ACFC
CE07E524BECA5633B082F4793002A4A7215AD1BA31159A30D72AC60EDD0B2BAF
73C9934C85C5372B47BCD3ECEE463CADC05CE8352EC1399ABE2465AA53E5965E
79400336B1F5D1401EE2DA5807F9701D1086DE505F6AD4E64DD4F3E5E90CD64D
FDD25E6FA03B679597CFB8C5C1F03641CEB7B9B40787E70BC6B063621382E3D5
1287365426E44A2EA208C26155CDF782F404CA7B3C6D379103EF4A51CA3F1343
22B04A0B55CE5A7633175838B9E50480E9B80446CD3B541362E7A10BB3C58A42
88C0FF580B4A0296073F5B6505E4FCCA5D4BA2F7E8D59BB04EC9ED4E664BC2BB
8754777594DB26DA0985663D321CCD13FB261BE8A771470DDDA783493E452A87
D0AD01AFF8EDCB7BB159F1408FBCC52F126C46234CE6BEF241B49472102598D6
91FF2DCBA2CD0E6658A61DB3591EA02E4DF202954B655C5A3C34B14CB60CF9C9
2A6683AB282DFD79B33FF3A6AA524582F174F11A5568159083496B242ACD2770
0ACE8473D363AC11250E5DCDCD3CB2281B71FCEB8AAC1367D0714796AF3BF01E
80BD4B05A0A45E6CFA6C672850B9DF113F5EB15923ED885A0E4488D4914B62A2
FAFB6A63F8AF0CF0DA498E1BA68C4150B6E59CBA80BD17026FA09920006D2075
BC6F1010D0A10648A20D8ABF8137BFCD6A5DB3606F6B3CA51E8A4645D32E5966
6DFF7537F65DA4268A86BCA5791C21F5FA9F4C2F1F6C1AFC4D4BADFA63609C4F
5F5158608E6FFD9C5BF00646C3AAB983DDA5E37A9C2EA81796B161A06201FB6F
8EACE87008EE7A008BFBA69AAC04D73A8C0447FADA0249D8861ED405537E23E7
BE68C4349FD64A14E3A53D6C6484E704BE4AD5FA0269F56D3B752A070D9872FD
A5CEE543B413F13CC4CFABCE885BA4533EA0969FDADC14DE6846B330552CFD60
A75BC8C9DDA76102E48DB6B81975A1F3FBE182CEF410841CC6164AFA0CE51FD6
8E8E6F0971277052E21126909B5EE51508306B886E945C11DFFE1C91BD0D79E4
554CC7D6A774C9B98610A1E49C3326D62F157CA9D89B56699F32DBB9D49C716D
CBDEC052133F8E18E8F3D7A59008398AF3E4E1192CFFE4D0B7D2ECC8DE2ABC1D
4DF7F2EA5EC0DD756CB2FF9F95FF10E506463D3037BABD221C08506FA603DE1C
DC45A5998921C4023E501DBA494C1F41C0955A761AC3D5B13A88EC4F0BF40756
BAE8645EA76027B8AF74726521DC129B9AED4BAE67A511EA56EE9D0D8D30C7F6
FA8BB890375A263A0BC4E9CBBBB8F8F8613A43B10E964F8CBD6BAA2B0BAA70C4
4CFAF6EBF4882B610AE13689823D37B046FD26DA85BD96B896CBDAB6662573D0
2CB87D45A86A016146513441BF7A748F1E9C2AC7172460EA628BFB22F9797905
F6DF6749F13C7F234A2CE4829D41E0F53EF3C5F52165297AAC4B5AF4747A9F53
60370B4C0110DBB42C25308F489A856B6664371FC2126BAF4710790021255653
CACDE1B9ED6AF5C696C3D8BEA4698DD9045B3004A5C4C03EA994A5445C9D4EB9
865266850047E28F2D82A08617E9283FE637CFAE4F7F261CC2D616A8C746EF23
7360553A6B434201944C04B1522533C61F615A20BA3678AF8D4BAD1FB548D82C
72D41699FB96EF40ABBABDEE633F05B4445BFC4E6E661DCBC8EC473BD2BBAF7F
75F7FC86CC7B1F3A2343EDEDF6B5F7E98A0BC4443E21611F4D807FE7F597A37A
A4DAF8A8E6D04FEFB320E0E25C61E156A72A3E4A69EDA04B0E3B72B69FC19E63
AA33A682663A8F37F4FFC1533CCA2A80DAA675DD723A7E13D9DAE3BB0F5F3E07
99BAB9B9BCFB29B73FC76EFA02F4F632690651DAAEC2B3688B636F0FCB156047
F8EF7239716BE5D3DB2FD1DAEEC11DC2D65CFBEDC1C950CA737A04FCCCA509C4
7E47664E160322366F70CCC641B9B49192AB839E0AC609AB2FDD3783095293C3
11C56740FB50D23AE9FEAF66DB13F35367B562F15161AA270EE44713881B2387
7889FD10198AD4D750390811714DAE7A8DC6F5770224E93408F8CCD4F8712A9B
3C583C983D98CCA7FF9DDDEF8AFA292781B1D7089336CA631413EA0728353E8B
3650EDED7ABB6E5DB5B85014A3A9C4C76EBB664A5B3E0F3CB2ECFBB6294F5C4F
69EA3AC8C071B122B129A28E04FE989DA9670EB6246806A516517DDBC52DC001
4C027D51EF1F98506F21E63D57FEF267B913F1ED4770D892239222F3A9035C35
FFA38D1AF3ED9A8C02235D7422695D30A2F801389DADF34CDC489EEB38089B6B
026D884EE1C24FE5785C383B988FFFEB5459A1644CA44D353503AE117E87F956
393DEF6C47D4E1C5B1A33835C9B8E1B98809DFEE43C4D6DBEF1C2B1ADE4B8F13
3B5D224C25927433D5738B0FE019CB88B1F373E4AC2BDB5BD86887FCFC50FA1F
3E01CC550BE5FA0703E1B89486C67E8A16C560DBC051028078BEF85B349D3058
55D633040BF5853FE9E50A671CA0A088959B2AACA1B614DBDBD906FBCB6A6B13
7ED6C5BF448F92E9EB110ECAEADA36CADF4B6D79703CA2EA9BBCC810A6E3532F
63C155FB86CBF6A6049D730B4729C613BD759AF3742399C6B118C1D2B38FBC4A
22154122B3E325ACA78A9D418FB443FB334F67F8BD2D33A8491FB2E85BA2BB40
F538F5DCA031BB3A7E6FB3A4739D0E8B81CA2C85963E65D86552C771BEA7D233
62F1811CA91DF9091D9A45D022D215152A2D63B0547C3A80EF52AEF1B3E5196D
D8E54FEF4CD779A9026A17CF3DFD14A0B45A64A15211E85A77D3C62424906B6F
BF2F8DA73DDE063FA68FCEFB994C12316791CDC24C08557175275FB1A0F5D09F
F6248BF9DD6AF1897E337230837D8190D2E06CD1BF023F1C37C1821012E5CE9E
955185656FE232F3F2E0551699BBC31A4C9259C38E292209750511EF02B9C53C
5C549FBA73083447A151841AD245D7F545AADACF01EB9C336764F674273E74F3
25ADCFB1879526F9E87AC1AFD391AA66C9ACB0E2AFA717F915E39719AB399D6C
A43CE2DE9B9944B07B96C57FBBB4821D1E5AEC2F5C366A3A2CE0552422F243C7
A1A78CAF7F20C97094011E5C1167D75674E3A7618BC9
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMMI9
%!PS-AdobeFont-1.0: CMMI9 003.002
%%Title: CMMI9
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI9.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI9 known{/CMMI9 findfont dup/UniqueID known{dup
/UniqueID get 5087384 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI9 def
/FontBBox {-29 -250 1075 750 }readonly def
/UniqueID 5087384 def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI9.) readonly def
/FullName (CMMI9) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 59 /comma put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBD07FC5A8862A8DB
7E2B90C16137614CDAFB584A32E50C0935109679E31306B8BDD29F1756946A67
7A7C2D9BA6FAB9B20A424AA0E6F4BA64C2801C2FB5A1156CBEED0ACB95F697B8
BC2A6E6AA7EB1F9FD8E3C9B1A16697EE1F0E7400421A7765AB218FC837A49365
82DC6B2C877A7DA84A81E6126EE96DB25C17A207D3020A045DCDAA064360DFFC
E3CD50E21ED239D2A6450D04F879A26443ADEB6A20ACC504989876476C7D1A74
91564FEA1F4CC2C8C8FDF666DB537F315AE1886C73CB5B00E67E7B398A6C018E
540EAEE98BB8136C4F044EDD63C33431D2CF9740F051DF365A4045D9D8782112
7BB5D494D9235BA98CF2F30CB119F5A904C32AD04C960C43FC1F5FD8DA7D90D8
93AFB59F3FF4F796481AE2A7548F948FECFC6C127C4D3F159B08F206AE8C296D
EE470DB2F879EA79475E029D22D7A8535C09A18689DB0609CC233E5199C02756
972CC9C94D9FCE264DEE5D75C8D651E4E2D1189AD9588CB815722BB5EE3C379A
6F31C2E6AE1AE4CCEB29766190AFA20EA937114978752189F1A9F42B39483149
796FCFA123BA9CCD1D9BE28289660BCAE16C40B5B504058D55CFCBFB4F4E3D94
DDBF39F157E63946534DA81C018B1C01B9F10DDB55E0A5C2B3985ED1977C039B
D6755EA42CD09E27751E159C30B93F376DBE61CD3AED34BA36A768F232EB3B80
E3E6B77C4A48D408217818E398B83D995AB6BC871F20991DF57313D6EB0C793D
0F28088EBDB7F38DAF7E01AAB3476EC24D7BB38A9889A7D3038D930FF4289B83
F54A7BE1E2D98A3822098D2E4D067A0D400C20C0B2B4BBD74C13ED1B827490F9
ECF48F8C3994C1C5AAC9CF783BFA4F307528F51EAB55F961808A42ED53F00C97
72A432EAEDCFCFB622389BDA707B6ACC9433B065CF29EBFE93AD14B8ECD5F47F
F073F11822C49B8BE924CDFA6348C3A75E9BB9BF3F31C41716B34794B28CDAC9
4DB8B087E180A9B3B17680F73D9C12C8D86A922C948093629F5D7F542ED882A1
692F4F6696865E53E3E2DD43B2D5E8C989CFAA5CA5C4C5999045E170BDE9921C
BACD6F2863F5553EAB2BA2D4A9034729EC0C4201DE90DA89B0A27C5A5C974109
4E37BFB3F46B3A506169FB0C68E1CAFC844419A8D261A1FD86A3BB78E33D5FB1
CFC687A5975987CE45155E5FDFAF0CC5FD5568CB1C26212F92E88255F0549F59
41B33125946DE43436BEC00804063FBF03EC796E3361B1C852EC3038D107F80A
9198968265D5488B26D7670B22C2D75EDFFD1B7B4AAFA36DFD94640C9D0E2D20
5BCA18683EFB91834A3939AB8EB60E2F09655BE003582634C52770DA9668C292
2E02929D812EE2B0CC65F020064AD5BDAC5F5693B30508F40ED8E20E87149BD5
8DD41AFF83FD1944804017DC5A04512E593549FFFAE501131CE2FDB65EFD0B8B
33809CBAEE411B3941C241550B9C30DD28088708F1C0CC3125CBEDCD985EAD28
03313741F67DB5744A87B381147D5BA70AE1145C27F794854628D87D6C1ECCA1
749E3465B950175D3C3F40E344297BD92D3190041A4392033A79BEAEAABB8DBE
CC14E39612F43721CFAE6F79074429221CA588AA2501DE520A464DE157A03AFE
3C082FAE7628FC0C57FFC61D0330AE6332D20FDBB09BF36848FE05E782D6379F
64F9C82C45402481B0A35989027F9756BF5A79DA2D96E10F39167ADB4305578F
90B509B6891338FA1D67DCFD61804AA6621526B2EE4769589A2646581712AC05
DA6E98D16494F07D612743058F54FEE516BD89A8EC3E03F9D7F905175D3412C8
F7329077FD6EB25213F3CAC94BA0C3363B759401B6EF7548C7D709F3241D030D
4EB46A1AE81863C412BDDAEA6084C37143A4C5E41BC646315B1CD09F934186CF
49D1D8239E363A435307030BD79536B50B723A39DD763DB539F24A10DDA12BD4
E467339D2D6DB177D6FC539FA77D2DE4118EBAC161E928749F7C753ADEF86117
58619F1155C563DF2E11ACA8347908B98113AED58FCD0394150EEC94B7F986EE
88BF7171D208D8F1774B1DD478F0C2958AE372D257E7EDF0F6B5D6059CC4D5D3
B00FCBD2E9CBE79235B9A5A3E943CC27AABB58728C95C7DBD4F4A1F8A4DA99AE
7377B0CC0BFBD454794398AE0D5F7281771FFE87B25A819F36E692286A42D776
01794A43CA9BB30FB8FFDAAF014F909A369E34C2F6C75B7D4EB9DB0580E33F46
19654443AFF8384B95600B86FF8E41FEFD032355626D60C7507C058EF832DF41
194B48A36F11082D1DCF4723E21401E0C7447AABFAB4639B26E3D2730E348F55
53EBFF39CDD03E06E2FA5FB379603C879EDB7E1A10F89695C9C47DEEE52BE0A3
F446F187AB9D7E93E6F9387F21129034F36DF40605D28FD526AF82CA9D232BE4
412567F06B38ECCD496EF40A7B243E46C9FEBA4F1BF4B1ECA029C5EC239353D6
C0B100BF7E7DB33BD1277DE104F15AA19F37340A777741AD1AD693BC76DA48CC
C6F83CD84591ECFEE375979972B0FAC4C10B625E4BFB261B9FFFA83C31DA0108
4FFB6377466E9739E0EB64424BD9FC7239C7DD834EC6788A0F97FE714AF92831
E1BA36A8A9E24739F1DC82DC26CC3CE28C210AA7C569B19E1784D663A0CA4E81
AFF43E86D6F5F63778847700072CEB77A4EB946DC1F23DBC00BCE773203F76DF
00F0B085F31420672974DDC642D885E95BA6BBE43E1CA8ABF464D9881CDECC7A
E98E31B9754C9B72A8BD5CF6D4D214DBC3BA7A0CDF6635953F5AC1E7639C4A91
C7AECE4C75CA3389C348F656FC2CC96C84C85A926237B6504DB51937C9CFCDAC
B75C31ED570D180757884E27757783DB2D5F35ECC48C496CDA342D49AA947BF8
2FDAD2F19DFE8CD1C76A8FA08F33681F3E12E229D7DAB45BE3A3F258B5ED4980
F15340CF20D965252843E026803E8AEE736EC41CCA82167401977AB719AA2F50
0B791EEAA82027B3C712D2EB9D14BF8F94FBDE2227609BCAC41EC08DE2BAC023
28352F913F7DF08D4E1C66E83F764578B22B4EB7191E852B91ADCCB1BCFDB1F4
E63DFD152E86FA9DE9BC8908130EFDE29CC4401339C05B5B9764CF8EFF14951A
C6C13AF979546996BF22F2B96D3D585B90CD27DADEC78914DA48432C6ACBDD42
20EF583FD41F2F6D6D10C3DF7DD077304B5940BB0462656E306CBD91EB9B756B
7014B1884A36201EC582FC9345C386043DD2818FC301EF78791C1D7854F8FACE
5DE9801DE9F59D5B4271E003AB897B2EF49501589D681D59CFFD9B03F722EEF4
74ABD29997515DA3591496B62666744EA76DCA45504F8075C0652D6779DBEAE4
90430C2945FBD60AD53B51DDBEFC7ED703C418B4B244C8FFA5A3C1B7600C5A55
3EBDB93C16AC191C3A28EB2279BD3F0D67C826BC6A73D3C0AD02262368AB4621
98A1605F2887BC5880E1AF2780330E0FD01D7CAACBB0F008A42C427F38236066
54799594E515B289044BAC4DADF8B3686B4372C5110201221FDA923F131E07E7
93C44BAD406838BA4D1C277EF74098B8C0EDC41EEDD58C195D7DFF5FEDBF96FC
19CEBC6C3006DD2CBF76916B4298BB915663C2F61AFD7747E03A03BD7280197A
9DA590E3D081C6F53DBF94E8D6FDDDD910A70AB18A0F6D48A590FFAB314D6CFD
E3FB20C1F3C91063F00726A2C13A3D48323F9854839405E5A29D66A43E6E2B84
A8B3765F1D817071D4D6FF42BC785C2D11AB2B9452F141696CE19C6AFB9777DB
107D6E22D8CC6C26440BC48248AD8805C4329D46BF433741CB519B21663392DA
5DC7FC9BF37E5BC396BFADD7263D09F6B4D69594AB386B7BDFCF3BACB97A0E08
22013E716E642592A20136CF9CFD61D4E515D80E06A4CB4FC9D9B916C93CEA95
B83B98C48CF36C1D02291D4F5C0419338D64E33C90C90EDD2BA3B96D70FAFE0D
403A060CFF448D3E28A9B1E3916018465E86095BAAB4706CF7ED350D7C554789
D7F4FE5F180767DE8739259E68CF142040BE1E2E8C6152DE3417C1FAEA7584B6
20781DC4A9796431EE713DAC4E713C839D7A4FDC8AB6BFEFFE767AFD8B67FDA6
943AD387E5D3BCB09039ADB64ECC2BE2620C6EC269E708DD06C311F450099E33
AF46AEC644222E7DC4DBB9371EE12CFBC4F9B27AB46AD1DA96CE006E1DF8291F
A550A93026CBFFC1087B134EC6EA76F5E109CDA58FF47338A0039A786A575F70
B8A03A4F9C8D07A4C856C77D9BCC8E3EAA740172D0C2D0A15BA35C9E5717D7FA
2691774DDE730BB9D7C70D7AE103DB8D35F3728470C76EBA0E670634E1A0BA84
2FA102BAD7271DF2680D86A4CA6FC353869987700E5E3FD778165456033D624F
E9B3E80EBF431ACC934AA0357E824B8AD73E222B510DE8445C55C07C8E5DE46D
E478F832BDDECAF2EBB11941DCF84CCD887043FAED9AA90D12BC8CA9A0C8D94F
8D3BF1F80B14B6CAE6BB1C6AA405AA64BB94D5A82CFEA548BA070796A02F9642
87326D066101435AB9EB40BA9EA9E61B363F5F5E3B924369796E8B78DE3414A4
2B79C6A13ECB2F34E6299658D07D2B3DEF3D4383CE009A927F0EF5C196652842
D96B857AB5E905201E7E8BA21A5EBED1FC6863BA9A1A6E5390407F75055E2EEC
512FBDB3E82CEA13663F1A1944DA072C765D8CED06AB461470C5723BDC1271D4
4D1D049D3EB131743F1EC9A6ADDAA038ACA2C41D139DC6A84EC3C61AC7F1E559
6155CC2F49171F6E07CF56D721D9728E87FC7DCBCAC46455A3694C765FE807E9
9CBC2D304AF37E0F28CCB22F239541B53A4D24D09C662559267467EA487BD33A
0BEFD4899B581D20582930703A868655C31BE935364CA6A95FBCB22CB714C040
9718824DFE97929D0482430726CCB5A5307957DD2432A9B6271E849148DEB76B
FAA290FF6D0B18DC5B76407852E81C105EC6CFAB0F620C6DC9DA555A33C167B1
430A8BC338BFC7D75B7099CC906AD923FA107C74D3FBB719D77A4E5A685FF9D8
56424EE4AA074434B809D894ED50F6A60A035C5223EA25DD8983B9B34210DABE
718D7B2BEB293FF1B63CFB1CBDAFC69552963D90F5E3FF533A3FDBB626E9FAA3
F3C119E5E01C7BFF832A033C3515BF049E29558B1DAD652F2888E339E67D15AE
95F9BD14E3253DFE9072B24C0E7E85025B71096AF51C86AECB2921126A43156B
EC812B32B1164BD9B2B947D503C015616DBF2024F5C8CB3236C1DCA653D661FE
6B1C19A22D272A176B7F1B7F9E67AF40DB0EFD4940E58B2A050249CA4E55CAF7
6ACFD84FB46FEF952D18552B3972D79D808B4C263B8C7E1BB647A2D03E102867
630D5C3F2C917F765A4F6FB8106BA6A9D0093E27A4CB6049C2371287D94B5111
6E7020776EBD744C6C920464BBBC0AC206033E8240017F8CCB112596ECD7CAFA
89950CF43FD87ACA750C03A778A37FBCE9C82C2F5ABB135BB02DA8E8C0D24475
3BEA9D79372D0022FF1ABD378C151417DBC69FE5C9CA38D23A3900E34BF924A2
90777ACDC37930B67DD44A2E76DDBD9B89598D5F626BFD325A978D277265DA47
38CFAF16E7FF1946E15F41CA73F7B4B02E5AE8FC4C37B115BC567E4EEEFEFC34
EC8974B1465AE57759EDDA28DD38A9210871D35D331AE1BE6097C3EC21C770C9
B25D040B2ECCC3AEB1EA1BF99E0C2C0F192C13BB9152CFCF75332E03F9CEC376
9B8C285A35F53655BE38713E09AE34BA2DA9C06FA42A6FD2D00CBF2AFD2BADB9
1571629C65DA38A431710CF5B01FCA68E8B8569922FBC3F9B64A5509B6F677AF
1B97E91FFFEB6308AB68AC58F9BA43DB5E764021E75B56170EB44C2C0A7DB86C
62B8982256D3621EBE3DB3994DBF5C5A14CF34B4AF3BD5697F8E3203085DE9D5
84B0598169760B925463E93DC87CE70AF4C2DF0F4287D2F2069847BCCF7A37A2
AD451D5ACE4DBCCB2E14D5DF38B226952E7446BF87BEC736EF3D5AE793304618
D66D3299AB9F9CA1D13F134FAEDF36750046E27706C7CBD8E0877BB6276E5196
BC2A355D109C0253644918E1CC11B717DE6FBDA201E769812752888CD66268F6
4ACF4A9449378F9F9923D584BA1B51F33663BE7A306887BC14A37E3C5A4654E6
531D6EB63DE3946BD8BA95CFB037991174F36D61D842071E6625605CAA350A24
FE551025D10871FE0E2599A63900C8520EF4911C53A03897C8BEE152451708E2
43FCF4E700C583A5E8DBCC03BF9CAB864DBD19E1760945DEA0EC0BA38BEA8256
D3A8D4F70F6685A99C6BD2BA8B412A26C002D76138CFCC7DF6802931E5D97BA6
0151F6A4C572235B4196B22B7B2D14B32886DF0D2CA8A277ABAAC53B63F64CE4
E4C088192AAB674497E8AF81961359C389B51F4A257373D907C615030BFBEF53
DBD99058FD06E352450B658478C10454AC8FC0232B70D5CB916981978053E358
99D322A07294748BA427FFD1E45C909171017B52B7C742FD77A8560852D819DD
8DD53211A14D7B2FD11E42941722FD3985D627FDAF87EB57326A0D290B5077D1
8A4230BEB40523A8565F95E0D44F036A571DB698EDD9D94FEC9512369E5E5E73
A3CA5C142617944F4F99C0697ED088ACAC007FCE06E5A6EDE7D0E03A3399DCE5
362271BC31533866BA79FD1FB3F608B22CCD4111FFB1BA35D920A23AD157C6B3
C3DAE11069D5E46DEDA7158C6478D8B8C0D9DC237CDF0CC6633911673C43FB79
E4F9B7F27495201E5ADE66255BC2CBE9D9F237DECB62A19D62CB41A1C92432D2
07F0629E913A71B3F1AAF8B8C5AC66D3C8605A48F8913E39C859E163DB1DBC8F
0ACFEE80A40B6172032E95A76B752B873FB4DF23CF3A655AF1A1B88C8DC156C6
190DE72973950565454C0A188A33395FD3D529A88F2B578356DE8EBBC12F04C4
5B899F667D9E6F3A4EC6DD8DE71FD4C2E2B6D56823EE4E0526679D71FF1B868D
F261489F06F97B010CCBE640E2F57BA3DC3332B329F7958394BA9777D833AB50
005E8E9232547104065ACE33396772B0E0BD66D2C6CC54DEDD071E444D8C95F8
6F88B31E20FDB80F77C83151B7E25BD3736B4F9BDC52EE78C41E9475E5A6D94C
D348AB42F5E36B4F167D29EBDFBD43B03F77EB296B06A36880FF17D412E77EA9
F2E7C25FD05E16BEC6732681EA21AC3FF6893B93FC09316A370CDDB86D9E6087
F6042C3F9ECD742778389170F5F041329782FB9F9702F7533E51F355F71825AE
2BF4F8FE50D413AC9A20C41B42537FDBE8DDC5A5C793D3760C1EE13716068752
F0AF10812250BEDFB4D7133FD58F4587BACD572505C84A7D3802D27443175FE0
0D89C3398B55176D8642AFBAB5CBCDFD6220C8488564B4306D74A58CD2921AAD
73CF803C754DAC2F30A5324886E273064FA51781D5BC596BFEDDCE3982EA1AA2
62CA7BAA1B16C6EBB99B2AAC4E6C9CEFB3D10F19987045C4918DB239E6E63D79
5F44B9D097118D081153AFF96E5EB39CBFBB99A3BE30909F614869031358EB98
F07A97EA78AE50375941B2474DB46AF3305F2B208D45921F93743A6CB8AC584F
6BEBE25ECAADD5A789EF60C9F54446687E7B030DA3E5243189F02BA46BFD28B7
DC14822E136AC7E40CE20458DDBF356488045C95907363864CD6943643BF0109
EE027A3091C11EA392EA91320EBFEA3B857370AD8EB86D73F035A476F7058222
E8CDE78CA1AA9EA69A8AA6EBFF3E67324C567B914134DE042D6F8F18A9373107
536E8D90189917D343F5299024239E2EC1D2D177D82DC8E344A7CF2AC71AEC18
36F139E7A4EB59A67192BCA9ED0EB25DE13032F6FEAFC3B1F4FC81BB0EDC41DF
B9EB92618667C59EA499B788CD26C2137D70F1B0AF793AF5AD0D0941F2E746E3
F5A7F0288BC1EE11E982EAAE763CA422D72FBBC0D754AD58FBF92629DC8866A0
431213513744DB48E52EFC89C83FEB082588E4F30D7DA77BB598E51CAE7E4900
5CD570C914EFBA426BAFF7A56FC775ECF5BE13F2C42E51EF96784E5201C0B64C
074AC229FF187C3A3B237EC2AAD7B24F09528EC964627B71910A1F2635E3FC2C
1D745C947B6DA3A5518789DFBA7135B0A16C456ADD667A32C57C08F239297E32
592C9F6A79CC8FAE5573ACBFBE53AD87A079F6788F1C2005E50CDAFDE7A27BF6
C33A30C1CC26555266FC7159A02538F30655CE545CB5581D0FAC598CC86522A5
FEBF9430DCAC6B55DEF410E18C5D850B48DFF45DA5B1E7EB0DBDC6451616639A
A03C95B38E3A90554F39932AB33CDC26BEA522F5F0
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR9
%!PS-AdobeFont-1.0: CMR9 003.002
%%Title: CMR9
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR9.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR9 known{/CMR9 findfont dup/UniqueID known{dup
/UniqueID get 5000792 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR9 def
/FontBBox {-39 -250 1036 750 }readonly def
/UniqueID 5000792 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR9.) readonly def
/FullName (CMR9) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9AF72336CC4AD340
15A449513D5F74BFB9A68ABC471020464E3E6E33008238B123DEDE18557D712E
ED5223722892A4DAC477120B8C9F3FE3FD334EACD3E8AABDC3C967C61FF003B4
B10C56D6A490CE9594D57A2D431B9E5E10FE3D8832E227A7087611431ABCD029
85F4865E17E17F8CFBD2CADC97E0A8820E3ACEC873F31464466A9545E967E53C
DBDDB8478E69063FBB891566BAF88B7660A4405B16834761F041CCF7650AF955
F9E853AA9F5F4382E1FE7D0C5BB4023818A2383F91249D48CE021250EC9EEB1D
2835E18FB73026250B32A8849067D5E2258797C917F998F2D4121D96560C5FB5
B5D3471216639A8671B6DFAC5E3554EC36D9A72518525A795590C74DD70DA3A7
78BFC43E51D6F2BA52F17D4DD00D389D3983EC54912AFF73684A8A7E345537B7
E62361C04A47859DA084BC72EA53512DC54132EB2EE671793603015652EAFDE3
41C4B6B679BD60AEC5153EA0D2200CB1D097DAD770F5F31E6FC475A225995277
B867B731D5401E2D02B85BA85158C80FF7E2BBCC42B98AC867E67D25DB656072
55A0D32AB7AA483A5A9686CEA4E2B3031D90D84DB3E2DEE7706C91BA81CB8DAA
700E5F61E07D6998C9552C81B66FD10A10033D49EF3BCB0FF22ED0A3737523C9
8F851C61C4BF8A213BF6EC70C956AE48B5BD276CC0437C72BF6515B10739919A
F00F6ADD2798CB211668842349171A5AEB0664D2C44397E55A4A9EBDF54A3EF4
FBBCDAD9DAEF4B0CAEF7112FA828F2F8D9F633D37E5516AB5ECEA87342EF8DC4
3A50548490F5BC9A8A1F98AC7AEAD9D913BFA10CA86D73AEB5BACC1FEEFDCC15
B3655522CCA2C772E902FAB2A6FC153597D52763EB44AB7489FF061F7F58E8F2
AEAAF4D17F36CBFC00D3C653F335D14240C87DB4339DA9D30A5BD1F502BC9013
461B9DB2FBEEC01BB18990439A0E9CA6576BC9CF6B1A3DB9386C4A5D4AA6A5DC
CFA45FB75F22E10ECB72565DB441A194902C91427B4F676E531C661F7A2C3C85
CD534D1C89B6779B2EDC8E44667B992C20C70B663BFBF680A6CF4383EB7CA26C
4D1F06B5EF4025BBE65795F1EDB5CCB97050872D6C07BC2974F905ACDB7A765F
291365D6C8152153E7F017A25FB4476C60FD9EAF9A121633DBEAC32F62850223
D6418566AB350F90F4B35F19598478F76B63E347D4C61E203D4DB8ECB9889181
C387F4B663A502C638761D2782BB96EAC81A0108D7BD6938F67FEBB69218D115
D8E89CFABCE15C6ACC7FEB983332A51A6A73CF4E341574F366713D7FB29956D9
9BF238A87483D37E526A2EA2F101EDD34E34CB92730DCA7235AA0027189BE405
2DAB4AA021A30C28B26C50808E1E965C02F6212EC7C72F5683339425A7739380
A422E6191ED8453AF0CAAA424AE44DFA7CC5C2F6EAA8D73A5101D8E9517DBCFB
2858D0E8ECB7DC430EF23A9E4428CB7DED8D035D6050251AC101A2D0E884721E
2F21E573F948048BB8FF888911C508CC198BD750083B339500C426AFCD5634A6
AAAC1C7E91249667B231BBFC64B4317192FE07FE9DA0DDB5E517D097AAE46577
9555F29D45C67CDE9812CAD03F220B20519F2FF32DCA56A554D4296FE2D1F3FB
B209B5270E0E695EA5A0EF1144957CE045881AEB8D05D72CE57F4D34617AED67
0D3AF0472CD8D60933651626550366E300E72A9C89ACD475C2E2ED9BD44B472D
9DAFE943F8E02A6DC38E447EED964624C37C3130E48211CA279BB6A0BD59466B
42F3D89B5746F29E084E22CF58395AF0F29E55113F3A3F2F52CB3A6DF3D026D0
C81754B8E2E4A15F6943BE9D0087D5166060734FD07C4C57D7C7D90E8C9C1F35
623CEEE3ABAE75E1A18A1E3B50B7266BD2D8E812CFEB4A46B856885B185640D6
B9C22179551002B94282F57FB433B7FF157D2F0D240836B72AF4A331668AE5D4
E6B85415F4E8B9D2F9AF90FAFAA0A3866DF417CA5A31348CF9B41B8F5F4D2F97
CCF7ADE851B5E2E2F6E319AAF5792EBB9DA2C6AA8B73D889F3CDAA42932CDA7D
07A7E59183CD89520DDFC36E5D513BFD8AD0886046585F29B4D7F42CC0C27AA7
53915AB1167D292FE91957E94A57FEE2D49C20C9070ECD736BDEE0F046E60350
EA539DC298156A4E0D019E7D481FDDA6861E20678516AB80ABEC1F09B126BCB9
52E8272A06BB6DD87ACFC423B4A4FC9A3DC8DCAEBB807C5F748F1FF8B17B8B88
F426206BF1B7B7D239D26BC3CF0776C467A98CFBBCA5FB6145D5900137ED19DC
D002F10704AA680EC753C22E29AAB15712EF22AF73D80820A1EEE953463D4EA3
81FAF99518D4FD0F862A324FC44C4B9542A92C5B60CC983CC8F647CE5BDB4D6D
B92B380E0E5F7208A9CD91FA9A469548162C761C1BA05AC9D60B766764D821B6
B4E17F56CE455F06EA1EE2D38FE47581746C4C5FBA63AEE2B58E877D1A8FA83A
31C972D53B64E92EEEA147426A92CFBF76FC614119C6E9C6476FD6A069C803BF
E949FBE50B5AB1F1463F9747E8D353F7BBD991C4F90F920BC9407D8E24720293
846D052214E60390C3CB926D38C83AF697425D80C2B4FC4706615B905516B733
46ACA325CEA68FB21B2D17CF0B68BA4DF249368625CF83441EDBF2B86C957C1E
44CD722BD2537CE84FBA07EC7AE15C840041B9F7F3040072E6084CD55B301C08
A64A53BD4D3DC30DCAC6C152F316ABC59B8EE978793EBD568849DCC2A75A495A
BC83470D503F8E389F54B4A4A31624E83C601B43AC1E52CB811FAA7CA6B644A5
1AE0BFD4FC774C9C9DFC2769ABFA9C83F900BE2DD4010416053A1D4874E6ECF4
D86E44B4CAB15D53E5630C144B0C15B58DAAD785BA298B1893D1B09BA5D40344
6678FD2D17FF6674433C976D6DAC659175CED26139967C9B2B9CFFD78FC2570A
E5142141C2888DBF2DC8503F9137CE7CB21A1EBC2D65BF33FCEFBC85C9CB736E
24E8595CE934AB032CC70BD6A3B0F3BDBFBBE185512FDB7BE3D4A6620478453E
75D044BF770B44C9741E31985E6DAF5A318D7BED12B02A4BCFE60D25EF12843D
EFC9BAE2A3F2EFAD66D7858E83EB46BB09D2FF8AE9C43844A7001C86ED97AF51
C511E3A89A1BE349FF5215D1A57843EF51456B9838133846F19BE79AAA5C1AB0
5F400E5E8E7B0BF96EFCA3B8F0894BE589F2C9FB6C97BD16D38F0A237CD4F034
099C41F85C7E2C7BEC8E02C4F327306A53B4B48B26A8926670CEEF96F6DF2281
7C2DAD99EF8B81BBB777227C2475AE7400DC393D9C0445E925DB1E955950F7AE
53E9AC4306794239346A419F7B5DF4168382EF5956B81F83BD4BB7635B3BCC84
7D84D05AEDC02D14675D777CD19B08124001A4F4EA96990D96000C082A12F00F
7FEF793A7FA69D56D3A38D012168C5458B667190AFE80E02C816CAFF0A71953C
D80B085CD286027E2FDBB05452AA762FD7C813B2E19A79C74190E04E746C4933
CE1E300CAF5DD53B08110509BDA404EF07FA1BC5224BF1205DE8E0C3276A13DD
866675103B960C5F36644F96B4FAC16F5D6E91F74629B318FCCC8E8CB13EB76B
B0B7B90718D913A52A04732EA3667674994A325A7973C601A7DDD50F658E0826
ACB8E53D4914B0274AED98D7BC3B2B7F9D48A7ECC2F8ABEE05CF2C4F2B90360B
B7DF779EAF3E103D1D83EDBE32DDA873768D8C37DC10A5354A94B4153049AD64
FF3E0BB51AB91D7C0B4134D8731CD0270DAAF19BED9EAD800A14B65B68EEE89B
40DD624111670DDC7C030DEFE0D1B96420E249332445C155BA96231C88E70643
D526BDF3CA1E05FEE72CE2B881CFC01ED780C10E89F0828AD55FE29043BC56E8
2750A6DD15AADD54492F6092618F4CC6A31766B17FC60766D18C307EFC9BB787
39047DAD6B38419EFBA46B4E2C932F97451FE78AD75FA90DE409FC6DD46585D2
1941F5ED47A8FBAEF5A917A240959E8D9F9917DEA3247D9CAE6BF7A88DB4C4A4
F9F5A6DCE542420A032FF3392FE0F3357B51F884D6181583A554F75B1DF192E9
253CC828FF06B0D992D5316435980B044BB191508C7C45CD90F797F88856424B
14A5707459C50EDCF3E3D8D1667AAA83015405354CE744C66D9A5728F29E0085
6DBF740717FA0799E3BCC4ED7841588B496A5E549B953A7FD288B4A045DB611E
E3B2F35963FF18ACCB1C968BEEA2CBF52B3999AAF89A05320BB2E97F52CFE06B
9F10E3A79865A3059A957F97972D80ADF678A36E2B586C101FC6AFA4D137C13E
EE7102C9B8EF78CB057F8B7476F146E8FF5C897FD5503DD198128CFF7B5FB339
FAD0AF0EA967F77B07B367A4AC9F668F8BED99B98E87FAC750EE045602D76C3F
289FC9D97694C96AAC0AD1BD3FA94DF2CBCEA24B40F47B9B59E54EECEE7AC4C3
A3F5D19160E4C1EA830D57FBE10D8D46AC5CA0260F22FAA45236F0F542BEA9C5
5A88F878F68B36114E0573900C65E305462B22A3429A17C7A567694414DDDA46
5F30542B8FD4F00F6C295B2E8D3A986B953D96822DB2ECD48E8BB1763434E652
152EF3717F5E7FA10FF0B01D9F64E22C5DBD7254629658887BACEC0ABDE972EE
67299FB84A05B3EFE22B6976DB4CCA384232DDAE38C31623A4E39EA2E82C1EA3
BBB68F1A7DBF405DEC37CB7203A895C36A44BD2D63F45B3888AF91D37B510A59
3C921BB44DA620892AD87B665F69F6FA510B071ECC403CB2BE2F54B3969C9E88
713244BC97C1466DA8216DA7600C221E7E7EF5C789D2E12B36422023A03E11BF
2790FD6062FE6BF62F5010A92F0A104B76E255A0975E04F6F20F760881BDA7F5
D834D1D328B6EC19AA7D5E5678A84C74C82553DBE8BB5765E84F5A8789032143
6020940B4B8D45FC3433D356E28C25F42D0C19F911213D85951B2B00D01B77BB
A4C72E964F9D95422BEDE582A05CD52E03D28A996E6CC8FCD910CBAB728073F9
F9FAEED5470FFA55930447C5BA816F826F983D53EC9941EC8364B3060FD74C95
26D4F5CA753B574FD2FA4D1D333785241D8741B79E628BC852FDC35478C5ED9A
C1BE88C5EE7302816E65C12B58EA16FEDD4672EB3E24B6EDAD5DCE263BA8A970
350B651E5A9F3C281D85BC3F44EADD0D93402E36489BA5185E7D388974B0B700
70575188BB610CCA20F081E2CBDA13DCC6F72567962ADB342E02C1E763B673C5
F7384E24C6E1730A3A790D690A2103AEF88E0C1D4480DC9B25E5C8C9E1919C95
F83320179B4C7C4A26D559BFB24D7D596FB73758C9990C451E77FCDDD17763B8
9C30A9534E3CB6680D3D419D4B70B0B0A0D160FCCDE169714E373F65B7144CC2
DB9A44E041211E1517D3148E65A2486CBE5E74E625261CCF65392FB4F3091473
F9E8DF327D59A58558E5C9F7190DB577D5DC658F5E36258291C708B3D224653D
064BB6079F91293FC733710893AD1C96169B30CBFE4E9D52E7EFAE4AFEE68FEF
1AFD5E7E9DFCE8DE332B0FDC0514F9B3090AC85BBFB527FD8034DD33E9576325
A8769AE09AF1BA792447DDD932B98FC9486B39E0B04DDB3EFB7A30DA0940B33E
E27490E0E841E87B1C90E5248A91742ABEDC10F43A8AF0F9C5B4A4930B1AADAF
01874B9AC3B8D0DBECCDA6CD7E96471FAA15CB7F8A599C5746327CE392224C3C
40BD60AF97BCA6FF6FCAB2FEA114D7300B89E91C3BC92D5B3E2C83BB37992D8C
72F661EFD0AA034C738C019DFB79BF40651A1A34BC1EB9F5AAF58F8B3DA32645
24AFF8636486F08BC21533B5FF7391B0679A78DFDCB03DAF6BB7475A1D51DAC1
EE4BE9B986655D1FDB6936445EF99B58B303FE79F11275EEA96A9F6808EA8775
D873D1052FAC93769789C700F20EB2ED6D15676F6E563A769CA9298E463FC311
83281483B1C953370D196727A6A0E66D32D9480AB1B6DCA77868C1A2D5DB6483
5F31EB6B18EEFEF1CDC31533E69B0AFC6B30FC9912DC89BAAEEADC30BE14F448
1A6B70D36A5D9B01799BEEA686066114910842D022EB464A9A1E8F0A5628BA69
AA9A1925CCADD44703BC67A89F3B48E4680726DC4360274185CF3C8AB747A8FC
4B928AD62B092EFE48B01E33ED756DB696171FDB775396BBA138E056F71EDAE3
7A1E4CC272B8418114B0E81DE0BC43DB3C133167344488820A92DF10FFA26FB9
65FCA2C87D302E956DE6B4FE145145440C83DB43A68F8B29A592B127BDF49063
B7F11E155CD4CAE305525BEA56B7C412A6260426407BD892A3F2B444AC3421E6
FB6E6425EB5C3053C5644666B80405530FA0012B54557327C98E0F4F064099A6
4ACAAFC1870359C1B6FBE7606BB8A26026AE20C212210449905E628AF1B20490
8CE908B7EF3E3DB551C85AEB0F7FEB6A8D215B97998E5DD9C7CCFB2A9402B8B6
1770D4023777D4B45A73F471355353412C51D4CE71FAD1E0AFBD87B5F86307F3
10D0B94F1194EFFB64AD5DA54A4200490F609CA8B912E149F8217ABB1E9EBB3B
C4470E7365CF5E1E761AA1945044B225BD53D142F6588C50E0644740F7DD55E4
8F73201E5354A8BC78339211AFC4935F44701FBA043AAC4BA4698E9D7700029A
C79F992F62627C91EB855F64C4B251718FDA71EDAF082A0C7B00550949D617A0
7071FB14F05620CCF2180941341D8E60FC88823438FD728A4042AFA8B853107F
852F631518B61B234565291B5D5B89DA818DEE3AE3B68A2869DFA63255CC882C
3B16BBA08FCE3632E57FF7A07F857A1F0FDCADAB39D77960BD827CCC8661A997
648BF5BEBC0FD2286C2A112A8DEB9CCB6330A049170D5D68EEEEA011D3EF3EBD
855236B9380087CBBB6BE24191F728B7EAC5B50F7A547AA0989B7C7D3437DBCE
1669341264E290646F2C8C5A3ACAAC7CB63DC692FAAE13E9B40E8BD39FE16A0C
1660CE66872D061056C04DDDC265C024BEF8B7E3C3AEE76FE5C9702002C28BE0
B180295EE00E567FA2E5CD1638226D24A7C732E1BD8103B476EF5702768689C7
D4FCD47F2AB94A2B1FBAE6ABF87B09E7713C773FB65CA83F7318035B332B9F99
24A2C8897527021321D003AAD7C273E4BFA2710B9BB26C2CFD3D9A5D7ED1096C
552D50028AE2476FCD6D12A5D0A897521313ED1A3A8456A70C16EAA50A3E6733
6DC89FEC56AB54A579EF264377A103939D5EE00A90B4F2206D0023AF9491FBE0
800C6540FC945199E20E945F46CEEA2E885F6800B9DF042BCEF4291A4B1A62C8
6A7ACFF872B25FA3AE69E0093F3D0FF13A3313430C06F1AF94D500431566F659
E8C859A5F80F5BD2E85C8E32603D3745628E8FE6FBC50FA68F9C3811A2BEFEA4
5852CAE2AE5AAD3230ED050593BAD0A9581EB7B327C6916B8FC348F4C23E6FA2
00FA28AAACCB3091C1D83F7BB88672A53A2EA3B8C7C24374E400C57F0F01019F
E52D5C47F389D4C9AF126F4080F9AB8D1C8F470932BBECCEC72A9796F6E965A4
82057DDB43D68298A00880D4C2E2496F26F015FD83C5549215753459310339B7
6B2961EEEE74DA31FEC8E2BDDA42D4080A32372AC372524BDDA580EF6634ACE3
128C69D04D890DCA337212B109585C665AA83EFE47D5BABC2627A86EAD11BF7D
744176652C7F9497785A7A06A994ED8414BBE8B26E74D48CB83FA24AAFBDD507
84A90195EA3D77BCE8C2BEDDD1DC52E8164DF15D65B916EBDF3A8A76849653DF
AE3CAF9561AF3B705F75B9E5DFD6758DB65A2FD54683759912E0D0035CFBCD86
59EC46D1798442BC3677E06DC5A2F70FA14529BE16F9E7F1473584BAE8060DAE
D28CDE641A2CFA0BCC95E3FEA848F2BA7F649AF87AA556D2ED84E4723B3BAB88
4BB606362C818C8785ED46B2205D9B4A293247679E0464F79D51584476FD528B
2FC34AB914C268C8874E34F01A8F3E17FF98DDB1102F19D4C26C51B7F48C3820
23595C40350B9DFC1DEC1CA5711D6BD3E75F966CAA3936E5654367EBD86676AF
1732A86738FC4C2E7A3A4438D1D16BC51653FAA26C89AE39711B96F7131CD693
1D8AF54191792FEEA3CD0419C5E08EC814344AFC21976BD13CF41A65EEC545AA
C80E0D2727283C290A2EB5B0D232DBCA6F9623A4316E987DED5314A244DDF170
BFC8DB4B8D4F2B7C46FFFCF9F4A83301FCF15591B27312E42836DD5611962F1A
E06A483B4CC63C8BAE4668D738F45701D214AEAB7BBA09F04600BB8D84E76B0A
7F15F0839547F275C4B553216CF17365C14065E67D42E05A9076D394AEB82CAF
D1964CC9A1C90873F25E9FF12D03A1BA252D76A8C6DF38E5967387574159E4B7
BE116A74A0D72DADFBADBA62C98AEF89A55247F983E4878340F9088751631819
0A5099FD33DE3F2C7E7C8EF8C2F37C2C4863D7AD42935AEF0508255780A0C8AF
A02091E449A99CE5933FCE6A38F53A532782D5D529BEEA2B2A2ACE033A650DDE
FF429AAFB3531BFBF1FFB2FFBCC84F9C1013F4EB07D9330D9C73217F84E492EC
FF712E0104F2BE6FB515312A345F4433A29A179F9EEDF437A5893757128078A7
8AD89E9125E71D9F1A83501C58DBDB29E2DA7535C783EB6B1C90F35147161B63
AD140A385EEC6C8E2ABB5A78352B8EA08515270BDFB97B1A2AC307D6AA3575EC
AE482A7FB95CFF78616D7C30D957859EAB507A8969D24E2DCB7480521892AE5C
E2E5B978E7E01A7F3A0A17C93A4F68B9AF3FEB0A588D61040F915F49F59FC85E
67561B3C730474763AA7E614A9936E5F5AAE038ED403EFFB5EE72412611F2ED3
942272DB899C4B1871660699A790D0F82AA42E2CF7F655D03A7D7EA6E865E8CC
86E5586A22AD9EEE62FADC947BF5FE1D50FADA5DB39EEEAC32A38D944A52998F
B03AEBBB21A08C012F63170D0F483EC42A81D5658DEF96A1F00D38D6F737C1D3
B52D9F6AF95F15FEA6E8689F15979757FE343571AD247C169CF31CB4E9487F17
94FF674B0428C064E4083D12856A1AA45C4CD8EC91F3534FB5DA18EF67FA52ED
EAA9708E8E3DBE18D3E8E4E2FA80978312488218B87CB6C129887C3A3DCD0D97
D0721200DF5698E1456E755227B8C32DD31A7D157A6A1AB667D9E9597C62A45B
076A6E68C977155D031F1285CC540E5FEBFB6574190BCCBE56BFC295435F28F7
0430EB03609E30C44755562D3DE65C9FA66BCB4FA0ADDA677252AE189841E61F
5BD5F94FD33C90519D9A09C95F2A87413F842784111F687DAF450C7ED14C13CE
BF204C7B615F80FAC65FB5676042648C9402BC9EF75A6E4CDB23877A16E6094D
DFE12D8DF97ED4DF02AE17C7EFBF6BD2BF54
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: NimbusSanL-ReguItal
%!PS-AdobeFont-1.0: NimbusSanL-ReguItal 1.05a
%%Title: NimbusSanL-ReguItal
%%CreationDate: Thu Mar 20 10:08:40 2003
%%Creator: Primoz Peterlin
%%DocumentSuppliedResources: font NimbusSanL-ReguItal
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% Generated by PfaEdit 1.0 (http://pfaedit.sf.net/)
%%EndComments
FontDirectory/NimbusSanL-ReguItal known{/NimbusSanL-ReguItal findfont dup/UniqueID known{dup
/UniqueID get 5020908 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /NimbusSanL-ReguItal def
/FontBBox [-178 -284 1108 953 ]readonly def
/UniqueID 5020908 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (1.05a) readonly def
/Notice (Copyright \050URW\051++,Copyright 1999 by \050URW\051++ Design & Development) readonly def
/FullName (Nimbus Sans L Regular Italic) readonly def
/FamilyName (Nimbus Sans L) readonly def
/Weight (Regular) readonly def
/ItalicAngle -12 def
/isFixedPitch false def
/UnderlinePosition -151 def
/UnderlineThickness 50 def
end readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE33C33655F6FF751F340A8D6C01E3
2E02C24E186BA91B34A1F538959D4450CB683EAE5B034D030186901B458D3777
6B3942BD2E07121385120248891AEC2EB33C4E3A0CF00828D0F130C31A918C18
979FE94379C648EF21ABF659253E43CD1253866F157F1DF85AE7E8714F061B1E
ABA3AD094FE8D6293916FA82EE4F486C7E513A06D4C9BE44306A8287970B4ABF
B6D1F9274A5A0BB6ECF713ADBD1260D5D6C4420D357FD486470A74B2F0621B59
A9373ABECDBF32FA68AABB66FAB0C970A3354A335D70DB2CCFB357288DEF82BE
422B9914B075E7EC18835881AB22C2A47DAAA4EEC0A8DDA1CDB5292531E5261E
D8FBC087C00D12D9BDC0051529207238FFF92500581849C386F8427D44353C41
FA42972E325397AFA55CA5189B1EF4979F06711E406A219DCC46C88FC82473B8
567E47B75364FBEE1A883FC42C9CD2E1EB581D4D0C25F509BF595314EA222031
BA9606F17E3E4931D50AC6AC2B63711B0E85A6CBE6FFD9275461474D673694DA
B38706890D6422CBB2B499C0C89A7AF218BD84FE0B13D689EB5930AD0DAB5C0B
55F68356C285EDD85B3C0AFE1B9001572AEC0C3692958F7F3E16DB0C2D0647BA
C1A4EA2EAE112F680B33AD9D59962FBD63BED5766186A1C4C21F500B374218E5
7CEBA25638D9F0520E789B2F39CB0567D6BD72C076BC76095B60ED5E82F33E9E
D2448B364626AB558A979368B0F1495D8C504EA8B6E291E781F5DD708FE9B5D9
9CC26079902BF1EA845CC6ECC973DACF88D956769DBABCCC1F7C44B3B1111732
3CFE60583458E93FB796A440E43018C4CFE846F1C79CCA0416E6B446ACCD1D05
A4A682928674FB388BB109497BEE1F0AD9EB289AD984DF057E8A27F23601CC25
EBA38ED89F18CE03BE3645F75ABB0BA2D6CA8746A0F96518E865AD53CD4F428F
601B06E05B6B3F27C3A62CCE52668854DB4DDED614791C32F31A1595BC2D3E16
772C0ECFFBD06A07A1221AEAFB8CC91029C159B121F677C9AAFDE187994135D2
741BDCF6B4442E6728BD38194DC406A9F88D3A94E458275AF47E670A57FFD531
F72836EE4932C0312FAA0C1CE257FBF790B4B211B413770AE9E73A46BA6E12F4
A58A5CA4121CD6A7A7214DDA473850650623BAE8D7BC6F4034C6B648F329EADA
DB8049C762F7D3B273FE1AD47F072E6A69282866FE0F37107E9DAA8FD7EEF483
7B825A0E000E57B711220A699F38EEE6BD832C6ADD8CABCF7A9A5EDBA83116C9
D9139619E407AF339C1A479065EA6FD7A58A466C6230CB5A8F8583955E0AB271
536098804287DA09D1CBECBC283B2810D28A1EDBFB2158886231E454146E77EE
C99A662AA0C3B597123548EA9580E54EF1AF866B3D2246EB50B888ADD050680A
40B0DED04F57B4CE47288EAC8F6969FA29AA6B28CE5FDECA6909DE6337F5ACA0
2E982F9ED1C700AE0D0BB9B61249DDD8BFF65B53B51269DFB0158C60C1489AC2
AC1DCFBED577038DE80F87CE86751494320449007EA922B5924F53BA2402843D
BA09637FBDD85AAFC17A8E9B0CE1A9508F0F8E5884AAF083013AC5189718CA0E
705F28AE75ED2CC22B05B89ABA446304EEAAC280A94CF9C9280C98EABA19973B
B596EEB41C7FAAB530481B448A8CF6D526BDEE9E8866C5568DD10AB87853A39C
3B61627ECB39D5BA7F8E095B9F852E5F33B0545269CC9F0661D553F814511378
EBB3037BB0667F0382E4278EA0678603F85C0F3013AEB1B2AADDB2337DBAC1B2
52B2B115732959E1FF6C9CA993DF3E7C73B00F4A6A6277A32F6D5D10F8D4EB81
47315E5BD5FBE88DA5B2CD9D71A8B51C803FEC7DE7BCFCB04D76C24CBE3E40E4
9FA463B5D955A864FB6C5A78DC38B8B50077EA5974E8A3ACAA54356EB2F96D30
2EF8913C6BB60B5A8EF988AE0EDF80660A26B4A346117DE5CEE30B3060CE054C
EADEFCD37AD00997C5E88265319829F6550A04FA0598477BF73995AA4C37BD8D
5AC97935DE4A73C3F5D62536119B5F7E15A4207DEF9096D27D3D6EF1153AA263
41AA5AC2DCE2E64092DCD8A43E34700E6547C210AA27A3700E11D47169D9703C
24A911062B9F016F858D6608F304E3C1B9FDF97FB541A598466FC13A35978D6A
C89C5D7D115D20015326BBB45A5A145E6200671FF0A54D301FD690A4644B1B71
31A6F795E04FA38D419001AE35BBF8E45CB1D9EC09E266A736E2119973AB763E
3B857A6D32903A4124E226400024EEA61FCFA7AC9BC05EB2031832FB9EFCFC3F
D4BBD18D50575CA02EB794510B30E8BBB8EDCE84F332FB5FBB9CE97574B443D7
DA77EEE6F17953381550E3E98D5590DB347AFEBD9F116385726E908BAB7D1357
504048C0F2169D030905B62B3F55887945CE1EF5DA1909F3BD556FD50A65160B
FBDA15F774FCE8DC1B25C9158BB885C78475EFBE79D3E91B09E7B1F043D88595
707278FC37797D62308DE371FFF6016EEC5797ED839F79EEB3DE5407EF35C4C5
E91132739A5A75F9C302CD52EC4CFB03A510ED0F96AE730EBCBED3517BF83DAA
637FC7139DA15A2C450B695C82E1E520A15984693FF9303DDCC10D1D023DB192
D8AB4383F5F491DFEDD1A13441DC07F60B14155F27A6EDBD1FE57D0119B3EF8D
D74CA72BDE5A9FFAE8AD9C35AA9656332CC3F18FFB1BFFC8BFDCF64484EBC7E0
7DCCDF5250D7CDE88559E796E8F4F8ACFC07D00258EB9A94B609CA65239D7F8F
00E537BCB2EA782EEE67806722EF12B1EF6B2ED7C8977FFDDF1E8E775BC2862A
494C758BA9B856053940ACBDC3D73FEBC3773D75D1DC2E131C6F879C130927D7
101071E0CFDE9C2008CB2CA17CF4D4CC8BD8D89F355F4787F32C94C469DE72AA
62F19BC2ECC2BCEFCB53D0215330E71F9B70128FDF2FDFDA1139F37A45CA08D4
56842AE734D2FAEF80FDB1AF0069D44AB6D1DEA47BA476A757900353B2B72D1B
27D50B2A3C8C1DD3591CDEA73083CB1BE505FDC83299D128229FC194F17A5528
0B9363E5F4A398E2910381D89392CF3CFB64938FD115013250906C5F2186F928
E2A68F360BBFF52A06D4A3EFCC58B4AC34120E3D16230C4144947437F9828C71
0FF8B66DF7030597859010B3DAD6D967E91F06C302203F1D1004744657112EA7
AFE591C7AAE400FAC5AE5DF81723D1E2C5F5246F03FDF0B7E69702205352AB2A
EFCC043BBDDAE1F3EBE8DF24DB15A4120926BB55CDACA70852497FDEF89566C2
A1579D4CAEF8F8693CE8CE201418FA6D64B50BA56BFF2DC6BB154710A9486363
5A42E11ED00B4135B651E4C8F5342B41102A6107D51B8E8CFDE9B7AAE78E539A
4F1B2F0402B0AD79DC75D90BB62EA38AD1314835422DEA50D7163955B27FFB4E
A13A9B405D4E164206B3A734F1621B7913A5F5DA04941399DC96368D78167A5C
4B3F952918F9FD87508EEA24914BF41D534342E0AFB21C139AB14C03E5F6B2E4
091221AAA59308125674E4A941E8D64893FF25104F4E8E41B45DB5402809CBC9
9091897750D2D073E265B6FC03AD2630152CF54473E61EB3A9B3942B0729D12B
607C73470D5FEE905A894A46CECF9E5C204E94F6BE50B1A2956970CF8E273E5D
F3F9C7D44FE98388B999DD2BD5FCDD837658C33C0018AA07D32FDADB8535624A
5ECE9430C68261B33DE0249CE2527B35A01B6309A66DA16556BFFFDA08CFCAA7
2EF636D20E04B467A32D23C5A0462FFD2C43C06A2D912868AABF8E8CD8B66127
171486AC1B2E7817143505A163349411324BB2F0F2CD50F6C23B24A1491F79A9
8CE3A6EF94EB615E93A2DCF1B66BA400EAABA5AFB1BB98053688F1F80A85FBE9
D3160A2147515F86A65C1CA80EAD03CE3307007ED532E5E6AEADFCAB8C30E6D4
EB6EC6338BC5A5E66ACA8630E4D944FE98831877CAB7CF428EB5645908917738
F1CB59D052BD89F9DFBA003C09B66945265773F32C2469AC9CA31E29D29F9FB9
F3032D7FAB81CFA354543C03004710B2F2BC8CA38E13024BD009B9CD9668C085
07BE77E6F847786A046B5F0E221BBD980E0D162E4AA80164D43B5546D0E51067
1B46A05457D5A6B5C51C0A2FB9C3F546228F15CA6EEED8D2454EE93BB11D0817
E8414CD0ED31BFC6A43738268EC5866E9CC3B052D99BE5543FE2A4AFB1EFE685
1B43393CD53BF9729F17213BDCB93C99861B413258F2D5F285AAD2805099017F
0F13F1620D16977F689E3516AC2616FDFA8E5FF99697C992D4B0F8C8BA40A58E
CF8BA95A514EED359393F8E8B58EECE4F3B0B822C93D520BA01CC1FBA37655D4
763FEFED9C052423EAC0D8A5F1542A649D03BB4A1937DDB78871355752FCF15A
4DCBEB58E98A982C7473819B5203B548B756A1583BC1751BEF2FB71A0D768BCA
E412A06A0BDEF8D8B1144B9657F0FAB9835454D0ACC114000722714D65E45A60
4D9230311C94BABD3B0694394B01D02F6B3D2DAF255E33CE17FC0F32759312C5
0ED67155594947EBDD04EF0ADA4F2E28E7350F0D3404B21979B001686BCB17CF
3AD5C0A652810902613F6D157823FB323F1FC134565C8105AA41ED20B661F6A5
B77C2202E8B307F127BB2DDEEB51333D99E07AA3FA78438AE21F48CC3FB679BF
B916393EDE18C0C33E3B85D727106AE5FC5DF0B02F44445D310A145CF2D18194
C800E7A7384033183E21FD27FF881E33D3645C9F88E4556350E6D8167A9C6A2C
E07F637DFF61C8B707096E591F5CFC3B3103C03CEE1E2D04E28A58E55334BF73
A85BF24E6D6A692EF63575D60903069125F6A7004242AD986571A689E4D0D4EC
B2738A8FA0D19D16C84D9627E2B79A1DBC58F8470CDB0EB053EFC9D040258246
756545018349CF5080FBB1AD1B411AD5C73E887194C37DDB18A6E1609D769A83
3A43A5C60775543B9867D00A3F65DFDA73AD442C8A1DCE292C4F2AB15F9F4884
2AD97DA4E9C5EEBDA2B8E1FF60C975099D147240E97A6606971C11204AD249E8
3167C6D0EC59CC7B9ABB23C9FA05415C9C8E4683BFBF6DC87B9FCC120907C5D4
BB9BCA651151F49917C04A14948B2FE1632B1CED9A23515217A387B32CBCC617
517DF97C9C5818C54D83AB440B23B9E32334FF62C545C8BB4784ACF597101BD7
3EA787264A2BB5487933A5E8E98395C9112C105C679F7A604B34CB371BF4BF98
0932D2C7E8A36E45782A88B1BDB4BECF67D738E60D7F214D813FFDD5BD1B08F3
98C912A503B632EB7A47AC5F920363EA76FFED4CED75E849BB80E822
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 40258437 52099151 1000 600 600 (supplemental.dvi)
@start /Fa 203[29 2[29 49[{ TeXBase1Encoding ReEncodeFont }2
58.1154 /NimbusRomNo9L-Medi rf /Fb 138[29 1[23 23 5[16
2[16 29 2[26 29 26 1[29 14[36 3[39 12[36 65[{
 TeXBase1Encoding ReEncodeFont }13 58.1154 /NimbusRomNo9L-ReguItal
rf /Fc 105[29 28[29 1[42 1[29 16 23 19 1[29 29 29 45
16 2[16 29 29 19 26 29 26 29 26 7[42 1[55 3[32 39 1[32
4[42 2[42 3[42 39 8[16 29 29 3[29 29 29 29 29 1[15 19
15 2[19 19 40[{ TeXBase1Encoding ReEncodeFont }43 58.1154
/NimbusRomNo9L-Regu rf /Fd 158[34 97[{}1 49.8132 /CMMI6
rf /Fe 134[37 3[41 22 37 26 1[41 41 41 59 18 2[18 41
1[22 37 41 37 41 37 20[41 10[48 65[{ TeXBase1Encoding ReEncodeFont }20
66.4176 /NimbusSanL-BoldItal rf /Ff 198[42 42 42 42 42
42 42 42 42 49[{ TeXBase1Encoding ReEncodeFont }9 74.7198
/NimbusSanL-Bold rf /Fg 242[66 13[{}1 58.1154 /CMSY7
rf /Fh 134[29 29 1[29 1[16 29 19 2[32 32 4[13 2[16 32
32 29 13[42 4[39 45 28[32 32 32 1[16 46[{
 TeXBase1Encoding ReEncodeFont }20 58.1154 /NimbusSanL-Regu
rf /Fi 135[33 2[37 21 3[37 37 37 1[21 2[21 1[37 1[33
37 2[37 27[46 1[50 20[19 46[{ TeXBase1Encoding ReEncodeFont }15
74.7198 /NimbusRomNo9L-ReguItal rf /Fj 252[32 3[{}1 49.8132
/CMSY6 rf /Fk 94[25 39[37 37 54 37 37 21 29 25 37 37
37 37 58 21 37 1[21 37 37 25 33 37 33 37 33 6[46 2[71
54 54 46 42 50 54 42 54 54 66 46 54 29 25 54 54 42 46
54 50 50 54 6[21 37 37 37 37 37 37 37 37 37 37 21 19
25 19 2[25 25 25 1[62 1[37 31[42 42 2[{ TeXBase1Encoding ReEncodeFont }
71 74.7198 /NimbusRomNo9L-Regu rf /Fl 135[42 1[42 46
28 32 37 46 46 42 46 69 23 46 1[23 46 1[28 37 46 37 46
42 12[55 46 60 1[51 7[65 2[55 2[55 13[42 42 42 42 2[21
28 42[46 2[{ TeXBase1Encoding ReEncodeFont }35 83.022
/NimbusRomNo9L-Medi rf /Fm 170[60 51 55 60 2[65 60 1[51
2[23 2[51 55 60 60 1[60 15[46 49[{ TeXBase1Encoding ReEncodeFont }14
83.022 /NimbusSanL-Bold rf /Fn 134[33 33 48 33 33 18
26 22 33 33 33 33 52 18 2[18 33 33 22 29 33 29 33 29
12[41 37 44 4[59 7[41 1[44 7[18 1[33 33 2[33 1[33 4[17
22 17 44[{ TeXBase1Encoding ReEncodeFont }37 66.4176
/NimbusRomNo9L-Regu rf /Fo 150[18 1[33 19[37 12[41 19[33
33 2[17 46[{ TeXBase1Encoding ReEncodeFont }7 66.4176
/NimbusRomNo9L-Medi rf /Fp 134[42 2[42 46 23 42 28 1[46
46 46 69 18 2[18 46 46 23 46 46 42 1[46 11[60 1[55 2[55
1[60 69 1[55 1[23 3[55 60 60 55 55 7[46 1[46 1[46 46
46 1[46 46 2[28 23 44[{ TeXBase1Encoding ReEncodeFont }40
83.022 /NimbusSanL-Regu rf /Fq 203[33 33 33 33 49[{}4
58.1154 /CMR7 rf /Fr 252[38 3[{}1 74.7198 /CMSY9 rf /Fs
196[21 59[{}1 74.7198 /CMMI9 rf /Ft 203[38 38 38 38 49[{}4
74.7198 /CMR9 rf /Fu 134[54 3[60 1[54 36 60 1[60 60 90
2[24 24 60 60 1[60 3[60 7[72 4[66 72 78 5[60 72 2[78
3[78 23[30 44[{ TeXBase1Encoding ReEncodeFont }23 107.929
/NimbusSanL-Regu rf /Fv 134[74 3[81 44 74 52 1[81 81
81 118 37 2[37 81 81 44 74 81 74 81 74 14[96 3[96 12[96
19[44 45[{ TeXBase1Encoding ReEncodeFont }23 132.835
/NimbusSanL-Bold rf /Fw 105[37 34[33 3[37 37 1[15 4[37
1[37 3[37 10[44 5[44 22[37 6[37 37 37 1[18 46[{
 TeXBase1Encoding ReEncodeFont }15 66.4176 /NimbusSanL-ReguItal
rf /Fx 171[96 105 114 2[123 114 131 3[44 2[96 2[114 114
114 65[{ TeXBase1Encoding ReEncodeFont }11 157.742 /NimbusSanL-BoldItal
rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: Letter
/setpagedevice where
{ pop << /PageSize [612 792] >> setpagedevice }
{ /letter where { pop letter } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop Black Black Black 0  0  0  0.15
TeXcolorcmyk -152 -130 a Fx(BIOINFORMA)-14 b(TICS)p Black
Black Black 3465 -213 a Fw(V)-5 b(ol.)18 b(00)g(no)m(.)i(00)e(2012)3718
-130 y(P)m(ages)h(1\2269)p -152 -39 4185 9 v -152 149
a Fv(A)l(utomated)38 b(band)f(annotation)h(f)m(or)f(capillar)q(y)g
(electr)m(ophoresis)-152 324 y(based)g(high-thr)m(oughput)i(RNA)e
(structure)g(pr)m(obing)-152 486 y Fu(Seungm)n(yung)31
b(Lee)693 449 y Ft(1)735 486 y Fu(,)f(Hanjoo)g(Kim)1353
449 y Ft(1)1396 486 y Fu(,)g(Siqi)f(Tian)1875 449 y Ft(2)p
Fs(;)p Ft(4)1978 486 y Fu(,)h(Sung)o(roh)g(Y)-15 b(oon)2712
449 y Ft(1)p Fs(;)p Ft(3)p Fs(;)p Fr(\003)2873 486 y
Fu(,)-152 610 y(Rhiju)30 b(Das)316 574 y Ft(2)p Fs(;)p
Ft(4)p Fs(;)6 b Fr(\003)-152 713 y Fq(1)-114 743 y Fp(Depar)s(tment)24
b(of)f(ECE,)h(Seoul)g(National)h(Univ)n(ersity)-8 b(,)22
b(Seoul)i(151-744,)g(K)m(orea,)2468 713 y Fq(2)2506 743
y Fp(School)g(of)f(Medicine)o(,)-152 843 y(Stanf)n(ord,)h(CA)f(94305,)h
(USA,)838 812 y Fq(3)875 843 y Fp(Interdisciplinar)r(y)g(prog)o(r)o(am)
g(in)g(Bionf)n(or)r(matics)o(,)f(Seoul)h(National)h(Univ)n(ersity)-8
b(,)-152 942 y(Seoul)25 b(151-744,)e(K)m(orea,)699 912
y Fq(4)736 942 y Fp(Depar)s(tments)h(of)f(Biochemistr)r(y)h(and)f(Ph)n
(ysics)o(,)f(Stanf)n(ord,)h(CA)h(94305,)f(USA)-152 1274
y(Supplement)p -152 1429 V Black Black -152 3150 a @beginspecial
0 @llx 0 @lly 352 @urx 283 @ury 2420 @rwi @setspecial
%%BeginDocument: ../figures/eterna_comparison.eps
%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Korean
%%Title: eterna_comparison.eps
%%Creator: Adobe Illustrator(R) 16.0
%%For: y2smile
%%CreationDate: 11/5/2014
%%BoundingBox: 0 0 352 283
%%HiResBoundingBox: 0 0 351.5035 282.7525
%%CropBox: 0 0 351.5035 282.7525
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 16.0.0
%AI9_PrintingDataBegin
%ADO_BuildNumber: Adobe Illustrator(R) 16.0.0 x682 R agm 4.6676 ct 5.2591
%ADO_ContainsXMP: MainFirst
%AI7_Thumbnail: 128 104 8
%%BeginData: 20844 Hex Bytes

%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD09FF525252A8A87D52527DA8F852A8A87D7DF8527DA8A8A85252
%A852F8A8A8FF7D52F8527D2752A8A8A87DA87D7DA8A8272726A8A8CAA87D
%27A852F851A87D7D7DA8A8A87DA8A8A87DA8A8FF7DFD04A8FF7D7D52A8A8
%2752A8F8527D2051A8F84B524BF82752A87D52F82752A85252F852A827F8
%27A8FF7DFD08FFA87D52A152525227F827527D7C7D27527D522752FFFF2E
%7DA87D7DFFA8A87DA827F827A87D7D52A87D7D2E7D7DFFA87D7DA8272727
%52527D7DA8CAA152F8277D525252FFA87DF8F8F87DFFFF7D7D27A1FF2752
%FF5252275252F8277DF852A8F827A852275227FD04F852A8A827F8F8277D
%F8F827A87D7DFD09FF27FD04F827F8F8F827F827F820F827F821F8FFA827
%52FFA8FFFFA82720A87D27527D27F827F827F827F827F827F820F8202752
%F827F82752FF52F8F821F8F8F8272727F820F8F8F827F852A8F852FF5227
%F8F8F827F827F827F8A8A8A8F8F8F827F8F8F8272727F8F852FF2727F8F8
%04FF52F87D52F8FD09FF27F8A827F85227F82752F8277DF82752F8F827F8
%F852A8FFA8A8FFA852F8CFA87D7D7DF8277DF8277DF8277DF8F827F8F852
%52277D27F8527D527D52F8277DF8277D27527DF8F85227F87D7D7D057DFF
%27F827527DF8275227F8F8277DA8F8277D2727F852A85205F8F852A8FD05
%F8FF52F8A87D7DFD09FF27F8A852F8FF4BF84BFFF852A8F827A8F8527DF8
%F8A8A8A87D7D52FFA8A8FFFFA8FFA8F84BFFF852A8F827A8F827A852F87D
%2E275227F87D5227527D277DA8F8277D527D7D20F87D27F8A8A87DA8A8FF
%2727F8FFA8527CFF527DA87DA8FF527DA852F85252A87D7627527DFFF827
%5252277D5252A8FFA8FD09FF7C27FF5227A87D277DA8527DA8277DA82752
%A8F8F8A8FFA8A87D7DA8FFA8A87DA8A8FF277DFF527DFF277DA85252FF7D
%527D7D767D5252A17D277D7D527DFF517DA87D7DA827277D7D27AEA8A8A8
%FFA87D5252A8CF527DA87D7DA87DA8A87D7DAF4B277D7D7DFF7D5252A8A8
%F8F87D7D7D527D7DFFA8A8FD09FFA8FFFFFF7DFD0BFF7DA8FF7652FD09FF
%7DA8A8FD09FFAFFFFFFFA8FD09FFA87DA8FFA8FD05FFA8FFFFA8A8FFFFAF
%FD0CFFA8FFAEA87DA8A8FFA8FFFFA852FFA8FFA8FFA8FFFFCFF8F87DFFFF
%AF7DA8A8FFA8FD08FFA8A9FD06FFA8FFFFFFA8FFFFFFA8A8A8FFA8FFA8FF
%A8FD07FFA8FFFFFFA8FD07FFA8FFFFFFA8FD05FFA8FFA8FFFFFFA8FFA8FF
%A8FFA8FFA8FD05FFA8FFA8FD05FFAFFD05FFA8FFA87DA8FFFFFFA8FFA8FF
%AFFFA87DA8FFFFFFA82727FD05A87DFFFFA8FD09FFA8FD0FFFA8FFFFFFA8
%FD05FFA8FD1BFFA8FD09FFA8FD0FFFAEFD09FFA8FD0FFFAFFF527DCFFFA8
%FFA8FFFFFFA8FD04FFA87D7D7DA8FD05FFA8FFA8FD05FFA8FFFFFFA8FD07
%FFA8FD05FFA8FD15FFA8FFA8FFFFFFA8FFA8FFA8FFA8FD05FFA8FD09FFA8
%A8FFFFA8FFFFFFA87DA8A8A1FFA87DA8FFA8FFA84B7CFFA8A8A827F8FFA8
%A8FFA152FFA87DFD05FF52A87DA8A8FD05FFA8FFA8FFFFFFA8A8A8FD15FF
%A8FD17FFA8FD09FFA8FD11FFA87D52A87D7DA87D277DA82752FF277DA827
%76FFF8F8FF7D277D5127A852F8FD04FFFD07A8FFA8FFFFFFA8FFFFFFA8FD
%09FFA8FFA8FFA8FD07FFAFFFA8FD0DFFAFFD07FFA8FFFFFFA8FFA8FD05FF
%A8FFA8FFFFFFA8FFA8FFFFFFAFFFA8FD04FFA876527DA87DA87D527DA827
%7DFFFFA8A8277DA8F8F8FFA87D7D5227A85251FD09FFA8FD0FFFA8FD37FF
%A8FD09FFA8FFA8FD05FFA8FD04FFA87DFD0AFFA82752A8FFFFFFA9FFA8FF
%A8FD09FFA8FD06FFA8FD08FF7DA8FFA8FFA8FFAEFD15FFA8FD07FFA8A8CA
%FD09FFA8FD05FFA8A883FD07FFFD05A8FFA8FFA8AFA8FFA8FF7D597DFFA8
%A8A8FFFFFFA8FFA87D7DA8A8FFA8FFFD04A8FD09FFA8FD57FFA87D52FF7C
%52A852F852FFA85252277DA8A8A8FF5252A8FFA8A827207DFFA8FD08FFA8
%A9FFFFA8A8FFFFAFFFFFFFA8FFA8FFA8FFFFFFA8FD05FFA8A8A8FD07FFA8
%FFFFFFA8FFFFFFA8FD13FFAFFD05FF7DA8A8FFFFFFA8FD05FFA8FFA8FFFF
%FFA85227F87D52277D522752FF52A8A1F8F85252A8A805F8A87D52F8F8F8
%7D7D7DFD09FFA8FFA8FD18FFA8A8FD09FFA8FD1FFFA8FD11FFA8A87DFFA8
%FFA8FD08FFA852A8A8FF2752A8A87DA8A8CF527D7DFD08FFA8FD07FFA8FD
%0FFFA8AFA8A87DA8A8FFA8FFFFFFA8FFFFFFCFFD0FFFA8FD0DFFA8A8A8FD
%13FFA8FD07FFA8FFFFFFA8FFA8FFA827F8FFA8FFA8FFFFA8A8A8FD09FFA8
%FFFFFFA8FD0BFFA8FD0BFF5227A8FD09FFA8FD1DFFA8FD0DFFA8FD05FFA8
%FD05FFA8FD09FFA8A8767DFFFFA8FFA8A8A8FF7DFD04FF7EA87DA8A8A8FF
%FFAFFFA8FD0BFFA8FFA8FD04FF7DA8FF7DA8A8FFA8FD09FFAFFD0BFFA8FF
%A8FD04FFCFA8FFFFFFA8FFA8FFA8FD05FFA8FFA8FFFFFFA8FFFFFFA8FFA9
%A85227A8A87DFFA17D7DFF7DA8FFFFA8A8F87DA827F8FF7D7D7D5227A87D
%7DFD04FFA8527D7DFFA8FF7DFD11FFA8FFFFFFF876FF7D7DFF7DA8A8FFA8
%FD11FF52FD04A8FFA87D272727FFA8A8FFA87DFFFFFFA8FF52A8A8CFFFFF
%7DA8A8FFA8FFA8A8522DF87D7DA8A852F852522651FF7D7D52A8A8FFF827
%A852F827F827A8FF7DFD04FF52527D7DA8FFA8F851FFA8FFFFFFA8FFFFFF
%A8FFFFFFA8A8FFFFA8FFA8F84BFFF8F827527DFF7652A8A87DFD05FFA8FD
%05FFA87D27F8F827F8527E52F8272727F8F8F8FF7D52A8FF2727F8F8F84B
%F852A827FD07F85227F8F827FD04527DA87DA8A8A827F8F852A8F8F8A87D
%7D27767D52527DFD09FF52272752527D52527CA84BFD057D5252275252A8
%A8FFF852FF52F8F8F87DFF76F8FFA8A84B7DA8FFFFFF5252527D527D2727
%FD04F8277D27F8F82727F8F8277D5205A8A827F8F8275227F851FFFD07F8
%207D7D4B5252A87DFD06A8FFA87D51517CFFF8F8A8A87D527DFF7DA87DFD
%08FFA87D51A827F85227F8277DF8277DF8527D27FD04F852A8A8F827FF7D
%7D27F851FF52F8FFFF7DF827A8277DA8F8F852F8F85227F827F8F8F85252
%27F8F8F827F8275252F8F85252F8F8F8512752F852A827F8F8F827F8F8F8
%7DA8FFA8A87DFFA8FFFFFF7DA8FD04FFA8A8A827F8CAA8A8FD057D76FD09
%FF7D527D27F8FF51F852FFF876A8277CFFF8FD0427FF7D7D4B7DA8FFA8FF
%52A8FFA87652527DF852A85276FF7D7DA852F8A827275227F8A87D7D5252
%F82727F8F85227525252277C27F8F85252527DFF5227F827F8F8F8277DA8
%A8A87652A8FFA8FFFFA8A8FFA8FD05FF5252FFFF7DFFA87D7D7D76FD09FF
%7D277D5252FFA127A8FF527DFF7DA8A852527D527DFFA8527D7DA8A8FFFF
%7D7DFFFFFF277DA8527DFFFFFFA8FFFFFF7C52A87D27A85252FFFFA8A87D
%527DFF2752520552FF7DA1FFA8277D7DA8A8FFA87D522727FD0452FF7D59
%7D52F8FFA8A8A8FF7DFFFF2776FFA8A8A82727FFA87DFFA852A87D7DFD09
%FFA8FD13FFA8FFFFFF7DA8FFFFA8FFA8FD13FFA8A8A8FD07FFAFFD05FF51
%7DFD0CFFA8FFAFFD05FFA87D275227277D5227527C27527DF84B7D2776FF
%F8F8A87D275227277D7D27FD08FFA8A8A8FFA8FFA8FFA8FFA8FFFFFFA8FD
%07FFA8FFA8FFA8FFA8FFA8FFA8FD07FFA8FD05FFA8FFFFFFA8FFA8A8A8FF
%FFFFA8FFA8FFA8FFFFFFAFFFA8FFFFFFA8FFA8FD0DFFA87D27FD04F827FD
%09F805F852A8F8F88427FD04F87D2727FD09FFA8FD1BFFA77DA8FD2BFFA8
%FD0DFF7D2DF85227525227F82727F8F827F82727F852FFF8277D52F8F8F8
%207D52F8FD04FFA8FFA8FFFFA8A8FD0BFFA8FFFFFFA8FFA8FFA8FD05FFA8
%A87DA8A8FD0BFFA8FD07FFA8FD09FFA8FFA8FFA8FD07FFA8FD07FFA8FD06
%FFA852527D7D52A827F827A827527652527D277DA8F8F8A87D52275127A8
%2727FD04FFA8527D7DFFA8FFA8FD0DFFCAFFFFFFCFFD27FFCAFD15FFA8FD
%05FFA8FFA8A852527E52F852FF7D7DFFA8A87D7D7DFFF827A8FF84A87D7D
%A852F8FFFFA8FFA852527DA8A8A8FD05FFA8FD07FFA8FFFFFFA8FFFFFFA8
%FFFFFFA8FFA8FFA8A8A8FD05FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFA8FFA8
%FD05FFA8FFA8FD07FFA8FFFFFFA8FD07FFA8FFFFFFA82752FF7D52F8A8A8
%7DA8FFA8FFA87D7DFF7DA8A85252FFA87DA8A87DAF7D52FF527DFFFD04A8
%FFA8FFA8FD19FF7D52A8FD1FFFA8FD13FFA8FD05FFA8FFFFFFA8A8FD0DFF
%CAF827FD08FFA8A87D7DFD05FFA8FD07FFA8FD06FFA87DFD09FFA8FFFFFF
%A8FD05FFA8FD0BFFCFFFFFFFA8FFFFFFA8FD05FFA8FD09FFA8FD07FFA8FF
%A8FD05FFA8FFA8A8FD04FFA8FFA8FFA8FD05FFA8A87DF8F8FFA8FFA8FFA8
%FFA8A8FF7DA8FD06FFA8FD1DFFA8FD19FFA8FD0FFFA8FD10FFA152FFA8A8
%CFA87DA8FFA8A8FFFFFFA82752FFF827A876F8FF5227A8A87DA87D52FD05
%FFA8A8FD04FFAFFD13FFA8FD0DFFA8FD0BFFA8FD09FFAFFFA8FFAFFD07FF
%A8FFFFFFAFFFFFFFA8FFA8FD05FFFD05A8FF7D7DA8FFFD06A852A8A8F8F8
%A827F85227F8A87D52A8527DFD06FFA8FFFFFFA8FD13FFA9FD0DFFAFFD15
%FFA8FD13FFA8FD09FFA8FFA8FFFFA87DFFFFFFA8FFA8FD04FFA8F827A87D
%27FFA8A8A87D27A87D7DFD06FFA87DFFA8A8A8CA7DA8CFFFA8FFA8FFCAA8
%A7FFA8A8A8FFA8FFFD04A87DCAA8FFCAFFCAFFA8FFFFFFA8FFFFFFA8FFA8
%A8A8FFA8FFA8A8FFFFA8FFCAA8A8FFA8FFA8FFA8FFA8FFCACFA8FFA8FFA8
%FFFFA8A8FFA8FFA8CAA8FFA8FFA8A87DFFA8A8A8FFFFFFA8FFA8FFFFFFA8
%F8F8A87D7DA8FFA8FF7D7DFF7D52FD05FFC292BB92BB989992BB98BB92BB
%99BB98BB989992BB98BB98BB98BB92BB98BB92BB99BB92BB98BB98BB98BB
%98BB99BB92BB989992BB98BB92BB98BB929998BB92BB98BB98BB92BB98BB
%98BB98BB989992BB98BB98BB98BB929999FFA8A87DA8FFFFA8FFA8FF52F8
%A8FFA8FFA8A8F8F87D7C27A8A8FFFFA852A85252FD05FF92C2A7C94B204B
%A0A7A04BC9A0A0A7A7A0C9764BA0A14BA0A7CAA7C976764B76A0CAA7C9A1
%C9A7A176A0A7C9A0754BA17C764B754BA7A7CAA0A1A77520A04B26A7C9A0
%CAA0A0A7C9A1764BC9A7C976A1A7CA754BA1C9A04B20BB7D7DA8A87DFFA8
%A87D52F82752A8A8A8F84B7DF8F87D27F8525227FF7D52FF527DFD04FFCF
%C1765227525227277D27277D5227A852525227F853520527A8277DA82E28
%53057DFF7D277D5252A97D275227527D7D277DA9272884277DA82E53FF27
%F85327F87D5252A87D27A9A8522E5327A8FF277DFF27527D5227FF272099
%A87DFFA87DA8AF7EA87DF827A8A8FFA8527DFFF8F87D52F8A85252A8A852
%A8A87DFFA87D7D7D98762827275227525252277D51277D76277D51277D7D
%27527D2752A827527D2752FF762752522727275127522752272752A8FD07
%277DFF7D27A852277D5227A852277EA8FD04277DFF277DFF5227522752FF
%7D4BBBA87DA87D52FF52277DFF277DFFA8A8FFFFFFA85227A827F8A8A876
%FFA87DFF527DFF5227A87D995152A87D27A876277DFF277DA8527DFF4B7D
%7D5252FFA87DA8A876FF52277DA8A8FFFF7DA8FF277DA92E7DFF4B52A852
%F8A85227A87D27FFA87D7DA8277DA8527DFF527DA85227FF5200FFFFA8AF
%A8FFFF7D05FFFF5253A7997D27A84B27A852F852FF5252A8277DA8527DFF
%27527D52F8A17652A8A87DA87D7DA8A8A87DA8987527FFA9FFA97D277DA8
%527DFF27A1FF2752A9274BA8A87DFF7D7DA87D277D7DA8A8FF527DA8FFFF
%FF277DFFFFA8FF7627A8FFA8FF7D7DFFA852A8A82752FF277DAF527DFF27
%52FFA852FFA87DA8FFA8FFFD04A8277DA19927F85352F8A827F827A8F852
%7DF8277DF8277DF8F8A827F85227F8A87D7DFFA8A87DFD04FFBB98C299BB
%99C199C299C1C1C299C299BB99C199C299C199C299C299C199C299BB99C1
%99BB99BB99BB99C299BB99C199C199C199C299BB99C199C299C199C299C2
%99C199C199C299BB99C299BB92C199C199C299BB99C299BB9852F87D5252
%7D4BF852A85252A8F8527D2752A8F827A852F87D27F8A8A87DFFA87DFD05
%FFA7A0A0C9A0C9A0C9A0C9A0A0A0C9A0C9A0A0A0C3A0C3A0C9A0A09AA06F
%A0A07599C9A0C9A0C3A0C9A0C3A0C9A0C3A0C9A0C3A09A4AA0A0C975A0A0
%C3A0C3A0C9A1C3A0C9A0A0A1C9A0C2A0A0A0C9A0C3A0A0A0C9A0A0A0C9A0
%762727275227522727527DF8527DF8277D277DA8F8F8A827F82E27F87D52
%52FF5252A8FD05FFA8FD05FFAFAFFFFF84FD07FFAFFD05FF277DAF84A8FF
%F852A98453FF7D52A9FD0BFF7D52A8AFA9A8AFFFA9A8FFFFA8FF7D52FFA9
%59A87EA87D7D52A8FF7DA8FF53A8FFFFAFFFA87E7DA87D7D7DA87DA87DA8
%7D5276A8277DA87D7DA8F8277E52F87D5252A8A87DFF7D52FD05FFA8FFFF
%FFA8FFA8A87DFFFFA8A8FFFFFFA8527DFD04A8FFA8F827A827A1A8F827A8
%27F8A852F8A8A8FFFFFFA87D7DA8A8FFFF7D275227277D7D525227522727
%7D52F87D5227F827282EF80552FFF876A82727527DA85227F8FFFD05A8FF
%A87DA8FF7DFFFFFFA8FF7DA87DF8F8A87D76A8FFA8A87D7DFF7DA8A8FD05
%FFA8FFA8FFFFFFA8FFA8FFA8FFA8FFCFA8F8277DA87DFFA8FFF8272EF852
%FFF852A852F8FF52F8A8FFA8FFFFFF27527DA8A8FF27FD04F87D5227F827
%F8F8F8A84B27525227F8F85227F8F852A8F852FFF8F8F87D52F8F827A8FF
%A8FFA8A8FFA87DA8FFA8A8FD04FF7D7DA8F820A8FFFFFFA8FF7D5227FF52
%52FD06FF52F852F8F85227F8527DF8277DF82752F8F82727275227F8527D
%FFF8527DF852FF4BF8A87D27F82752F827527D5227F8265227FD05F82752
%27FD07F85227FD08F852F852A8FD08F8CAA8FFA8FFA8FFA8A87D7D277DFF
%A8A8FFA8A8A7F8F8A87D7DA8A87DA87D52FF52A8FD06FF27F87D51F8FF52
%F827FFF8527DF84BA8F827522705A87D527DFFFF27F827F852FF52F8FF52
%F8F852A8F827A87DA8A84BF8A851F8F820F8F8275227F8F820F8F8F82752
%522727F8F8F820F82727F851AF2727FD05F827A8FFFFFFA8A8FFFFA8A87D
%527DFFA8FFFFFFA8A8F827A852F8FD05FFA8FF7D52FF847D7DFD04A8FF4B
%F8A852F852A8F851FFF852A8A87D7DF8F8A87D52A87DA8527D7DF827FF52
%52FF7D05F827A8F852AFFFA852F8F8A852FD04F85227F82752F8F827F827
%27F8277D27275227F8272752F852A8A827FD04F82752A8A8FFA8A8A8FFFF
%FFA8FFF876FD04FFA8FFA8F8F8A85227A8FFFFFFA8A8FF5252FFA8277D7D
%FFA8FFA8FFA8FFA8A8A8FFCAFFCFFFA8FFFFFFA8FFA8FFFFA8F852A87DA8
%FFF852FFFFA8FFA87DA8FFFFA8A8FFFFFF7DA87DFFA8A87DFFA8A8A8FFA8
%FF7DA8A8FFA8FFA8FFA8FFA8A87DA8A8FFA8A8A8FFFFFFFD05A8FFA8FFFF
%A8A8A8FFFFA8FFA8204BFFA8FFFFFFA8A8F827A8FFA8FFFD04A87DFF5227
%FF7D7D527DA8A8A8FFA8A8FFFF7DA8FD04FF7DA8FD04FFFD04A87DA7A8FF
%A87D277D7DFFA8FFFFFFA8FFFFFF7DA8A8FFA8FFA8A8A8FFFFA8A8FFA8FF
%FFFFAEFFA8FFA8FFFFFFA8A8A8FFA8A8A8FFA8A884FFFFFFA8FFFFFFA8FF
%FD05A87D52FFA8A87DA87DA77D7DA8FF7DA8A8F8F8A87D527D7D52A87D7D
%FF7D7DFD06FFA8A8FFFFA8FFA8FFFFFF7DFFFFA8A8FFA8FFA8FFA8FFA8A8
%A8FFA8FF522752A8FFFFA8FFFFFFA8FD05FFA8A8FFFFA8FFCFFFFF52F8A8
%A8FFFFFFCFFFA8FFFFFFA8FFFD05A8FD05FFA8FFA8A8A8FFFFFFA8FFFFFF
%A8FFA8A8A8FFFFA87D7DA1FFA8FFFFA8A8A8F8F8A8FFA8A8A8CAFFFF7DA8
%7D597DA8FFFFFFA8A87DFFA8A8FFA87DFFFFA8A8FF7DA8FF7DA8FF7DA8FF
%A852FFA8A8A87D277D7DA8A8FFA8FFA8A8A8FFA8FFFFA87DFFA8A8FF7D27
%FFA87D7DA8A8FFA8A8A8FFA8FFFFCFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8
%A8A8FFA8FFA8FFFD07A8FF7D7D52A8A8527DFFA8A87DF8F8FD06A8FFA8A8
%FF7D7DA8FD05FFA8FFFF52F8FD05FFF87CFF2051FFFFFFA8FD05FFA8FFFF
%FFAFFFA8FFCFFFFF527DFFA9FFFFFFA8FD07FFA8A8FFFFA8A8AFFD0BFFA8
%FFA9FFA8A8A8FD05FFA8A8A8FD08FF7D527DA8A87DA8FF7D7DA8F8527EFF
%FFA8F827FFFFA8FFA8A8A8FF84FF5252FD06FF7D27FF27F8A87D277DA8F8
%27FFF851A85252A82752A87D27A87D7DA87D4B7D7DFFA8A8277DA8527CFF
%277DA85251A85252A87D27FF7D52527D7DA8A8527DA8517DA8527CA84B52
%A87D27A87D767DA8A8A852527DA8277DA8FFA8A17D5227A87D52A8FF5252
%27F827FF7DA8A8F8F8FFA8A8FFA852FF7D52FF5252FD06FF27F8FF7D27FF
%27F827FF4B7DA8527DFFF8277DF8F8FF27F8A852F8FF27F87D7D52A8A852
%7DCFF852A8F84BFFF8F8A852F8FF27F8FF52F87D27F852FFF852A82752FF
%F852A8F8F8FF27F8A87605A8A8A8FF52F8A8A8F827FF512D2752F8F87D7D
%277DA827F820F827522752A8F826A87D27522727A852F8FF7D27FD06FF52
%27FFA8A8A87D277DA8FFFFFFA8FFA84B52FF5152A87D27A85252A87D27A8
%7D7DA8FF7DA8A8527DFFF87DFF5227FF5227A87D27FF5227A87D277DA852
%7DFFF852A82752FFF8F8FF52F8FFA87DA8FFA8FF7D52A8FF277DA8FD06F8
%7D522752A82727FD05F8527DF8F87D27FD04F827F8F8FF5252FD06FFA8FF
%A8FFFFFFA8FFA8FD07FFAFFD07FFA8FFFFFFAFFFA8FD05FFA8FFFFFFCFA8
%A8FFFFFFA8CAA8FFA8FFA8A87DFD07FFA82776FF7DA8A85252FF7D52A8FD
%05FFA8FFAFFFA8FFAFA8F8F8F85227277D52F8527D272752FD04F851AFF8
%275227FD04F82727F8FFA8A8FFFFFFA8FFFFA8FD0CFFA8FFFFFFA8FFFFFF
%A8FD07FFA8A8A8FFA8FFA8A8A8FD0BFFA8FFFFFFA8FD05FFA8FFA8AFA8FD
%05FFA8FFA8FD05FFA8FFA8FFA8A8FFFFA8FFA85227527D7D277D522752A8
%272727525252277DA8F8F8A87D52272705A85227FD04FF7D527D7DFFA8FD
%05FFCFFD0BFFAEFD0BFFA8FD15FFA8FD19FFAEFD0BFFA8A87D53277DA8FF
%FFFF7D5227A1FFA8A8CAF8F8A8FFA8A87DA8FFA152FD04FF5252527DA8A8
%A8FFA8FFFFFFA8FFFFFFA8FFA8FFA8FFA8FD07FFA8FFA8FFA8FFA8FD07FF
%AFFD05FFAFFFA8FFFFFFA8A8A8FD05FFA8FFA8FD05FFA8FFFFFFA8FFFFFF
%A8FD05FFA8FFA8FFFFFFA8FFFFFFA8A87D2752FFA8FFA8FFFF2752FF7DA8
%A8F8F8FFA8A8A8FFA8FFA87DFD05FFA8A8A8FFA8FD09FFA8FD0FFFA8FFFF
%FFA8FD13FFA8AEA8FD07FFA8FFA8FD15FFA8FFFFFFA8FFA8FFFFFF7DA8FF
%FFA8FF7D52FD04FF7D525152FFFFFFA8A8FF277DA8FD08FFA8A8A8FFA8FF
%FFFFA8FD0FFFA8FFFFFFA8FFFFFFA8FFFFFFA8FD0FFFA8FFA8FFA8FD05FF
%A8FFFFFFA8FD05FFA8FD0BFFA8FFFFFFA87D7DA8A87D4B52515252A87D52
%F8A87C52A87D275227277DFF7DA87D5152A8FD09FFA8FD06FFA8A8FD07FF
%AFFD0BFFA8FD07FFA8FD0FFFA8FFCFFD05FFA8FFFFFFA8FD17FF27527DA8
%27F87D52F876FF7D527D5927F87DA8A8F8F8F852A9A87D52FFA87DFD08FF
%A8A8FD04FFA8FFA8FD05FFA8FFFFFFA8FFA8FFFFFFA8FFA8FFA8FFA8FD05
%FFA8FD0DFFA8FD07FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFFFFFA8FD07FFA8
%FFFFFFA8FFA826FD05F87D522E7DFF2705FD05F8527DF8F87D5252F82727
%A87D7DFD09FFA8FD31FFA8A8FD22FFFD04A852A87D7DA8FF7DFFFF2027AF
%527D7D2752A8F827A8A852A87D7DFFFF7DFD09FFA8A8FD05FFA8FD07FFA8
%FD09FFA8FFA8FD05FFA8FFA8FD0FFFA8A8A8FD05FFA8FFA8A8FFFFA8FFFF
%FFA8FD04FFA8A8FD0AFF7D52FFA8A8A8A9A8FFA8A8A8FFF876FFFFA8FFFF
%A87DF8F8FFA87DA8A8A8FFA8A8FD09FFA8FFAEFD0BFFA8FFFFFFA8FD05FF
%A8FD05FFA8A852A8FFA8A8FD09FFA8FD05FFA8FFA8FFFFFFA8FFFFFFA8FF
%A8FFFFFFA8FD05FF7E52F8A8FD04FFA8FFA8FFA8A8A8FFA8A87DA8A8A8A7
%7D52A87D7DA8FFFFFFA87D7D7DA8A87DA8A8FFFFFFA8FD08FFA8A8FFA8A8
%FFFFFFAFFFFFFFA8FFA8A87DA8A8FFA8FFFFFFA8F84BFFA8FFAF7D7DFFFF
%FF277DA9FFFFFFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8FFFFA87DFFA8FFA8
%A87DFFA8AFFFFFA8FFA827277DF852A87D7DA8527D7D7627A852525227F8
%7D27F827A87D7D527D7DA87DA87D52275252A87D52277D7DA8FD04FFA87D
%A8A8FFA8FF7DA8A8FD05FF27A1FD0CFFF852FFFFA8FF7DFFFFFFA87D527D
%FFFFFFA87DA8A8FFA8FFFFFFA8A8277DA8FFA8FFFD08A8FFFF7DFD05A852
%7DA8527DA97D522727F8522727F827F8A85227A87D277D7D27F827F85252
%272752F8277D7D4B27F8277D7D52FD04FFA8527D7DA8A852F8F827A8A87D
%A8A87DA8FFA8CAA8FFA8A8A1A8A87D52F84BFF525227527DFFA8A8F8F8F8
%A8A8A8F8F8F8A8A87D527DA852FD04F8527D5327F85205FD04F87D27F8F8
%27F8272727527DF852A827FD07F8A8A17DA8A87DFFA8A87D52F852A87D27
%F8A8A87D5227FFA8CAA87D52FFA87DFD04FFA8A8A87DFF27F82727F87D27
%F8275227527DF8277DF820F8F8F8522727F8527D2752FFF852A852F8FF52
%F8F85252F8277DF827F8F8F8272852FD04F8277D27F8F820F8F8F8205227
%F820F8F8F820F8527DF84BA8FD05F820F8F87DFFFFFFA9FFFFA87DA87D27
%52FF277DA8FFA77D2752A8A852FFFFFFA8A87DFD06FFA8FFFF52F85205F8
%5252F84B7C27527DF85252F8F827F827527D52F8F82727A1FF5252A85127
%FF52F8F8277D27527D27F827F8F8275205FD04F8275227FD07F85327FD07
%F8277DF852A8FD08F85252A8A87D4BA8522752A827527C27277D527D5227
%F8A85227527D7D76274BFD09FF2705525227FF52F851FF7DA8A82752A8F8
%527D27F8A8A8FFF82752527DFF52A1A8A87DFF5227F852A82752A8F82752
%27F8A827F85227F827277D5227F827F8F8F8277D7D2720F82727524B7D7D
%2776FF4B27F820F827F8F8F852525227275252F87CFF7E5227272705272E
%7D27275252F82727522705F8FD09FF7D277D7DA8A87D277DA8FFAEFF52A7
%A85276A84B52A8A852F852FF52A8A8527DA8A8FFFFA87D527DFF277DA852
%27A87C527D7D52A87D527DA8A8A87DF8F876515252FFA8A805277DA8A8FF
%A8A127A7FFA87652F8F85227F8527DA82752527D52522727A87D527E5252
%527D7D2727A87D52527D52522751FD09FFA8FFA8FD0FFFA8FFFFFFA87DF8
%52FFFFA8A752A8FD14FFA8FD07FF527DA8FD06FFA87DFFFFFFA8FFA87DA8
%FFA8FFA85227A8525276A8A8A87DA8A8A87D7D51A8A8A8527D7DA87D7DF8
%F87DFFA8A87D7D277DA8FD08FFA8A8FD04FFA8FFA8FFFFFFA8FFA8FFA8FF
%A8FD05FFA82752FFA8A87D277DFD07FFA8FFFFFFA8FFA8FD05FFA8FD07FF
%A8FFA8A8A8FD07FFA8FD05FFA8FFFFFFA8A8A8FFA8AFA82E52FF7DA8A8A8
%7DA87DA8A8A85252527DA852F8F8F8527DFF527D7D2752AFFD09FFA8FD15
%FFA8A8A8FD05FFA8FD1FFFA8FD07FFA8FD0BFFA8FD05FF277DA9A8A8FF52
%A7FF52F8FF7D527E7D4BA84B20F820F87DFF5152FFF852A8FD08FFA8A8A8
%FD0DFFA8FFFFFFA8FFFFFFA8FFFFFFA8FD07FFA8FFFFFFA8FD09FFA8FFFF
%FFA8A8A8FD05FFA8FD07FFA8FFA8FFFFFFA8FD05FFAEFD05FFA8F827A8F8
%527DF827A827F82727F87DF8F87D27FD04F827A8F82752F8057DFD09FFA8
%FD22FFA8A8FD11FFA8FD07FFA8FD19FF52A1A85276A8527DA87D52524B76
%7D7D52FF7DFD04527DA8527CA8527DA8FD04FF5952527DA8A8A8FFFFFFA8
%FD07FFA8FFFFFFAFFFFFFFA8FD05FFA8FFA8FFA8FFA8FFA8FD0DFFA8FFA8
%FD09FFA8A8A8FFA8FD0DFFA8FFFFFFA8FFA8FD20FFA8FD04FF7D277D7DFF
%A8FD0FFFA8FD0FFF7DFD1DFFCFFD37FFA8FD04FFA8A87DA8FFA8A8FD05FF
%A8FD05FFA8FD05FFA8A8A8FFFFFFA8FFA8FFA8FFA8A8A8FFA8FD0FFFA8FF
%A8FD07FFA8FD05FFA8FD07FFA8FFA8A752FFFFFFA8FFFFFFA8FD28FFA8FD
%0CFFA8A8FD0FFFA8FD05FFAEFD0DFFA8FD0BFFA8FFFFFFA8FD33FFA8FD08
%FFA8A9FFFFA8FFFFA87DFFFFFFA8FFA8A8A8FFA8CAA8FFFFFFA8FFFFFFA8
%FFA8FFA8FFFFFFA8FFFFFFA8FD09FFA8FFA8FD05FFA8FFA8FFFFFFA8FFA8
%A8A8FFA8FFA8FFFFFFAFFFFFFFA8FD05FFA8FD20FFA8FD09FFA8FD05FF7D
%527DFD04FF527DFF52A8FFA87DFFFFFFA8FD07FFA8FFFFA8A8FD05FFA8FF
%A8FD11FFA8FFFFFF7DA8FD0AFF5227FD26FFA8FD08FFA8A8A8FFCFFFFFFF
%A8FD05FFA8FFA8A8A8FFA8FD05FFA8FD05FF7D7DA8FD07FF7DA8A827F8CF
%FD04FFA8FFFFFFA8A87DA8FD04FFA8FFA8F851FFA8FFA8FFFFFF7D52A8FF
%A8FD07FFA8FD1EFFA8FD09FFA8FFFFFFA8FF7C277CFD04FF527DFD04FFA8
%A8FD09FFA8A87DA8FD04FFA8FD05FF527DFFFFFF7D7DA8FD04FFA8A8A8FD
%05FFA8FFF852AF27F8FD04FFA87DFD29FFA8FD08FFA8A87DFFA8FFA8FFA8
%FD05FFF852FD04FF7D7DA8A87DFFFFFFA8FFA8A87DA8A8FFFFFFA82776FF
%A8FFA85227FD04FF52F8A8A8FFA8FFFFFFA8A8A8FFFFFFA8527DFF7DA8A8
%FFA8FFA8A8A8FFFFFFA8FFA8FFA8FD20FFA8FD09FF522DA8A87DFD07FFA8
%2752FD04FFA8A8FFA8A87DA8FD04FFA87D52A8FD04FFF876FF527DFF0527
%A8FFFFFF27F87DFFFFFFA8FFFFA8277DFF527DFF277DFD08FFA8FF7D52A8
%FFFFFFA8FD17FFA8FD09FFA8FD09FF7D52FD04A8FFA8A8A8FFA8A8A8AFA8
%A8A8FFA8A8A8FFA87D7DFFFD04A87D7D7DFFA8A8A87D7DA8527DA87D52FD
%05A876A8A8FFA8A8A8FFA8527DFF527DA87C7DA8A8FFA8A8A8FFA8A8A87D
%52A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8
%A8FFA8A8A8FFFD04A8FD96FFFD04A8FD0CFF7DA87DFD0CFFA87DA87DFD0D
%FFA8A87DFD0BFFA87DA8A8A8FD0BFFFD04A8FD0CFF7DA87DA9FD1EFFA852
%A87DFD0CFFFD047DFD0BFFA8527D7DA8FD0BFF51767D7DFD0BFFA852767D
%A8FD0BFF7D527D7DFD0CFFA8527D7DFD1EFFA87D7D7DA8FD0BFF52A852A8
%FD0BFFA8527D52FD0BFFA8FD047DFD0BFFA87D7D7DA8FD0BFF52527D7DA8
%FD0BFF7DFF52A8FD5DFFA8FD69FF7DA8FFA8FFFFFFA8FFFFFFA8FD73FFA8
%5252527D5252FFA8527D527DFD73FF7D7D2752525227FF7D5227277DFD74
%FFA8FDBFFFFF
%%EndData

%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                               
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0

%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where
{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse
{ userdict /AI11_PDFMark5 /cleartomark load put
userdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}
{ userdict /AI11_PDFMark5 /pdfmark load put
userdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse
[/NamespacePush AI11_PDFMark5
[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5
[{ai_metadata_stream_123}
currentfile 0 (%  &&end XMP packet marker&&)
/SubFileDecode filter AI11_ReadMetadata_PDFMark5
<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.3-c011 66.145661, 2012/02/06-14:56:27        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS6 (Windows)</xmp:CreatorTool>
         <xmp:CreateDate>2014-11-05T20:08:38+09:00</xmp:CreateDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>208</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgA0AEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXzF+dOsMn54W+i&#xA;2fl39O6nd2UcsMQvfqXILFKWWrDh8Kxlqk79MUvNNW/M7zjcprulnRUgGjie2aNZbYtY8eaULiIG&#xA;4Mfp/a5GvHrviqUeXfPWsDybfLruijX/AC6bn/TX+sR2bcv3XBA0SeuOMnBqqd+nSuKsnuPzT85a&#xA;ZF5dtLXy5FYaLqaxxafYma0uGubWkaxxeu8LSxH05FXmxDb1O4xWmLa75yubDzrqF1FoX6L1N444&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>129.822222</stDim:w>
            <stDim:h>104.069444</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Helvetica</stFnt:fontName>
                  <stFnt:fontFamily>Helvetica</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>Open Type</stFnt:fontType>
                  <stFnt:versionString>001.006</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Helvetica.otf</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xmpTPg:Fonts>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>기본 견본 그룹</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>
%  &&end XMP packet marker&&
[{ai_metadata_stream_123}
<</Type /Metadata /Subtype /XML>>
/PUT AI11_PDFMark5
[/Document
1 dict begin /Metadata {ai_metadata_stream_123} def
currentdict end /BDC AI11_PDFMark5

%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -282.752 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 282.752 li
351.503 282.752 li
351.503 0 li
cp
clp
25.4199 .25 mo
25.4199 256.5 li
351.253 256.5 li
351.253 .25 li
25.4199 .25 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
ef
.5 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
25.4199 .25 mo
25.4199 256.5 li
351.253 256.5 li
351.253 .25 li
25.4199 .25 li
@
25.4199 .25 mo
25.4199 256.5 li
351.253 256.5 li
351.253 .25 li
cp
/0 
<<
/CSA /0 get_csa_by_name
/MappedCSA null
/HiVal 99 
/Lookup <~
z!s/N(#6b82$4$n;%LNOC&.AsI'+YTR(D7>\)&!Y`*>TCj*uGgp+rV@",odj(-lsB//0Q,9/gDM>0dS(
F1aaUM2_$6V3\)Z[4YA;d5VXnl68L=r7Q*('82rL-905*5:-CW<;*R2D<C8tN=%,CT>=_-^>tRQd?qj2
m@STMqAl28&BiIn/CfXF6Dd$*?EElNEF^J8OG[anXH=U=^I:lsgJ8&KnK5>0#Kl1T)LiI21N-0"<O*GU
DP'_9NQ%!lVR"9P`RtQ.iSqhdrTo+I)UQ's1V3$K;ViciBWg&GMX-J\TY*kCbYagpnZCR:![%E^,[@s!
3\"fE>\>>`G\u22T];hS`]W7eg^9+4s^TOJ&_6Kt4_R$:@_mHLG`O2mT`j`0]a18NiaL\`pb.P0(bJ(K
4beL`<cG@/HcbmJRd)Ee]d`0.fe&]Ire]Pn)f#u.1fZhU=g!@pFgX4BRh9s]Yhpg/diRZSnj4Dr!k1\S
-khP"6leg[DmGR$K~>
>>
/CSD add_res
/0 /CSD get_res idxcs
gsave
clp
[1 0 0 -1 0 282.752 ]ct
[325.833 0 0 256.25 25.4199 26.2524 ]ct
snap_to_device
<<
/T 1
/W 76 
/H 88 
/M[76 0 0 -88 0 88 ]
/BC 8 
/D[0 255 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
IS)[0-p\SX&Hs[p0GYTs'OqFN,%E-5('$!*57^V$&c`5=*+L0/*#K;-(DRA_1)(Q*/49bR)e1:+%V%k9
;$n^]@idgD).R.V'JC:l11N-W/km3O70#FM.KC)#)e0Wm2\7?"'`]0Q7Su8h(B?4#,q_1X*+MbE!&$J:
$qgR^2^r5\@glib6SeXN#U]U^@k_Cg'-m9^&7/jQ!*fL:!$5Vj9J'aO@p/\="@Qa09c3e<$!(PG@:NdZ
@fSXi@fok=!"Jj9,ZS>a!*!H1$"G&a@hW?6@kqO?@kD1l@jh<r!#8uK,;*IR@k]BB-=^=k1J]Z6/i,+i
11MP#*+L^5*&1+f9NE`T2bIRQ%V%.]@h:t:@gr?H:]Ou<-"@Kp&n;>[).Ok#*b,ru*]"!:$Pa+\$"FTX
)d<VY1JBf=1.a5d$Y(YA(h4t('.4:s6XpHl$oAbB&2YA:3$]Y74p,:S69%"4#Se'T4TH,s"U,D:3='*r
%fd%B""P&c)#aLh+T`&T!=f2;&-Orq+TMKC(]c;r)[-NJ"qMCT+Uf#',7Y@n7M$+2)\E9a+oiDn#lXf<
!<<W1"T\W(*<cEI!!iQ*!"/l/$N'l)!<i?$&HiRL!Xf)1!!iQ-!"Ao1!<<*8!!30$$7cA`#65A>%3Z&Y
%:]nQ&hF:d!%.mU!!rW*!uV1T!"o86!!!$"!X&K(!!!$#!!!$"!"B)3!<`B)$j$>-*t/;Q!WW`3!!*0*
&d&+9!=&T.&-E%C3!pZ5"p+c*#5S<%!so#0rVus3!W;uu"TAB$"Vh";!<<-##RCY8!WW<.#ljr/#Qau-
rW!60!"&`,(BFU<%K$23$jT<'!!=\N#lXf;$4Hn7"<7CB#QOl*!WW3%#64`)qu?a"!WE'!#lXf-!tbV9
"U+f)!W`9%rW!fD!X8W3.1n!;3sHl5@gXLe@g5"-56s[X!=o/1#QOi.!WrE&!<E6*!!3#u!#5,,"p+l,
!"],7rW!0;#QbD7!WWB%!%epV-R9Hq)Ij'Z).3h^#=14P&RtkE#QP23#lt#+!<<3'#lk,0!!!$$"98E&
r;Zj$!W<!#"9JZ-q>^L!r;Zg!/-u:V#p'6Z$6]WS!"T88%:]AI',1l[!<E0#"T\T'!<=GH#Qt;2!<E0*
!!<#t%0Z_3!<W<2!rr<'!!3?'!$2O_!!!$"!"fYE$NpqG!":4X'+P!C";3<s"qh+O$N:&+$N:#4!<<?)
!!30&!!!6%!!!)u!!!0#!!<K/!!E-!#6Or+!snr-"9&9<"onZ:0b-\i@fduK57ne?2$=+"@ho:L!#,>3
"p4i0!rr<%rVus-#l=T("p+c*rW!*&!!!'#!WE'G!<N6$*<?0@!s/H*#Qau+6=VK@,YeUt%qA3a$tB`%
@q-f8!=&W+!"8])#6=u2!!WK)*W5s@%fct<!rW*%"9SW("8i-'!W`9)!<<<!!#c1^#6kD5!"&f.2\lZb
"sXNb1_]ok!!!6("8r33"onW)&IfZZ#ljr/!!!*$!!E-!!W`B)r;[!&!!!`@"8W!7!<E0-"98K+":"o,
$P!DI"Uth>%LE1;#lXf("TAB$#Q+QF!t&NB!!!$&!!NQ/!!*'"!<<0$!<<9)!<iH(%KQb;!s/B$)@6HG
!"f2;!!E<,!!WH,'dWkb#nmUZ!!<9(rW!?-!!!6("TSND!#Z+Oqu?]trW)ir0`qOY!<`N*"T\f2!!!0*
#QP/8!!r`B;%4NM+p8ba"r(&H>mV\n9+*BS(]j[D!!E?$!"]D=!b23b!?MOR!!!'#!!33#"==4*$53CZ
=\f&9!%%[O!&Oui!>u.L$l1d2,n_&)3F`mQ3"lU.)#e"K'+YU`#RhIR#6G2<!"p.Q$O(#?@oY`*5mSY?
$ip85'`\t;?Wpqc@noj1@h1p5:Ldm,?4:':@l#uB?Ss_p%MK0j=^r"Q&KsC]0e$TN@lImP@m!:F;e';c
!+Q!Y@q,UN!>8lh"UAO*@m'^"%m"313b(?.@j5Dm+[]`J>lJ4o@i?:&'+>!F)[$-R(_1$].lJ(P#ll,Y
(LmnJ)GgE;:gOk@@fR,X9E7Kh/RoZ,$r.[M+_*NB3A=e=@fo%s<Cm+!%mNu'94Lt3:FHDa0+&*g,Q7Zi
%LYo6$kG*L7Un/_"ChaH#t5538PTOZ(`!_c0E;Mb(1RUW$jdVs@i&60@fe#&@h<-D8fKet@m_O\$8c7&
=&fnc*_uqG!#GVU!!Na!!AOfr'ak!P!X&K'"TeZ/!Wj,;">Ku\!$hOE$NUA3!!WT2!rseU$O-SD$j%+M
=9\p2#R^_@!$)sd#mptm/lN3+"=smi$ni0%"!A4Q)asi1%KmL[!snr8!!*'*"V;:H$P!XH!!3-.quA,H
!=g:V!!391!XAfD!WWH1!!!$""9\]+">3h_@maa'@nU;s@gZ][raQ$V7L&tl!!30$"9&9,!=8o0"q(k?
!!<&u"9Sc,!<`<$#6b51!WW3%"TAB$"oJ?%!WW6*,%Fti:1IQ,@fcsH/H0,^/Rnqb!rN$,"Tnc-!X&K(
!X^n)!WE'8!WW31!=8c-(B=L<!!!-%"U+l,!!!'.r;Zg$rW";u@jWoY@m+<j@k:gm@iS*N?Qr8H"TST)
!<<*#!!`K0!<<-#$igM1!!WH(!!<9'!"T&:!!!'#!!`K,!WW3&!sni*)$C6G!s&uH-pJb_%6#(7+?'^=
#ok<E(1RFF!!!&u!!!-"!!W`1!<NE*)u]gK"TSN'!!E?(!rrT,!WWE)#6"T*!<W<*!rW*:"TSX&"s.7Z
*!QNM,mP.k1'Jd4,nMp:#m(#*r;\YU!!<<'"9A[$"9\],!X&K(!!!$"!<<?-$3:/3%0?\5!!WN+!!3-#
":+u4!snr-$31/0r;[9/$Y'/?!<`E3!<E6%#Q=](!>k_8"9AN3!!<-"!<NE'!"K#0!<`B&!rrE)!<<<*
!W;uu#Q4W,":bG4!!NB>$ig;.#lt84!!E9C@fllB":GhB!<<6-r;Zm$!!E-!#6=l5!!*'""oA9,!<N6$
$3L8/"on`(!!*0,rW!f>!!!'#!=M$s'+,re'*8.G@h2rX<Y%k5/b/lA$2sr2!rr<&!!N?&!W;uu#5S<"
"8r3m!sel,!<<*("TSN,'bq/f+TiGa(^`#)@i8c@@h(R$!"B&8!!!'%!!3-#"98Z,#lju+#64i4!!**&
"98H&!!N]0!XT26#QOi,r;Zs$!"K#5rW!fD%gN:Y!"/o;!!`mA$UFk2$qMNI%0ICJ$[r6f!uhOZ":t\K
#T='P!!EW0!"8o8"rn'X#8."?!"oJA!Xo8@!tYh?#652C"UkkF!XBMF#m157$NL89@h'Xj#mVLR,9B/Z
$Od7@#7+Q8%0-V;%1GN&*u,b$$NLA7<rcA'$k!^K:BD^@'EL8q2Zs9j63I8k#T?8B#_!R4!Y5P>@fZf<
%:^VV(^U@'#T-c6&jm$Z"s"7K)b(,:!%C,d!=fMF'IX2'58ke92A?-4$"G>e!#Ybe!uj];!%7gV:(A7R
'JBn9#oYU02]*-:(Lnt&0h)X7<F["Y;I_^s0O@Ud8Rjtp+^d*9&7\7@(1UQY)e/kX+F[f]@h*!0@mjfV
@j,>>@fU!A@hE2Z@gFCd1(5N8>6kZD$O^Gc@gPU0,T7b7/Jf9R)&Ntn,QJ\k-jg_>)[6QZ#\+Pn#?E91
-t=)e$O&$e,6o=k)&=8u"TTYG&n;4X*!@l&7g``0-k%$q#7<:3@gs1].Urbl'4VP_$[u4[@j,=n4pFFn
@k8N+6O3i%@gNkX@hTh!3sS7k@hi)L>7P-E:^%RC((Dr'@i61p.:XT4'4;nl)Ij:f,%ETB(FfRj&cr7>
!!*'(+9MoM!!WT<&0_2X(^p]N"onW('F"aA+oh`P!sJr7#6tD6$NN$i!sJi9!!4BT.pY@]@i@Z]@k2%5
@iJo:@h9ga"UP/8!"f24$6Klk!!!-,$k+Zh"TSW1!!E9%$P<@F!$M=C!!*'"#m(),!WW3$%KHJ0!rr<T
@lm:B@NA&`@js_T@iAi;@i-m&r;[$&('"=9'aXd=&gJ;W!([.p!u:k:!<<-$!ru:9IK1_q)$9p?)?:iZ
$615i(]bc[(BY7.1-[?C.5bTY@jX5E=r:a3>9H$4!"&`G!>bb>!WWK2!s<$7&d2\l;?128!!`Q*"p4iU
+=7C#*tB_D;@bcQ0gJ,,5QjIo#Rs!+&eP]^+9rqk*t'#1@iSMV(_I)T$N^Y>"pt_<((+Ol)@6CR5[sn+
+_)'n$O?_:6l?1=raSJM8mGk9,[)`o@maa9&7>cN@k_>$":P\U"ssHk!!!'I'Oq7M#7)J@@nL5m@jtnG
@l7as;DM`:#$)LC"Ci'7@m+<W1ga`JraPt;6Mt<n3;d7f87N2.@fm#C#SSir*$.6K*s`Sm@hCC&)B1PD
+(G^h&Rukj(1TX.&MGF5=CYh@@gZ^U(1S1.&n;XS@f\o$rF5m`4]hVm"%Qi7<rHMa!!E?@!!si:":5&<
$"+Z\!<WH2!"<?J@h3&R@gX,%@gkR6'/1)0#=JYa@i8ba"]8b9raQKu@m+<s@nC/W9J^0N3*d+1raT\%
(C(EX!<W<s!WW<,%V$,K"T\W/!"9#6#Qb)5":>,<!!NX<&M*ol!"K,Y"9KAE!?;m^%ho9c"UlOn!"K8C
$6U)r"rRCG'bCr\"p5MT!"]lT'F=aH$tBSS!tGn`'F#NW+9;NF,QN8n!?D@h&c`D5/IVmb#QXuE$46eT
$NV(E#6G#9#RLJ3&H`^R!"KbE#7ge>#oO?f1'8+/*?$=-.1Ti*4!lg'/K"Wq!X\rM#8[FK#S%"U'F"q?
2#md`!!`T0!YGJD"onX5*!6?M&HDkA%2'Ta"98]6(`35S#lkGJ&dDMH*&@`u!#5uR!>#kT!uE*`)$1]W
&-*XL,Qeqb/-H[m80JWN#m1eB%KIUQ'EC<$*u,+`(C1?J$3^kC&-NFJ#R;:O$3C2:#nmaL/gq&n!!a3J
#o<pW$3LPI#%IoH#@dgFrX<fV!=]MB%LEjV!(7)&!u(tJ#S%=`!"]tL$3L>9#R(eN#os<W&-*CZ$OR+=
!B)nL.KM=E@j;-h?i^rF*XN`p%q?>a$Y']W$=bDm'OW+T%q@(-)D`%:&Ru)V*+KRj'Os!j&7Zb^%U9r_
*b-0d.1fi'@j>Iq'g![N$T8/S>%7e,&Rttl'KQ4l@fRY[@fd2B*roda@g$9Q@g?KY3<qDI@g6EC@g-?Q
@fU!P@g?KD64%-)@fg-C64=D-@fU!@@q/tX/5mfr=^tZG).OZc@iIF<+pS,Y*=W#T!"K_I"qD4^#7M+P
!s/H0!!jT-"r.4r&1/>O"Tnr7!+QEl$=aBP"UG21'EAXa&,fu@(IT$-=oMn4)Il#2@noj1":5&/#QXo,
"Tec1!!WE.!Wr]A!<sDJ&-)q8!Y58?!!X)<!XoMJ*rlZN'*SFA!"Ao9*s;]M>%8gL3b(!V6Xs,+%V$\h
@q./u!!WE)"Tn`)!WE'!"o\K%!WE';%0-G6"98E*!W`<%"onW*!!!$"#R1G4"9T)3!!*04rW")F!t-;%
2&[/0'h]DX.1B\k(*5UJ7LB;$!XA].!<r`8"o\K)$ipY7"TAB%!<W3"&H`"6!u(k>!!EN-!<`B)!X8`(
!$_ID!WiK)(bfG8!=BNN!?Me^"WA'^$SVY_!!3-#$ig8/#Qal(!t#,:$i'c+"9ec*'Fk$A&-<:H!!!''
!!33%"98E,!t,#-(^^WN'aF^>!>>SH'Oq1O!>c4Y#Qk>9!!<&u#lt&,#m(57!"Au.!!39'!YPJ5"TSQ1
"oo/6!"]Y@!<<*'!r;m@#64`J$3pZ!(+'8r!!WF#.1lV/!+Q-4!X/Q5!WW6$!!E?%!!`N*#m:5.!=er,
%0HV2!<<Q7#ljr0!rr`.!$D=D!!!$"!!<?(!'V_L@k(Xe/iG:k)AQal$5,0#-NF;a!!3E,"98Z.!WWB(
"U4r1%g;q5"8Mos#6"T1!XB2D!!ET2!t,)7qu?g&!=/](@fmr>$<7"7$=#)k.l1[:'-mP[q>^s+!!33%
"p"])!!WE'!r2fu"r7@ErW!E0!WW?*!sel8"98H&!rs,;!Ybtu*%hI5!+6Qu,u,7d%5AJ?!#Yn<!!!K,
!##M9!rr?%$igM4!s&B,!!<3&!!3'!7gp.=!!*6''EARB#7(A2(B=O;!rrH.5Qh]4"pGG9;?R11!$PhV
*"Wqe('Fd@!!<3%!!*B.#mUh<&ci7?(bl:<"9JQ'!\FBc!<<*5$jd"J!"/u<!!rW,"<:nQ!!NuB!#uRV
(`3Yt2^C3a!!4T!%3lMlrW!!-!!<*"7L'\<"p"],@g!#<1'.GJ#64`/"UG,1$N^tA%gEjS#nJ*a%KQtG
9IF<_/da0P6l%aH@jkh%+"/HY',X)('d5aa%gO-]1B7X\8H8kq#64l,!+Q6>"X*jL1,o:7)BKFu!!j?7
'+b9f$kNsg";qph(Gm*i(+Mjb3rWUl,#]4J+oYt#2If6e.n=)Z0/P.g>R28V)?^<M"r.[]1LgeQ;_\7a
@q,fO@q-#l/eS(m"",g59)`<.-=^1`:dc[@'k1Z_+(Jda*X!5Z%PqT),\%)r70!Jp0+&_06<5jO5>Wn@
2?%)!4B,fJ9`SZD@fU"K04Q>:@q/1praQ!d@po:G!&FI^!\Rt"r*qE&"U>PE/g3pq8Ic4d7LqQh%1t0g
4C]I6'0%%3,%EK)*<9SZ1]SI02@<r#)*0'=!_HlMrF5gur*o^`r*od^@fcL;@n\j3<@(r]01&u3:G?-1
@n&UX@q.#/%q?4i#ZhRI+_(g-@g>(,8eVs?4(A\/'Orb*-t<To0H2BL;e&rD*+M#Z&g]pG-=^IO@o+a]
8j5re,Yfgk7PmLe7nbO4@fR_`$X3W8!!*-*":YV=1LgD%!%86[#nI:C!Xo8<!!iQK#8[CT=WIb`"U-pp
!>#f$!"fZM.q95-)^l1C@gibq)BBH#%il'15qW<F!!WZ.!!ET8":G25$=a)L2,*uL#lt54!!!6+!!<i3
!"fDE$jd(;!XAc,!sBVE"rSR#(aM]i//THI!#R@Y1DNGj-ODF]:C[C*!!;us#R180(b#Rr">'HN!WrH/
qZ$TtrW!0,$jm(:!!`T)!#l@I!Y#53"?lu$%MB=E#::K1'j5$7!\P!i%M/F:('+O>!!!9+&.S[C!!WE'
"onW*!!*'#!WWE-r;Zm"":>#,(Bsp@#6Y&-!!WE("_/?6&QoWS'NHGh,5u'V$"Frb/H>hJ!"o>5#71G3
!WrZ-!<<*,!"8u1!WE'(!rr<D!WW3+rW*Z4"p5,2!!<3'!XJf-!+QmV.q:.0@fePu*WBOT-Y#)F0EM4S
!WW9%!!3'!$NU50!!!$&!W`B'');M.!<`3!!Z(n=q#CL"!!!,d!!<B)!!W?%":,&;!<i?$"pY,3)$'g?
rW!--!X/Q.!!N9$"p"]/!!*'%rW!$*!!!B*!!*B1m/R@m!!N?+!!!*"!"K&J!WWB($jH\G!"o;4!WE'%
!rr?)$N'l,#64c3"TAB,$j?tt!WWK,"ml9l!rr?(rW!$%(B=^>!!i]2!"/c2!WWf/!!*0%rs&?#"q1J8
#6=f.rVup!rW!!%#6O5lrW3cH!!E?2"p,/6!!39'"UYD9!!rW1r;[H2!"&l4!!!?-!!!64*"!&W!!E)u
!!_Zf!Wtgj)ZTk+!&k-.!<WZ/"TSZ3!>GM6!Xo&5!!!$""TAB1!<<?2"XX9N!!WN+!+Ys-!!;Nf";_1@
!Wi6""p,88#64`0r;ZgNqu@Nb!b2B6!"0,6$RYuU":#9>"98T,"%!+f!!*-$li7)"#ZL^&00TR?!#>SE
":#,2'-dMX!"T&8!@e*M3#2Jo%Mo9K!=K0C$=a5>#9!XD!WW3+!UTjm.0Kq^!!**#A,ZHA-3>1f!!`KF
*<6'?9)oA$70*Al(Ln3\"onf>!!!$V!tGA7#7LnC"oni-!UTjn@g4Xf!!iQ00*;+Q.L#l9!!*'25mRGo
@f^'A@gN,M@gi>J!"`WC@g-?M!!3-&"pe]G"9SW.m/VY~>

%%EndBinary
grestore
np
0 0 0 1 cmyk
%ADOBeginSubsetFont: Helvetica Initial
%ADOt1write: (1.0.24)
13 dict dup begin
/FontType 1 def
/FontName /Helvetica def
/FontInfo 7 dict dup begin
/Notice (Copyright (c) 1985, 1987, 1989, 1990 Adobe Systems Incorporated.  All rights reserved.Helvetica is a trademark of Linotype AG and/or its subsidiaries.) def
/Weight (Medium) def
/ItalicAngle 0 def
/FSType 0 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /space put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 105 /i put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 115 /s put
dup 116 /t put
dup 117 /u put
def
/UniqueID 28352 def
/FontBBox {-166 -225 1000 931} def
end
systemdict begin
dup /Private
11 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-19 -0 718 737 523 538 688 703] def
/OtherBlues [270 281 405 409 -220 -207] def
/BlueScale 0.043792 def
/StdHW [76] def
/StdVW [88] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
14 dict dup begin
/space <1C60D8A8C9B854D00D> |-
/a <1C60D8A8C9B7EF32A0B922DB529D70E6EA403D8A84C07D516EB0CA87D255
60EFFD4826B71D37804D7EEDDA6CA7DDB4D88588D1C754E325695CD9034EF18B
1C52ECD8C1AD064BA9FFA9DFCFDBD81A1A1F510247425188B2B0EB19E88EFB62
DF3A67CAB8A09AB20F85EFCEB4E710F5C31422D7D067E77229A96AC4E6570C30
AE029BF39543CE2D3F73268F54943B3DDE6DFC6D1FE843243F344FA30A7F9A6F
2F64561C1AD88F00A1B3814F2AAD3466C6710D7602AE81367BFDEA024A44D26A
B58BC3F7C6266EABC0BB04> |-
/c <1C60D8A8C9B7A73D329D14FC5ED04B22BEF11360501EE1499496C476E815
0EC3BDD954DBEADE8E9C14890D9CD9DB76F31AE11D3417AD4A86CFF13437B5FD
BD7396F24B7F94C12C61C297C734538546A29AF94483114D66> |-
/d <1C60D8A8C9B7EF32A0BAF021E6128CBCFC037CEC30B1AE5F130A02A684E9
9A341CD228A3B00C0F0947DAE3EE2F0115F2F1C7AD297D397118CDDC6B8C30C4
F280EA7E4B984FC742154737AF60110634B578DD08B328C83C16534FC3A66AC2
B8949B5365E4D401A937B0BDA9D51F9A95F862666542DE04428C6BCD0CD755F0
8136868EEAAE759CFBA86A9449780C8E59190C25DA649E> |-
/e <1C60D8A8C9B7EF32A0BAF02E48E9B39AD7C7181F03C1667A89DB68F4C202
1D90AF24B2D47013ACA99B4B2D769B990015FB6EFC7E8ADB53D7F0A72F6495AC
A0439C9D372491632296F74356FA6400495EC05ABB9CD13EFC8E45D6906A6BCD
BE0AEF5EFFBE2AA37FCCB9B9808CE70A23B0C257679B730911C6BE9556BB5553
A431EECECF30F5581F5F0240E470E520EB9771> |-
/i <1C60D8A8C9B88C080EC3D3AD3617BE24B7ADFB69EC85A7611E0BE9B62BA6
C48FF03869083107520E17B994822C2A> |-
/n <1C60D8A8C9B7EF325730A29066B7F8CF87E66E4D5ED765FA285510C69871
F54E73D088410172FA6F7A994A736ACF795EE035A8B81FEF896BF101D6B101C3
C5B39857EAB9B93D07BE2F0E546CED9747F7DD1D14A8975B58A16E53DD404C4E
661DB62A0BCF442FCFD9> |-
/o <1C60D8A8C9B7EF32A1EB0E906A9534468E05CEB1010836670827B7F6AFA2
CC00AD8F9832B5E57EC7BD21A33599CE96350BC4CAB33AA09D5134F6F8CF8089
D97FF4A8EED59E93E5BC94B6181F6AD989C60A6089DE02A32BD22539CE> |-
/p <1C60D8A8C9B7EF3227BF5E70012990F6AD75C7FC3152235C08E51F0E890C
E0CBD856A1BA3830CC955CB85F22E6341C345F07E05EA0368412D92660FD567D
EB92C9E8FDD81DACAADD1422381027E2B5A85BACCD7017AF3886EC62BD93A89C
30911AF489073ECA3DF44D377924D15B8547A2846FB0280E3F49A45EDA729B82
36> |-
/q <1C60D8A8C9B7EF3227BF5E70012990F6AD75C7C1606B5E4B0CC1666D106C
062CBF25548C316EFAE3CD807215447DEE7459A9D1F79881E23A7CD97C235819
3B2CF61D474D654F5D11A16B0F4A55DC2C0EBE047696753569C42AFD2B22ECAE
0F067510265AB7C26184F3B68C845BB80CAB35D9CABF5FAFF5C3DB638C995B15
CF9621519C> |-
/s <1C60D8A8C9B7A73D329D14FC63C56EEDE3F9A78253B2DBB69AF677CDBDD1
1160289884D4DD9C5BA98196E91F13BADC9EA1FFD8D81D0FF8A895E14109578E
AE707C718F18B2FFF2D3889404590171D0D60AD099D0C33148CAAE5C0C1BDC99
87B32BC4D29C6F3CD338BD28A10AE13DF8A67F8EF98F4C78FDB1840183A583EF
7425DFC082B11B17BAF27735DD90DAD7C2C2F113B8FAEA052E0585F221DA84> |-
/t <1C60D8A8C9B854D08798C221F1632F11AD0FAC820137C5F0FDBBEBF17E1C
0D647913022A839A37663E0CE3B897F4D89F6C2CEAC84AC3D591D5B583708835
3D9095E679DCF29A> |-
/u <1C60D8A8C9B7EF32A0BAF052F4A114ECAAC082E31670DC94A7FA83EFBB56
8580AF4F6C2C8932BFCF2FEB4A203216A409C4D844E8855D7E2463E8D98BEDB1
BB4900872849E5B1FD95306D62898C38C902A70A77A4381E200B6BC8AB0DEE26
413B477F144A27D4649C29CBC5> |-
/.notdef <1C60D8A8C9B854D00D> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/ORGEFA+Helvetica /Helvetica findfont ct_VMDictPut
/ORGEFA+Helvetica*1 
[32{/.notdef}rp /space 64{/.notdef}rp /a /.notdef /c /d /e 
3{/.notdef}rp /i 4{/.notdef}rp /n /o /p /q /.notdef 
/s /t /u 138{/.notdef}rp]
ORGEFA+Helvetica nf
ORGEFA+Helvetica*1 [10 0 0 -10 0 0 ]msf
170.504 280.502 mo
(dat)sh
184.404 280.502 mo
(a set)
[5.55957 2.78027 5 5.55957 0 ]xsh
ORGEFA+Helvetica*1 [0 -10 -10 0 0 0 ]msf
8.58984 168.745 mo
(sequence positio)
[-5 -5.55957 -5.56055 -5.55957 -5.56055 -5.55957 -5 -5.56006 -2.78027 -5.56006 -5.55957 -5 
-2.22021 -2.77979 -2.21973 0 ]ysh
8.58984 93.6899 mo
(n)sh
66.0869 .25 mo
66.0869 3.5 li
66.0869 256.5 mo
66.0869 253.167 li
25.4199 .25 mo
25.4199 256.5 li
25.4199 256.5 mo
351.253 256.5 li
25.4199 .25 mo
25.4199 256.5 li
351.253 .25 mo
351.253 256.5 li
25.4199 .25 mo
351.253 .25 li
25.4199 256.5 mo
351.253 256.5 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
ORGEFA+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/zero <1C60D8A8C9B7EF32A47D2AA10CC01BD74F486262CA3CBA2A0BB3D25A3
A094F02BD79F42A0A236349C843943C6914F47589F3954D0C018D1FE33AE62F4
AD6F7BB100F692008FA5232B949E365DCD3CA3A3EC8285D42D2BEFA> |-
/one <1C60D8A8C9B7EF325730A290BEB204E49AC09A28987764356D1148F842
A73E52E5A03E7C90E789C54AE8AB77FAF63FE459A255> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ORGEFA+Helvetica /Encoding get
dup 48 /zero put
dup 49 /one put
pop
%ADOEndSubsetFont
/ORGEFA+Helvetica*1 
[32{/.notdef}rp /space 15{/.notdef}rp /zero /one 47{/.notdef}rp /a /.notdef 
/c /d /e 3{/.notdef}rp /i 4{/.notdef}rp /n /o 
/p /q /.notdef /s /t /u 138{/.notdef}rp]
ORGEFA+Helvetica nf
ORGEFA+Helvetica*1 [10 0 0 -10 0 0 ]msf
60.5898 268.588 mo
(10)
[5.56006 0 ]xsh
109.003 .25 mo
109.003 3.5 li
109.003 256.5 mo
109.003 253.167 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
ORGEFA+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/two <1C60D8A8C9B7EF32574ED2CD7E030E235A78DE7C157B301D9F714898A7
7988FEBF6D99B65383FF02504025F2F803F7AA1202974CDA083D6C42523402CE
33E90490F1E02088FC3C50E8C63A9FF243AF62D527B6BA67294C62B404FAD5C3
12D1BDBFAF8BF39048069AF835BC96F39A7275F3B466A0A5A19B9F7235EC0FB1
E4FEB02B613916D7> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ORGEFA+Helvetica /Encoding get
dup 50 /two put
pop
%ADOEndSubsetFont
/ORGEFA+Helvetica*1 
[32{/.notdef}rp /space 15{/.notdef}rp /zero /one /two 46{/.notdef}rp /a 
/.notdef /c /d /e 3{/.notdef}rp /i 4{/.notdef}rp /n 
/o /p /q /.notdef /s /t /u 138{/.notdef}rp]
ORGEFA+Helvetica nf
ORGEFA+Helvetica*1 [10 0 0 -10 0 0 ]msf
103.496 268.588 mo
(20)
[5.56006 0 ]xsh
151.837 .25 mo
151.837 3.5 li
151.837 256.5 mo
151.837 253.167 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
ORGEFA+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/three <1C60D8A8C9B7EF32A47D2AAF8B27A6BD3F3BCF7FF319EB739C72B00D
2CC4607F53D8DAA36825DF613C6C839053BC26A7859D8AA158786D28D1E4DE04
046CE941E5159199A77FA8129F02A3ECB8D9E54C278D22D0348DFB3C3C73F558
86BF824DB1B2BE764C084A332EAF6E03DAE2729DE4723D54D14DE5E36772632D
9593B8015D82D91A7513CF83AED18BF899FB582C1516AE5C3CE963C7A9224066
B2CB5D769E52069DB2172C52452A135E45CF579C1E7FB12BEA387FFB8E1E9EB9
0D4F6BF80D4DDA346E7141D8646431020D523BDB64> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ORGEFA+Helvetica /Encoding get
dup 51 /three put
pop
%ADOEndSubsetFont
/ORGEFA+Helvetica*1 
[32{/.notdef}rp /space 15{/.notdef}rp /zero /one /two /three 45{/.notdef}rp 
/a /.notdef /c /d /e 3{/.notdef}rp /i 4{/.notdef}rp 
/n /o /p /q /.notdef /s /t /u 
138{/.notdef}rp]
ORGEFA+Helvetica nf
ORGEFA+Helvetica*1 [10 0 0 -10 0 0 ]msf
146.332 268.588 mo
(30)
[5.56006 0 ]xsh
194.753 .25 mo
194.753 3.5 li
194.753 256.5 mo
194.753 253.167 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
ORGEFA+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/four <1C60D8A8C9B7EF325730A29F6E3A8E85E687770EE1E27F87CEA844D18
4B0E9BD502658E879E1F9BDDE8AE7D0C023ADEB8AD1E21CDA97313F844BB17B9
F9FCD84B1053ECDC8FF> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ORGEFA+Helvetica /Encoding get
dup 52 /four put
pop
%ADOEndSubsetFont
/ORGEFA+Helvetica*1 
[32{/.notdef}rp /space 15{/.notdef}rp /zero /one /two /three /four 
44{/.notdef}rp /a /.notdef /c /d /e 3{/.notdef}rp /i 
4{/.notdef}rp /n /o /p /q /.notdef /s /t 
/u 138{/.notdef}rp]
ORGEFA+Helvetica nf
ORGEFA+Helvetica*1 [10 0 0 -10 0 0 ]msf
189.254 268.588 mo
(40)
[5.55957 0 ]xsh
237.587 .25 mo
237.587 3.5 li
237.587 256.5 mo
237.587 253.167 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
ORGEFA+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/five <1C60D8A8C9B7EF32A470AE090A724FDDF392384CD70DD7F54DF5EDB5B
94F0458AC2358C0871CBF484570776DAA62CEADBBEA6E1E17511B86A0FD4826D
CDEA47E875128F93BF9268E1B1AFC37E94AD9FA810C0CD0434C2996F516FB90C
520A123E1892F92666B> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ORGEFA+Helvetica /Encoding get
dup 53 /five put
pop
%ADOEndSubsetFont
/ORGEFA+Helvetica*1 
[32{/.notdef}rp /space 15{/.notdef}rp /zero /one /two /three /four 
/five 43{/.notdef}rp /a /.notdef /c /d /e 3{/.notdef}rp 
/i 4{/.notdef}rp /n /o /p /q /.notdef /s 
/t /u 138{/.notdef}rp]
ORGEFA+Helvetica nf
ORGEFA+Helvetica*1 [10 0 0 -10 0 0 ]msf
232.09 268.588 mo
(50)
[5.55957 0 ]xsh
280.503 .25 mo
280.503 3.5 li
280.503 256.5 mo
280.503 253.167 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
ORGEFA+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/six <1C60D8A8C9B7EF32A47D2AA03CEEE9DDB4E70F59B3EF1D68E8E9A23C5D
895B21005DF84DCDAD3DEA99AA84A6BB56E722B7BE0470ADA08603495E8D20C7
0508E0EED46F555AFE92330EBC2BA124D26816A87E77C3C9365D5C56A7582E9D
55AF56FFD9160B804C4E62EC754D6510790643CD8FBD09F0BA1748DD18E27797
64DBD296AF281D4117BA4D> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ORGEFA+Helvetica /Encoding get
dup 54 /six put
pop
%ADOEndSubsetFont
/ORGEFA+Helvetica*1 
[32{/.notdef}rp /space 15{/.notdef}rp /zero /one /two /three /four 
/five /six 42{/.notdef}rp /a /.notdef /c /d /e 
3{/.notdef}rp /i 4{/.notdef}rp /n /o /p /q /.notdef 
/s /t /u 138{/.notdef}rp]
ORGEFA+Helvetica nf
ORGEFA+Helvetica*1 [10 0 0 -10 0 0 ]msf
275.004 268.588 mo
(60)
[5.55957 0 ]xsh
323.337 .25 mo
323.337 3.5 li
323.337 256.5 mo
323.337 253.167 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
ORGEFA+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/seven <1C60D8A8C9B7EF325730A290D76D77983E96EE242ACEAA131574F93B
B3E9D36E6F4086FF3DB329E48A38DC1C36E41D469A4D1B83FEF82A3668> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ORGEFA+Helvetica /Encoding get
dup 55 /seven put
pop
%ADOEndSubsetFont
/ORGEFA+Helvetica*1 
[32{/.notdef}rp /space 15{/.notdef}rp /zero /one /two /three /four 
/five /six /seven 41{/.notdef}rp /a /.notdef /c /d 
/e 3{/.notdef}rp /i 4{/.notdef}rp /n /o /p /q 
/.notdef /s /t /u 138{/.notdef}rp]
ORGEFA+Helvetica nf
ORGEFA+Helvetica*1 [10 0 0 -10 0 0 ]msf
317.832 268.588 mo
(70)
[5.55957 0 ]xsh
351.253 27.8335 mo
347.919 27.8335 li
25.4199 27.8335 mo
28.6699 27.8335 li
@
ORGEFA+Helvetica*1 [10 0 0 -10 0 0 ]msf
11.418 31.4946 mo
(10)
[5.56006 0 ]xsh
351.253 57 mo
347.919 57 li
25.4199 57 mo
28.6699 57 li
@
ORGEFA+Helvetica*1 [10 0 0 -10 0 0 ]msf
11.418 60.6665 mo
(20)
[5.56006 0 ]xsh
351.253 86.0835 mo
347.919 86.0835 li
25.4199 86.0835 mo
28.6699 86.0835 li
@
ORGEFA+Helvetica*1 [10 0 0 -10 0 0 ]msf
11.418 89.7524 mo
(30)
[5.56006 0 ]xsh
351.253 115.25 mo
347.919 115.25 li
25.4199 115.25 mo
28.6699 115.25 li
@
ORGEFA+Helvetica*1 [10 0 0 -10 0 0 ]msf
11.418 118.909 mo
(40)
[5.56006 0 ]xsh
351.253 144.333 mo
347.919 144.333 li
25.4199 144.333 mo
28.6699 144.333 li
@
ORGEFA+Helvetica*1 [10 0 0 -10 0 0 ]msf
11.418 148.002 mo
(50)
[5.56006 0 ]xsh
351.253 173.5 mo
347.919 173.5 li
25.4199 173.5 mo
28.6699 173.5 li
@
ORGEFA+Helvetica*1 [10 0 0 -10 0 0 ]msf
11.418 177.159 mo
(60)
[5.56006 0 ]xsh
351.253 202.583 mo
347.919 202.583 li
25.4199 202.583 mo
28.6699 202.583 li
@
ORGEFA+Helvetica*1 [10 0 0 -10 0 0 ]msf
11.418 206.245 mo
(70)
[5.56006 0 ]xsh
351.253 231.667 mo
347.919 231.667 li
25.4199 231.667 mo
28.6699 231.667 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
ORGEFA+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/eight <1C60D8A8C9B7EF32A47D2AAF8C15BC9A859DEE4113CDE5C7D8BB37BC
632A2AFDD9E1D59E819868DA3B47FA265DB8E729BBC4B74D62996C8CD7000A22
83A23B9E90032D8BA762FC6930C943ACBD9924E3BB182B1447A1E2AF18A8F5C4
FF7E73B671B89EC1964BF90DA6A7AA5C360A10E2B9F34D2BE8C7C673C6A88180
4538AD6230812FB8978313B4BDE98D895F422138708DE46BC5394FB88DD33D90
C210817A05295D4CBA95598D78DA62CFD2497E0D80160F3DA900E68CEC3A30A5
1069510330F600555F89415B16F55B2952535C067AEC9D27A114154239F343BD
ECEE543D835ACB4FF5860A143BC179> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ORGEFA+Helvetica /Encoding get
dup 56 /eight put
pop
%ADOEndSubsetFont
/ORGEFA+Helvetica*1 
[32{/.notdef}rp /space 15{/.notdef}rp /zero /one /two /three /four 
/five /six /seven /eight 40{/.notdef}rp /a /.notdef /c 
/d /e 3{/.notdef}rp /i 4{/.notdef}rp /n /o /p 
/q /.notdef /s /t /u 138{/.notdef}rp]
ORGEFA+Helvetica nf
ORGEFA+Helvetica*1 [10 0 0 -10 0 0 ]msf
11.418 235.338 mo
(80)
[5.56006 0 ]xsh
25.4199 .25 mo
25.4199 256.5 li
351.253 .25 mo
351.253 256.5 li
25.4199 .25 mo
351.253 .25 li
25.4199 256.5 mo
351.253 256.5 li
@
3 lw
0 lj
267.086 123 mo
23.7534 123 li
23.7534 106.333 li
267.086 106.333 li
267.086 123 li
cp
.0117647 .886275 .984314 0 cmyk
@
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse

%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5
[/NamespacePop AI11_PDFMark5

%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
[/CSD [/0 ]]
] del_res
/ORGEFA+Helvetica*1 uf
/ORGEFA+Helvetica uf
/Helvetica uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 16.0
%%AI8_CreatorVersion: 16.0.0
%%For: (y2smile) ()
%%Title: (eterna_comparison.eps)
%%CreationDate: 11/5/2014 8:26 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb!j.=`6+.Z7)%%%Hp#Y*[P$V\m)LR:$m4tB?QHSla&.a)V3b\5M[IV+V+l7i<";7-V/af2ie3[6#[q:MpC2T%q2`a-@8^-nB!^=
%hZmq3P!p.eMH.VFEc*Mel8Pd:k'Oi8Q^'""9hf>9FXiNr9I5nE^n9cOG3W_JY-h)*9;H7CBN@hmnT6UY,W-4^<%:>;'jHt&=0:.;
%l*MqJDR[u-Zo[$.WP\,ck1!i8SNJ>sh:<L(et8l2NH4,ZY+rIp4]6I$f(cAuX&mI7Zh&XXh5Jr*%V9[ma_/<DW9LG0=1L8dC/K]a
%WbTlUI_ATAl@6Lu3\+..N(/;X5LWqEG"HmKcepVX4oN%j7=I;$om1/i":-h?=#dkKQNonI_#B,Ws7W)aQbWQ-s7l><r,;W25QBbR
%QoEl9[D0kT:XXcnUo1S!H7Aqd8oa&2[BFbKgoF;JC>!\c3L.r*ng](M7EMcIZ"6p07l0[OL(#^Kbpl=p.[A9<053k3Wf!OV3ar;.
%^X[+L?C<i'i.*J(Fe,3VfBJjXs%5ba-5)2fYO'Y>^JX<%2X>m)Cbgq!%pRRfK613PTf:+.:%Z1M?<N,CEp(-e,?30-oR$73F(Hh2
%5Tt2h;#\/ZOanF\CX%dg(%$#k:?a5;=@l2ca_V<'R@I/2'M:ii'[$NXifuA3D*^f77N,n0KM:fRVuC"@Y4,2`T=6oTWgN=`2O2)p
%3fn#EqTJFoemC3/?E_r@"!H)o30\)HM&r6E(`+9I!h8:4_&f"-16TRT#!/!POhMOQ]e[F(P"?o)<W?V[s*Ls#,u59H0-5o#<!ls<
%=a2M4poj3I]Z9(%1`hFMnMi_/ZcoJH;G`<kB*qt===OKn;CPo7NFoLn-C]]E=n7VScXrkQ2@IL^'>-Z:632rY$;e-,J1$$PPgOVu
%Wp?VuXfgtd5hE7RFrIuO4[PP2'WU`enMmKXDbpk^"g:`2`l1H+cX9T=$>!UAn4LaHd=IQk>jr*X?r6>"9d-gHBc%Psd]p[pp_h'T
%:_BVX""4@@K3'IrlgPjc-/*X_1u]-F"g;#C7umbfmUP\s54(J).UE8X5qs3$]L#OVOZ7B/`[20Z5VX*#T4p\&<e`?G.susM+s"HL
%lTG(JY>>YI#d64U81o^'liFo_Zp6_!.>^h@FqJ^)`=R;72`Q+'!:;ml%3]69I+ke1rs*+CJ=K);J@%@t*$<'8i>%4nXhttf03B)u
%TaV?k<9I6+3=4)g0Ta^C3HLqRF@SER,_JM$R=rm<@NYK&\4=Vr4PG'E0mnB$I43+oA+S=Q50&/So>mk$ff8_^+DaBBs,`HKpL>4A
%STD!m1QF$&#>"*L#6Z@$l@PHakDS$U\/)COIH'IdeHJQiGBoN8A8E*`WiADc_)i<q.f6,Xpdi'X5?Qn&T6SD+Uj=eQ5DaU^QVQRb
%nW*W))>p)J(sk)*?S7+p`&mtAkOH0/a+'n2Z%tW$GPkMliHOgPrtOK8POgJ`n;?gqht]3YLG<P#66`BF'nX8t#6/b4>UEa0:[)=@
%UM'?TkotM0hr$^]LK0:\d-2(P%[F8SQGuNn%BI?Y/PZ5Bi):d(^QRkc)B25I=H'_,IYXdl%hn^E^qd.\3dbHl'kg"],k>J:Gs-f+
%YYY$3\r=PSdX$X6B5NiV/=]WN$W$u+&U4I!&3PYj5b(k!ebRjj.WuOWiNENX<%[Vq3'<(P1rVRo]h$PE@Q+nf!!A,E)>F`-ESR@(
%Q,$-nbi<f](L@isL-<="Ud#!!HjZQk=;%WH6s"C%H!r8$Zb__fKtXNJ`=hK!I"[O-&Ll'<,0?cqrI\\rhY@T#0+<J";`RhPO2ZAt
%p`r40$Jj.H1f@^6,CYuK_Q*MiYXS\f,&nHpB.+C6cd@WBF\Xir6TUAW&o^/""=u$Z=5G;cG%_uFKJ^Y>PSZhH@W<fMbpl;X"%oqj
%0_&GmC+dCCi(-KRVU-1gP@5dMFZQh0C$%32$sa+h+b.'s9\<9%G0ZJ^gC+<X$cmbIWgq%jhb1W*S=?1`U?fl40_^AH=U*6Xe'V'`
%V[G0ijM>)UImso\]U*)Pde/R8ELb'OL["T_"k"ru/L4hB#alE7RB-KqnsN#!'tb'Lkp5O"P;`SGU1;6KV,If:MNDf$Ulm2q,n-"-
%HO8(oq43FT+u"t<oC905AGWM[1s&C#oaI`Dlj'"@3e!Sc-40;5:?>rBFIbU.ZHakYV0,Y+@fg=;a9D8Ie]EFF,Ee3T(GEj`M>3&E
%2C'AP?C.ZG@@bT):FX\:nLb_mA4%lD9h"I,P;7N$Fko)Bj0LB<L3Tq'f<()^)3\eq2F;+!MMc*rLcT@eW9,+XQ7Up9Uq_LYh)rg_
%?\iBFm)(PdLfYBUE']Y`$.^>U3k74Sf2WL3OM=1I?/SZ%=e&u.23pV`54UV,7U(B3GN^EDG;X5,R]78V]tlmab;n<TEKLIU&pRa'
%,"\'C1.3C\aGLFe4BQ1#(?D92HKaN9,Fu1NR<27<e]E'eFf>\;b*8!=aP+;u7?.p3?hFi"H^&V?32eaH/&p%iA[:GnaTP!qjcG^(
%PYtml1WT$O;hAlJ3Ci(/P7i&;C5=^=Q/Uj\R5bsJ[c'sAN2F[hZ7+3NF>Mpd?HJ:bR\Ts.RH>1a.fgC7HlYN3KSp&$.q8$6bm0q_
%W<CSSB(9MH'sl+mUms=[ek/SM>f[dH&8/8e(fjsOL"8k_!Ys5d>S]Rbi$pK\NS)rnRX:=c3eE35cW#:$?sZ;+_E`NL/<[Mb$(]i/
%!Qm/YT2k2$+l3U<+BG<e&4ig"7+l-5qr;^N5;P!c[:5^[K)?XW72gMML<XAH,cIsr0W-)O3Ab?iOEY1TA1SsFG$a1?KWuN?.q"Z?
%7,H.-#saQ(E->LBN&"OJa2'ag>cM%]&?+"d$O;Y'/k2dW_afE,'4V>0<[89s";qcMU?Pq&5TLQ6l:-B3/CWHu?49\fN?LT]+$_5%
%#+eE,MRpXs>U@lt7,CN/UX%CV/Ac6_0h&rEUJ5BaWZ?Z1)CKMe.upX6Tr_1@MBUWF'VP7I+0RABdO"5l[oj:*.!NUJM7d8U:jp3b
%?$-"9&5.X0s%kRC^8InS+sP"NII7:>)#+Je/\hFi;\MROS76om#V-C-2DWHl-HNc9kWNV4iZc?8?uBq@d0j^oC_tc>`M(*fi)%60
%:geUbi5a@fef%:78X3u="e5V]dGT*O,m!U,;7#4/lo&J%8iALpX_sdA4+rn5,ofND@`:d;n:pTEQbL\('36YfnTor)6c3S\EdrdZ
%feT"_KeMGQBls_7DkI.k>>PNSo`7ubV%'%&C(RC)M85dkqhR5[&<7Nf/=(1^6uqr&D*qPb3Ic+Z&/#UZEl`N\q9R.pa%hu$!rn6;
%WgaTUBP$KkEg&&tKqq)2Mp@+'[9Xb4',TF0"A+A208K^3Hql;!TQ0++9-dtN=Gg^aO=hY=1+c/Z4Z(AJ>SMb+d5j[L(bIZimuS'B
%O\s#id#m%Xo`TW)&p(4P\\Q-`QnR^D!mMKQ5r(cCZ"K4t_DI=Lb2kapj:'KBI26M(198.)>nfO`fK3\uRYs!$Op5Iqj(gD(Ctem@
%R!5^rS#mO&=gl'!>.-&<`l]nn+5TkeV]$58TU>p9^g&KY7=\qeAO',9$h]$JQrXo#O45a,5PNskdUZ8"5h67j_a=0R,2g-%;jK.S
%VS!(@:1fC]ShdZFA-FTI:soBjitEU/3:W`Z`;MS($3J7kJSE6!gB$i-mtP7Y/<P<skK>)*KlFd^^1<.H-@roLlaoCkGAWgc8=S%`
%mj<`nU*gnN=l1O]`aiV,\fjmIa,+DW)qe\`2(.?/B$)l0@tG+(.Du(]7%#oS#bf"SL"S:"4tEj_P[h9m7UXo(11oLeAqNp>7,^8!
%?Rqj%9!c<h\N91[6H614TU;q<JpEoF8C:#&^T/-f=&j@[f0HAQFQ'"!:(d)gVpLpU'k_,O0h8;"AR3/q;;f>/2^]O+&s0Ln$"\M&
%g^*&b.I''$6.(hPKgru9*DF@,qol9O=lGN?PLa<^,U1l7S,7lFOtk/]Y.+!kOHBu"'DAMhURN><_gn`gSN!Q)R$=&g7<jd.U6'HV
%3lCl^-]Y\'[!3:*"Y89qMYMs'H#o_WAmQ;5,/]Zdr^_9DEV^#G<m0[j?RD8]GPk4FWnCJL;+;6ShQtXSp'9,(nfr5ApeH:]=K6,u
%lE8KRZ^0(O4F.Q@-;S?9)$?N;LflETi@#bQ>!^?.$e[pS;lD:3;f_+Bq,k_$:[jd".qI,.7%Sd)kps#-TF*DVaKJ!7<Ub>FPS<VR
%-C/G)(*cPLPGAO?!bbI+S>Oh.;e0kpaqoTV;HT7-3eRjB5o"&C+@1!6WjFK/$Jiti\Z-u:S`IIR_uM2ML^3!1b)`j$AgTT)=(*-2
%C'!53OaM:F>tDt$D%p$*<mgto16*;A6FY3N\Xpbu<M4T&1eJK!XI>*#lA/JOSGS6Rh).hWkn6+0$,k'tYnK`(;'h]C@lG/Jk1W(?
%^fOcGRe`7Rc>Z(SN>9h@r6H"tWYr6t@3/5M/8jbjT8RM%R.!%ncX;J7FJ:P-G=@qO&ma9P0!;>"3%(=k3G&Kc/KL)Mgo!UXkX7V,
%Qc-Y!NUYr5W5+.IN@h;9M+o5_;TWO-rG'sr3+B5-!Mm]Y!L"^hip\s5A5tPb-*2uOaL:]Y^)*CB:0YA,p_ihI0Q[;lfiY&u\0up]
%(!i__=mS!36jZ(-cF;T10l`F#<8ei0r`]4hW$+b0#-oW"oh<Jjig\pmh1S?;1!.^hNXZcPTJLWhZ-%`A8kYWW2IB=XI0!hnce&77
%\<iO3>$*'`PVF`H>3;<RBLu@8Loj=YctlQQJ.s>'8!Y_?"k#S^/Z@aFL7^d*Mr34"oGO:m<Q=ei<E60?Xj%19E\Vsn>^k#gm<1C2
%fOa3'6&l1hUuh(Lo+&!u?S^^g%AFboZ2?!L7R+rH+8qcWi]X-u.RTL+dPY>gmf&g&-$%XS3XP6tW(!beBH<EDZCZnZ`5QBg:,eH*
%30HZAG;XAAR'<>6d?M.OAlQg4-8]AH%uH0Q-=O@:O_cf[VGU9nB/9i*r)>,hl>4M-d^foDT.6U=Z+dQ(IZX.mnhWm^mYtb(mr;AJ
%e\`#4@^.`.C`0Gm\JS^(&pu29ndt02eHC_;AL5PM=[e,X-R+W\r%iE(al,isQ^("9m$Q_6:?JTF6,f-R=IdINJ3uTqS)IoK%2be;
%)[8:rf5SrSb6>cu`:,#_\ZdE^Wii/8Z8&ZiYoND6`2&BqF++em+/1dPD-SL!:P007^uK9.VK50o31E?]%X.sFE#E*))&fnn;6e@T
%7KnZ333H\/R]!Rr>>#CGJn=!S*T;$lkJl/:a"Y5]]A%UiO.js3ZkNn:9'SP(_rOu+6TDusZM7-P&&e,!dNTPRjF:>k%Eo/HNZ"dS
%doDnajs_#IJCTYV_D-Fg4!2#*e8WCul>eQg_F4l0(bEg%$6q=#Y)H1'_u$GNr[B_&o+2*ib;):c>b.b4L3+6ENB#!)R#spBQu-^$
%"Kp/DT94a<Kk8H8$D[ej2Q3&]bAN>s$ET->:$-[RmY2,=3%ItGKr9t*LMaRIKYB+/Ka,HC*A?)]OV&LuN&7]U)*4mba0?I=I;L;a
%qip',0PFc,0l?"9>V20s%*@@<])tgZZFh\<Rc75j(qY$K5D+7E6jI>i?:=PP4A8=g9%%:iSg]Z:T[e*Mg2Nn7mN\t('ZsP:9-jF3
%ZH?DCW8TUt0K77W(HGt4KL+e26\+jF+C7'-e/1:AQ,lMW"#+q$*fOW[j2r[JZZj;o`d^L6*3KO0e&b3lCkb[03%J_i3R?HX@l?5>
%\P]G$W'n\0:_0jPR$8^eDC"aj!gW\K]6SPXFtuR9R/BOegbb6Q$o'8\A+>/Q$1je.l(f8l6"7<kb<j*JC$\h<*+oc'@WEH*Wsn@9
%6%lRe.YY77bUA12Q&6Mbl"hJ3p]+@@)WNW/V.B?rTlBnu,o[io6It*^AO9@ND5&78UP6gl)m89XD]sjcF":*CI@1S5a:!XAYTaJ!
%MSu]m!JJBM[CO&BQ;W"Y*"<T@`!%Vu>iP5n!nKqnWeu$+A1VF6(SPj6(*mZTo-GsW!"(;07J!660Dm*N,W(;=nmGkIF$^!-fE01T
%%HQM2c<4s6E<HYj+<s6GVf:6NQf2D):Mj"[ML:OC*%sE""I0'Vl=;$]?YIp$7r1gM`>3-nQWWBtpk.f3W913]rgE/k$Alo&B5AOQ
%Z<tKfgDaN$EY:DE$[d"qp>5AM$Y(90gG7RG`)Rs%[r'h[ABj]@2h[GY<lns;pOd:PNfqI_h<(8?:#MVD]N<$1J)h%rh?0XDTJFH0
%*dOE5TdUMd:ZlF.@Y?kHb.JkDNYh%40]1Hd\G-MYA)>:k<ug&MGtVD+H+>an55AHg]h$hU-niU0"R+_[Sh>dk)pestG*^')%c=Fb
%gIfKS[+RDdDPg\n8]"s"@#Ia>.]8n<L3"SQ`j3<_eogelkcd]tCb"s,HW,&ilJ!c53cV<bA=V]AkBoX\GMWmlU2sd2dJ268(tu8C
%Pq-!,C4mqW(u`&[Ul[CA!h7l=MFoWO*eVKb]ejndFA%"imG3">UXIBTVB&P(].aV,5a0?eS`-I];'h`(\JC5m;R]'L>3F_Qn#mZ;
%K.Z_"9adj!>GRY`,K3e0RDiNm<KDHlK]^H&4Lo2P)aOs")D7g:p*,K5;e++DPq`B_p39ab'N6EY.0l0cQ)c14_OG1;Z/@lG5\r0X
%EnkCp3n3p9Z/eA:N^=Rf&+HA*fsN8_jQJ/G0Pa?`db8uE+DbcgXK3otTYrTJ*)*7bgVPcjs0FI1EI+JHo"M]S(_cit=UA6.H%WH"
%N%%D9[kg*+YRGga/Yo2c^#FIaEIXOH(;XKIP;NB&e2E_2FI@Meo@Nb#_en.uc6q/p>`]Y=LHd/=K[%,;T?+s?(.is;`XX6JbWCIY
%*h"K4&S4b>Lu77oikh!nIN-ZhiIbY[/Ta^RI1*oaM1?k3ZQi,oW%%>B3P[Mf:s><8Si&jm1Am]D_a9h+$&=7%/lMF/Q?#3MOSj,m
%TC>fPA*7.Y\eV1DCb=7X^:A17YTcNkL%rfki./>D#o*O:6mYW\X687P10g2oY.4WIN=abok%Ygo,/CPV\FYsJfh)>!#Rj/Ta43,D
%]%A\p*34su(lFk&h;V9iS;eN_VE@O^r)0ULG;Uj>;Q'<3jR>PZT#.7\.4Jg3M6Y>FRrg>qBp"$!YOL]L(IT<$*l-Pr\m\qW\<f@1
%I&@TSQ;dT;$u@F!0H6A!W1*<cYqhqe6Zl/1/U*LmQ&u](R?O&N3WTK&f"fp1Sh"NJ:0)U*+OGB#/?WnRmXU=!j\3qN,dp86]f'0Z
%iQ,\(EQ[I\\ACLt4ldK%">s8kc*=n1RS^L9'eOa=,#c(u(f`<28W-DeFFh4GJG]F&&1e2n']Hc0Re;Q;SWY3g=IJ+),=CD*s02*H
%S)X!n[I>(?&T(;1$t'E&-t^>U-iB9(T1GY.LD1$Mk"VS[J/Cl5Gu%R%2fco3E(hqc,pqrfG/58VU/G`mKA)bHZ?^)A_87AFKMXnc
%<k/pO,uu5-adb.\/`ni\nWEEeN3;?BjP,,7Pus(&[&W!F<Sk<CR^<H?FRU1!D6]U3h9,)bFGV"re,c+pb%R;bN3H"/>@^9M7_1^$
%K#o0ABK`@$%[=TE6SaY8j@,\;Q/GE*!!^MaQO8fV$4-u365H<B<?\/LM^H5,Oe'uSh:rD.h2(B=m(@.Tasn?1%^?GsK]0O0)'0($
%(Efd9KZb1a@MMKjmC^I1c?XGmJM]7-72F;q:On#lJT*@+28ZoRN=6]s#9"9eAp;f?,g6IHW3^_^9]NPHGm:9CqRgA(>%RhbdhML,
%+U"1*Gn,o"9b>VX2I&?r.`k;AUI&iV\a:lHe3Dd5EFr76c*=WXBa%NoedQdu$:]6@,[q7?2(HXlr2C:QRhb<pKbEi0.W+<s3,YBn
%C"k\*U1q5dhg+Y/`(:`)fEl+!*O`+_/45L)bA>]`bfbibN)4S3;(cT]MCljOO0uFlD5=^:b2$TfVM0U%a'&UJQBk)raqb)"2p[Hs
%4iALIa@7aajU&YR:.*TVJK`T(YF]leb>NaJ$I*`&U/:Crir1U]/YjY(/SdhG0Z!t1-F#==8"kOXZtHfpNJ*XgYs@lbklUkh3lP_l
%%7qaI7lE5%)l,S7)D:b*(p7*!Ca0;rYf-XO10Nf`^]u/S1;K<.Q5Bko3;K?XN^>r$ZK&oiK<Jg>,L/uHoY6gSpcC:7fl""G%?c]Z
%B'nNhk;&uraGn7QNGu%]osnK8>5.ZEH+33pZ@)7[8pghGaEHL0Qe_@:1fi7NOc)V;+eml]NBe<sZBhbl`@Q.0<&DKm0`7MA@Dg:\
%1rW-rh$=?t"U^tbLW"TiX>(044NK8^1ciZ^P=`gt10<U$1TDB\ZC#0\6Rp9M\P>IR*G72^Z:oOo-I^[_&[%5;U"ISm;G8GHO'/&I
%cFHiZ$Kj+KO+l.$*2!V90]Et0-_4;5p!0.d0D*qCXk.IrrcB7W;`l#rm^IMMDS>l&W(gi%Z1h#h[i1e4(b>8@XXQ-180qTch-00I
%dH]5NphTO;J#bFFoldf>^rNJ:p\.jH]ohK_9"e0fJ%[^SIu1RKS_cl;h^pdfZ1CSudqZnZqt1/1]2<q@`K!SiC*JLO_[iP+qRKOS
%s6(=CBi4j5+2.BiYJ"&?=Y4h^@^RlceuLa0[90V2Y1DNQ;pne"!Yd/oC9_NSf;Ni(FZ?leG$D*#3b61bWE?W8Xq5]N'!Y'De#>2T
%^QU=MfP@DX=_ka;4+TVqWD&8;O&]BNhcZG>l<EYVhQ/Y-os>JZpodcANFo4-qtRl';/=04A1G0$BXMUAX'C3n&[[]mMR=E%/udOm
%`d3,PFo);Uoi<HkqrlOE`j]ubhlF`1qGV,U*i$JM.qJWnCR&)2hImJCLp`\G#3jK9\Qe;WBTFndGkg)JG=WbLpebqA+Un'SG=p+p
%YoKSFdSp]"k+p\S+b"LPk]8G.=KW>gYV*jd[!JfA/!F"+;Y?2MD\l(6,)BO(bcXg?eGG%B;1PI1A#sX.'oo*ta4R;"UY](edAs_q
%^W2AH%A8PN5+kQMHmr(01htk+_i'RVLJUXGo0k)$[F'u!&TF/!V_$@N,NuG\8=?3I>`2TA3bhd1L99&qA^XQ&W)q#;FY$OZ5h(cK
%21gi8!c2<8(@P0pWmG3DN-a%NDftgUOjV4LI>$*/oqu`Xq&LRO-o-8756q10!D\[1DDJcsI*q>2eQ/Q-#U'B@87*i[9$Ks9c=1+J
%H8\M_QHqk2O,;b(U')O"HZ9jp/J7ftgR62a>HbGmhqJD_M,9cMfFrl&*bCt=2LUm:5&'Z2_sL4"hqi4a[/tgbdFqN#[7ZKNYeSbh
%;oc)VaHuBqkTR)W%rjJsTVYZb*`pF0.Q'XY`#n"/1_rX&8Qhg;Zs7O)#6<3lj\BY"T9?eX.sZVsG<bbY[C93"9/M16QC>S=)QgHt
%Yji)Ee>_bSVsUDPP=E)cmS)"57b\GW.Rf(5QVaD>`02+4JilRLfRjn:XsGNWdM,J\.SY@7Ijot3/^4ZdV@Vs&;)p(h3V(]R,(8/J
%bHqm6A*KaY!U5_";!$QS<5(ZLNNRp83oVEF-Oo*.P(=ud#J+^l.5pAprqZ"iYH::-q^"TWcr?;(6;%u6WsSln,R'.D5"A)<Gk8G%
%6gXHW+&`uX<^Qk]o;Rk4.f_9Ja/t3WOe-7.KWfCY3^!W=YJ"jD@E3g/9bdKEC&e5-r@4%gmRPijp.)gUdP["V!t$FtVd1Tuj)r`Q
%W\9[=;!N,dCRfR)U,"SQg"?E))sA>Qh'o)3O]Bas4F<ASs)Y_Pq3X4A^NPEf<#Zr,JILH$bpquAH,&3g`=n(kRA+_irW*d4.Z?F)
%r_iBZQqp1;._rGK)1>,n((t=`01buOe@t-@&i:,%[ocrXW-)Y@);J6=qn3#cilCb^XZnc/\#C+X@^AMSle#)1X#:\9O3d-!m7,?F
%Y"TkR$Yhr!n53b@#2K+dhtG-h?f\[\:T;LdiRIh$10"dFLM'`]VFm;Qlg3,9i(m9+U-??tCFAQMr_NRe5QBnrr9&S-+!:IS7DZ^.
%M8&?feMl$lD\Qsidh9q1,QFQ5X?FpR!W'ng!cYa/!]nqe&R4_;32r"S]RXS#38=oa&/3?@;#??Yd"isD.ejPkIq\,^i4kJqXM;>4
%@,9r]D(s;PF,^,!o*o'm'tEt3h"dN>E-$8Ce>h))*j8=mrpiKog1kJmY^EAJ9'c\T7n%+M>c1O"(N!bN:o&,s%q7^7X.P[*VII.?
%<Q8Nnkn.EY4V#^q]?e6W45EoR<9HEKrler'.l[;o@<g.A.G,mcai^mFFNn1meYDE;:+tj/rEtMUoXra:U,_[o0"H5f%l%01o%glp
%)JGmGq5dSE%?_Nu,Z0M]#h9k+roUduIVmS^EJC+=rVq99LDL:J^\JZR;"fr9j=nkO^Y<OPr;jjoO-8^![g[QqXJ&&/pnuVk$,.Q'
%qP3`Hh\I_dhu<NYT^R@6P.]PJ=8qTCE@mqS+Z+-fG#g+P4GNf3KC'af'@2U9+lmi0WCE(DI...9>d*ibI#X2Pr'Ln=\GpQqn:(*h
%[,:m+__UYh*&Ob3p_-)GP[R;*nu\50G[=T;U1kUshKjE0U9EP//,`n@$7[XR>Q%<n7P?Io@qZTfZ26o\j/^`]=,FLGJ^.fHm`\@i
%q+Q1`S5_Q/a@pT+H/%F1\*+OO!+4jUVj/^Bm8hP:Y2#ssP"g#[Wj_4jp03^Y<,"3NU2RTuWEd3iRQ;rd*('V-2/B8'>udHT".8q$
%&u2e`mnLKj-eGD8^"\/9@]*O@-]F_>?910u0"5VeWG_[8:Q!_-<nRIAHC])_gFd!o`I"Lh-,omfZd9F$/9cEDX`C=#<IoL(q5C]S
%Q>nK5V30UPdlO`"H`(HedD3U>__t::POYGq;-!&%^p7u&"r7u&:fHmXgaL<NIYDh6[rV5uKMQ;3:HGn$Xn,b6lD"!=*d-S2?gE\t
%mrpLO8@J=`X]>V!H6mQf_SF"4_RWFDS>/0O:7A8L+,jOmG&qIj`S+P,hiM,))+@E#1.m^PihTRmp*ffmkZttNn]naEXEWEYo'_@q
%%d0e;hu9*pp\4^[n#!l.FkNit#kN(kQ=(Rk_b'9Tr</H3_^3D+pfX_=d5jY)fTD@u[giM8O#>d[P(m2+rDus8EfD;tim;,rPc6US
%jd5I;V,;.EH2qaR02iF#e1rQa[jl5YmB,8\SMiHi%Cm[]buCH*V8r.F1b<,$[G3/h.u(:@s82iq5Q!bGiLg,K?i?=@qsXO_UE.[F
%e-m]]%8<8>NM\-6p86om8/cRT7"8>)IMh(&$BZcWGr+&g'iUCXI]lIVfRQSO(oscg#Nb)p^\hE-3bbuBj^:]t::]&Y:D)hrmQ)&H
%d7=Bj%F+/MFrN,*]P+bZ@;&q:L<NS%7qTjSd1qqF,->%@\Quo+B^jtdeN-uf!V2Ib%cT)Y,,D^U\:=AN$uD8I8KK<e"nU#+cEZ`(
%+h,Bp3u0qrQRbBD-'FjRol?mpK-83c`BfaA8nVD@!dAf$C_H!\P6aCJB%:QE!E(D0:npW<Og^)rCJ3j(ZGH8>"fR'S<QYcOfX7#r
%bL&=Jh1n</<Vf?aBIb-X!DTGsM.@s(E.P2O>-3fY/RG5A$VM0iYcJq(T`r[TUSTftXhuhR\\H6[2PYS_[1Ki<8O&cB-Ane+"31$-
%eu]fHj%A!Y>,+q;ej[oHN*[eVbs6@=l4/Ka[@01_010dure8_*c,/b?e[?k:dR-Wlk/YY:`P1otW4<+Ij_m#6TrW4?hYeRE.W\Z<
%&Z8<kR``Q73;R&]g)C<fWr\5S%,`Q8BpG`F[uO&pn@Dn+UpGM]KkQ\.c8;C1"HR4)<t/)TWAMX-[-YOj7uX@P8_uPd(^FXi'&c.^
%ghg)-IlX]4>0Z>oQ1TC#3sZBD/WZ<BX(MiTEWff-3<=F[g9Qo03j%u8I$4Zd"qK.e$<8UY::4,F0TN&?8$/BYH0?:OF(m`hq26a?
%&s\@G=J//U]cgRC2FVFe07D9M[Xg^QqH=C$2.<o8H5LM(!.&d=l.'FLH8R:$b`oMVX0Ukmlp@Y#ZGK>ZT["In!9C,l8^g]lAWNtY
%qp;iOVb/?"6Qcn3&&KBrknAJIGVK-@j]i@QKm[?k[:i"&.XNh;/R]hteXP(4!mAhBEX0ss^i`=q*FlifYL,85/NUhiY]e5k%R?@"
%N<.#0TCqn.)<dte-s=`9C1K<[)K`5?TP11PBF&SmZC?!f$J[Wrbcl=4BlAqj-33(QX]L;iS,t8=`4490g@&C@d973l.]j)3X]QBK
%\bqGTQH.hN\,&pd#R5VJSl"XGR\A$[b#W:r5k=J0MehK_6'W?fW7#Cf#F,>TX:reg.Ym7_S[*lFD2/KOX4MC4B$*.FU\4<rKcDfH
%V0hdC"r6PsWbfhc3+S7r/NrW$>4fa'@C[a\m./`o7B;D$6;JX>`^9(<>>%LB[rU=(X.f1(SS"oqLAP3"9B;0YYBAbhY=\1PS$i!r
%j:ZP`"[]U!H$S7'"9k8X)J/#1W1cP)ARYQt'14_4r?t_jbK7@VZ5S<jVFgVsFVS(P>)F3`P$I?,mAS]^7_@h_XOFG#X/K+DWT^sr
%W(TF.59g&QB'5@J6$,7!-q]eNDlDS6/"<pMQ]eIo`Co4;&m_^*V^8?k^OAaIeYYq&Yr,8l[]YZkKGJq#2_/4qJq]TCAWY,dV1Veu
%2k.h,OL'*rMrCu&0m/bbW$G8-Hf]F]8^oW/ZN5OL6AqrD<UUE[2VO^f[.\4ZJB1VpPMKN)Kt'pio(BV]&gNZXof`R00sC9,=1R_:
%+G1F8gdh&k`_GP8AYuI&I^`?o<N,@R..=$hI4rMPeZ;6j+S-A'%;**$!!NE^<iF#Li+i=l5s877iX.o8g/T8r7alk%g/\0t,?]pS
%N^CA6),1$+Lin50lE\O1juCV]W2tDYLkVDB\<Sniql$Y,f"[#q-#46JM@,UmR>JP"'FW)677PIHF;N,iBK,Rms62cIm2u>r^]229
%rU'X_pOE(tro;Mcs4@;?pODt1s7Y@M*s4?(d[XHng-Jc@aE0(H6DR+]/_M`@d@@V7?*Z^M\edLpVGq?eqKp\*2qua&H"EZjSo)o=
%Z7,As=RMngo5C*-=PG<b:3;#@#t;@1cu++YR8DBeRu(-Ki;u0E3>V'_UTI;)f'EjO,G6<eL>!`Oc<iRj\.i_b%9?9ATRbpphSdJB
%nJH)m=eULX?.br-=rUT5[fI`@<n`PUmiFe($WWWR(T+T:YMLr^?S8*!;q<A+I@u3-j9%(Tm5\KT2VVeE:/^GdT%*d<CRim8DmbI&
%4ZFj6H[Hc[[j^RXI%(q#@+u\]N.KK/Uj1ZEp=pY-=pNtS,0eS?2#+mfb7"cl77.0pC-J:"]bbP\WGGdmc*D3$g/d@2p#hlle\T:M
%?N.'MLrX5ZE]3*>h;9D&pK@(4?mM,$"s`7@iKOrF5lM)f34\XtmVX@SXFUqX/MCrd?d_T:=0F>)[WK$l[/&+-_^@%@G.J;F*h4.@
%k_%F\k!^q1I*6DWm`_3'Q]#e)m=t.1>?X6aI0;q3MmL7@iQWqT'3qP*:P'0Q0*IWMeq-M1rAI&P-%gp@BqhYN%nTQST8ChQQ]65R
%'@3KB;I=W`b:e/lI2uChii06T>UsnW)sa]<8Gd(=CHpS0aM(nqY7iVd`TG<K52<[&.Gg=2Z[-fWj#FK2gXgL.WROuJjX>1Q$n\)9
%.+S-YDs5.!n=:\0>l0Z:=hB^ZXh2MOWUk),'^t\K$[k1I?;VM[kp?KGTCmh2!lg,EE2Sm*7]r>+K?K\E%&!5T(k-bR^i-&WjLL]f
%L?kIk@(;Q,_r/E&i"D/.plm-hH-"BaCh.a%Ij#->W9jd2(Q-q``cP(BU7\0bDJ!,-SCr03?agsWLUT]9OFqGKZeE+X4>\hj8h=tB
%P:IOt?qBCiS+tQK-q%gM'H+r#E1P%di`7mbOQeE8C^9.BA5K4]f%G>t%I-mTnbM486A<gS!L([l0?N\%[c.Sc.<Tjo#'FRUnJ]#\
%JkEh#3buS/m`a5KM:6FURFCh_NKqBZSeKVMeOj;q"_qdak3D@_8YH1l=GNBU]i4QNlIZ^6[/MR3gPi>-3'gR:\&s^E<!%dUT%=Ua
%-"eJNDQCqRG3@G%XSV[f<k*C.c6c`'H!U2KThm27SLc<oVDd;AMLA="KJHn-k,H&_4;P+KL;W_19fsbKdE?)/;uhQ$gH0au\9=gM
%,@u#;%;Ma2PYl@hTcTI7B>.=C6_#+ME4[pn]^>uHB2`TGGKs"uiS13Z`oW<d.Y(r+>>A)3:/D[Rs"s0G2)R1VbTo,QT\_j_HL'RB
%$6+cZ:2eI]cQCY#/fgX'T4Y62a#^sTN3[^\4acN/.`sRJ]J^eu/o3tf!-QZnFm&RYZY[3iKmKtMoZ3]^/r(uf9dc^`4-XG7?p<AX
%]Q3LaRWaFs45J4&gf?1j:lcR'*=Gh!3[s"ck]],J!qh"63C!<,4%%hb598taB$_.T`GU)?f[F]IkD-$p(H89]j[sg@3^Z&4T"1d`
%0<PY\YcJ/H=&8-f=/]2og2l!XlCi73]U<tp>$<+XY.$0WK&^h=+r=%X:k)2H*9:Cu5,=F`o#m2HC0IFFdmobtc]u&9La1EIVjh=#
%W3+cckhQ[tPl`V8K;.sVoh0H(VK]W;"LZ]=>+T/!?fPQ&o.4Gh96#VgT'gIEAPE/2$a+UJnU^g=,;uL@l_3dFd`iPY]&']p4=dPg
%#_VuA?*ljC@-6>6Vr&n1/UshhRUsI+;EDDH#,o^g\TkL*=.Vb)MW%It<tq?GL.\+]RK+^"(91#$6H*S=$N"GG=BetT*8L_HQlTpV
%DL28)B88b.$X03Teu@bl58`=De#6if^KTs":P?<)H#R020Nm=`IC/3aVsM'd']c/qmjk?=1gdf9@5$!"&&tYWD<L2@0O^Q4ABjLU
%LJYoth==O$c3.!)8o)Hn/7;\]n(*bVXggimg?&:hVK-XaR;dMA"#'u1rKLN;JoV^@cF?"h.E@_01Uj:.b'DsPa,sseE$%s&Y@`A=
%eaK9U`R\J=m:fJ/%":\u:Sm_2W-%mP1b2t#>!'mWAT/Z^!lp_$mO;6+bF<BF%fjiHCc:HWi(1CRPmVD):R&JZoV:0i?cqERh4fHW
%>ChR:o(_N&i_o^uX#s[j`nd5(.F5!VXQ?ELC!ReW]""ASWEp(6fba&&jlu)iR\,)Xh4C4UB_G6"pKS&)>3aM5<d/gm%BHtQp?/!=
%-D-_CX)#C1=/9QdPMecPO6Tml@d/PhbYN;rkg%``5.+!KXk*i]-2)djSk;N]5:ipNn#+I]'B.!.[FMH:l"OROnVe?>7(R6B6e.*k
%I&hUIP&+XA4XZ1I(es7gQFBt.Z9>duc>COH$O'uHVf/O88ke3O./?Tb$i+J4:rp]NQUnOU2QQO,f7<;-&KlT^FFfF>p];nUpP&=f
%A\2q8KP9^+dp+#=k"VHd6U]56XVll\9WYu-)CDOF>p@;8b)&]3GG_d%ooisiWY9aCpe[.11=YC*inR_AjU="dHfGTY>-GrI\c;iV
%Pido%W=)\"1`t<[bAL-`S=lTM"2N[7=_YCrq=tm/[F8Dal5ELZ((;R.4q:UReEqts_p]b9<TjL@o3!g':B*bB\jE5Mk5poNSA_RT
%YX##fc%^#&=qakej=eam.Q&e_Tn6QIQ#m&uE"f]<GGpq)di3M0TVP\_U8lM#%!p(&)q7g@eBY-`(ju1:Oo(#73G(``MQZej1@]>A
%Y?^i*/HSfa7>H&J1Ad7l=aoR_@a6X^(DmOEcgk$i6oi/I.sQP:NEiIqq>pdohX>$B!:qSGATiN*C-ikPP-],fAA/5\"#^++99rET
%IkNf@7pfXrY:\<DK5bZ!W!LtN:5a(AH^d\/DI8usYOci%V0jM%iYJF5!CP#e(Y-rDG?YuleEMt@*.*M^[Lb`<&TH\[`^&al@)='W
%4cG,;3Zn6t($FM/;!+X\le3rE-_lJjT-C*;^+beOOP]-X9r*U6q`m8l@3_SF]Aj/mJq,\56(1;7?d8l"+jn%8?0;cABUHX!rZ^ep
%RS6I$C`,#lg`0M1K/gs&V'5Bj:(aNd60K4*7.u7HIf$S@NHtZG07>9flLaHd%WXkKA:$)u&#*+^*42^Oe6Djt^@5^"6ID)n$Je2*
%VTGYee^8!)"9[>CE+mJ"8IC17.;cZ%kA@#-l&hf(<7KA5L-Fn&F[0<uiQB<7Z5e(#:UH'##.LT"+1MeUYU:NbbM\\!]Ea3F[?KhP
%7Q\96[e,60:4h`tPHVg_R`BD.e,3-9WHCG/SVDe*JSiQbk,W?*0]LC=^:caL;<1H97V8\<)[A;A1!eF)gJHF/m8du8b8?usK:pWg
%EGY$Ml`(.kRPGXm;eotL<80;8I+>rZN*:<=m2JP"eA5Y&lbS+tr<8nu*_$S.jLE#s$CB_s&+-Woh]F\UnA;bthJYK,O:drCU!scF
%=sP2!h3.ZDjOuQSXUr0i)<UIgd*@;Z-;7[bBh<^,VWBV_nQtjXU_$PVm=L.Ql_a!V;JeGef;qT%);_57Q;a7D9'(D_X4qB7G%&F6
%RDQM>kuH#mr0\!(_UnX"aJhr^?RP6,QG:W23Hr[1Nk[d&GcdQH#(8$L"Jq`sT%_3.+H&LV7Sd=9`uOZt:ja_"o(1sR-pjp3Wa1IY
%E*4-T2=gn0eeAB/+0E4.I,@U-B`f'`@>=Td'"XPPdO`g`BV[@Y)#)_U2SLcoXd6_IEg9-qZ]#dgDOU1oNdkilH-P2sh45R)R3l_,
%B9)>H^\OCk'RT8`*mFU;k&f7Hdb]3-Z`Es.@j/of>$1F(!=4"3qXldlNQ*.c7[g>i`Mk5LD[(ASlH'$Oi6i:&ed7np7RW0i'9`Eh
%4ctigA3[5E40Mf#NNU=mB/^k\(qMdYguFWXN,UZ<QLKNjmekcbnt97YDk<OO/@]CPO54EpY9\*s'[\;.M_JT"]3?n9lHOR3![\(u
%-sXCEL]XVho4usm..A9dDeVLrcl<6K1u\aS&"IZkd_%I9btt[C0'7ZJj,B'm!A]WVr]/HNF=.jOp;=@n,%RHf8:3EO].9f&0i3o*
%)N*3"p_'+B80DY[p9-V8Zb)TE"+=&:fp1f9?d9?]Vo.,XX!oG:\VB)%Xl"&skYW2X0Q;*oRMGr[5':<#_8S@:/e0Ic@rjHA(F&T!
%qlL:q#\!]h62#X.bZ/HF+^%iKPNUN+PA!nNl^NmY!DXi*o`fB!*6MRHk1eRa^)^P`4lbml0WWlr.jmK<RN::uS-p6nZp+h6C3Fs]
%LQ@GcN@/FW?E2iaT(0'<1+2.sF_PqE$P+gl%*lL<NlX/KQg<VhakaO!\+d!4iX"VZEZ-bfKQ50VJaXc,-&*$9I/h2[m/+4+E!0$'
%&7_ehL?N`tc!WCF&7f,Cg^..89ce';!WbHj+DpD,:Bg;naG6+07^f,K)"?[8W8.o\;'UFZI/-kFICZh[.0gZk'ArTSdZW1O\8YOV
%%EtT-lc+^J$\tfFKqgQ5kbC3>Amdu!@uh"'6fH*S&@CfX$@j"'/YoL;LL4(n@:OJZLVn:0o]BW$m0U$r..cK<`0MM/f_0B!kab%A
%Cf]^VpRNkagrR(+QZOIL9epOIDWJ8AGP-u5IJZtsDD"GDDO+jn.%Cs7DPS^K\hRu;oK=VNRLeX@:k8\'G'jp#!4MV"a<g;06pS_!
%8fQEE]/]=u7CK"+6[g<&i9nN7[_KpfMg_suei><BlNcQD>OpKHP-uHBP*a(^]<F7M`\Lp9/QuZ(aDZM1]<@$n!dV$9)M.$LA%T:G
%?m`6.HunC!ENSa4IY@-SG<gkG`"=JS`7VP9-_l#:24Mm]#ak/u2?Oo(./pBO0M:qMBXF]F9.P,MHO.gL[3>"+-;%tf=-=Ledaj0E
%Hh!uCb$eQtbL>3=f(H:1IGi$*EEjKc7cDVbf\/PI_(:M>P>UOjI3brj%+#jX\V8Uhdf,g"("Sj5FkVn+Aq9Y0:EN>D=X+B8\f.!'
%2:Bk(_+D!KX(Ta)g2:jsWb$VN?6&@e6o%!,e'!3l8+4EZDgHu4+C\Os=$f7m)/b?W2;$OLHbMhQ6thAApfBeB-7du20HjD7VV;k-
%YpG-&K$hMZj`Al(6isVi\UEo@ic?2.HmP$J6J>6?.%/=15Ph;1L35B]D`iI)6O!M;5,j_/ZusQI&o(RH[/A29Z=TGu_&,Q9Tj>pQ
%>H_W'pf-,EPaoDS.*1:n"G^VF2qQD\+ZdD`nf*Pl9dRL8AuI\<B[)[*7rkJ?q:k00iHH$,$2W4cUbB1=,!fPI+qVrFF"7Ji%ZJ/u
%I<,'/,?]Qo_2HXn14+DaGrkf.qa!%9*1>iJmD`0%\N!OTQh9Y2el)RoZe7;eNLeA8@\m=Mq=q6RFul7>/mj.#1,=E&4t!9QQS79]
%\i<;CT6DnpJ=eSPDE=CUA<+3J&j_SFcKCbA(GJ`'a%Y[fcK176$HGd%>Op#"$V77TA#8dBkOPm[M"/si]Q<o$L?/-oI,;D]6<,*V
%S^/8Um@K/&.Et?oNMQ'SkCJ&np5(G<I_4\^.o%rE-dCH_Q;FqLUdbiZ]eA(Z`.LqKAcSGSpk`APZVu*U1cqL\UWU$_?F2<`p/!Z2
%;<F,SkRd;D@&MAH[6Xq1)PK[@MN9#Hh]oKg\jeqIn'eUQii9Yrik&EI**qEK1ID)t:guqP;LL$Sm;O?,5B\m+"&d:FT+D[%EB!4g
%T=c=]9m.K1]gW/"0]O[RB40Ga^\AGKUqP4EI!V6pL/a-.1nt8Oh$o5p@=0j:2jWCETrf"B62O@jo+U&inZ'!M>/@llK:U6c"N@Fm
%+6ZDgSbH<ZI\%Tq.m%./2.W1[h'o+>6q82]d*mc=5EC\[UWpF`#>/sRlqtUk\F![<&irL)gNBJOU/_*SULeb(FGsXK$D7/Y&mftI
%'G?,D49#L/\g/AaH]D@U2$mngcG/o"/W\!Mj"lID;9tcL6':p@Esa4-ab@uq?7`_?e%$pq9GuX>J.*OgNgUPj88Hd.pb@L`p_\Wl
%>'&Tu(^4UUZ4)IU>'ujkbl2'6/CS\F0r>m!8Dis6k3c>W`=>I4K'g6LpO('lf=eS__=f#5F*4.WIbukuP\@3S[m'/phWC>8F$AN*
%P!s;1hJX@9a^DQ]"HVej6d)-e4jtrB7hG.A2HDpK2:o3"eV=hUL_8N6SuYrK3FU6D]lVS6?q?-*kLl430Wu1B:pFNTe:$\t9*SD3
%1"4=I@CkS>Q$atC#NVY?SPl,8Za8K9Z5eI[7b6%;m94blU8JI<qZKp5q,ZFqOj\^G%d+5jaC&M<+BbS$7L+QeoLPV<lKP3N6[<Td
%I53o]Zs+3;.OX[Z^maWQ)c]7NDes$MfmC'^Z[-O4/S]P!N?b9Jm>^MHM9i>XAhCl3U]_jbYO^qkiEd!IM=\,6M;TX7^-lZ4HoOpj
%9u,XH:c'83%.=Z"$U?o2f^[%0Y21,ND<EQRd+s'/OWEKof*M`ROW`^@n05m*e!,s@hB.t#lV!As[j][Ud4utK:'\;f/=$D0E]@5[
%n]f7aO(;95a.D\Iok)iA?&-7M]a&0Q=a1PDrn,8_@A#BOpploB2I)-3S&D_5*.q/e7ZEe"QaM6;5Ma+c<_K$Va_g<8cu+,XQ<8DV
%0Ggf0ZK*qp7G&h.rG>7=R@35QX\C]00/0s.e%@I-L7knn1@n2UYTc)Gd[>A*"iChBRHJDG(+,T?(DrCJ317uQGpD30e;>cM,A6.I
%bcRL"Og-\5Cm"H.4pB\[R<\ntAhod"*]o)Tp4]rY>*DMTL\5OMr43F=X0EU4>4X%3I"YghVQBY\UP6W>k0ABkH:b,fF26o!,`Yp%
%X]u;\!M9gh9l-.sf_2=X6Xq2=E-'-RaBa"8L'k2o*,mH6/WPtf^-\oXQG0V;ji>e:_%DI"YQTIRGWWcN[sYlO,E<QESak]('RJ_B
%)d]DPL-dO%1+7RMl3.bO0p\hgF#=PY]Q27)(s^'r%Jf#(!N1n'L;rDs.gn-oqeUX0rj9(756jQu@;oNr'4cd)J0k!8VqK>hUtq5F
%bL:+,k;3"SiO+:[HLrK9l\Qt1?;Dt@p>L?"8[@XRnmmno8OJ\5P(eY1:Qd$+fO>(UD90VHN9!>mLN^k:ZS79W;6V,391#tio&Ff3
%cB$;B&`$j'd,)X#,iuQfCQhN91PbQ11@Re/b&_+>aX?1E_Y3VaP\7Ef?%gl*8U2ZWK093F;Fu.G0\/US8%%8]]+u8q#tl-'oR"Zn
%1<3Y0"Z6MFUQ3#cr'%g]V?&bB<ht/i%VMiS31chChV=n`Rp51jb&72P.2^W9P!D(!NsK'q1QZ$%7(1,uQGLC?f9SU'c81f>/;=IT
%(#"&,SjD?9cuap=fkd+-#t@+-SHjuiFT<5]56i#!=4L]SG]jN4YFi_OlPICVMd-TQSNs_PE-_IDWPi[<dqj#-DgfcajSgTj,o+3G
%`Bt\\G:,+6`j@/qY.HCBP-:61?_J9^SNZjl:%h55+2$%iSsEZUd[S=KTEa&6ihl?!CYIU.=5$q6kmeGG,+%!3RM=nH!4N_koXIri
%FR)VPC.n8q(N^V6NEbj#gq$g.]-Y8KH<m6=Y*c!OXD)m>47:4>F.]_<=#['hmps1MA]8An/@"_nDoNN,n6mYdl%\/QB<pF%^,p8$
%>2\.H$D2e,8V-i?O)b@s2fh)[o@)dmnTrPP\PE2#;a-"k&[Y8*j\/@J7m[upN0hfN&`;oSgn)`>=a$3L-_q36>\%!5:ZgD,IOYj5
%Mu0&O>Mk`XD<.4bJQL?',.]+H]q//pW9Bc<om0B^2n[o5A79fZj@i&KnU5EHD(DL96'&Y6Q3P>=%RF*\KA^Q?Z%t"sWLe_q>&bXX
%aa%eh%;t7.=C69RpdMijcZpeM;;Mcq&&(jdqamnmI14=F'Dm#%jK-)CI5\6bI83fEGM>hGZ-V5l4OM)2VniP4K/=s?f]NrK@RNOX
%0!Wa[kr`H'pA&]P:EZo<DMie[!i$cJig&0ZPh"q0#rtaiT@5u"J0+hL\\pZZl^FrIP>(=ab3Cc7"HuFDF3<dSAZUi_f]SLL([sP^
%CS\m4(Vdb]'Dn:8-a=C@Z,Ai(4up[:N0W&YPgsDYcV\2\9Sn2#$IiT"qja+\D\eD)fOo*E('$.i`4cO#bthf@J#&'hfOo(O4sn]_
%'Dja@b?97EJXKh3-h]RbUia;<Cgs$l!1,iDIXs3eqcmX(-C`ZNC>quHZ-R,TJNljkZ-R-M0UudMM1#JC:KNJ`Q.Y8Q%dI&dCgs$c
%OQ9+hQc)'\ZJe>4U.(rmXE8=D6_WL)]u-G?k%I6_g)Y9pVr-hk(V/M)Ef>I*T7<,9XBYUmY4*C'Eqi#P^cR&_\J,m:WfM_1qHe7d
%l-OAii1N/YI86F%p:`fnra&[o%D&TAl4Z3%h7MdofL,=gD;fcteE[oNW?HqSX2u'Jc$m[V-I\R:A?lFu8\0G=gPk"h2g4b^*&oi_
%NeQZXIn#6g:J^S<QiC4%*7"<Y%@Mi_^\i#7Gj#_ls)W:+g[>(\,ur*0q;:C2aIt6d1L^SPn,F=e?])IWKW=H_s5-oj,\3=1Ohq`#
%9ha64A<'0,J"5RHoA1B'hq6UMqbHZ%(>"Y_S3F8_5$E%e9`3OG\bh[`@ugVWJ_0VK,=>]J'6$O(UGqlU&Dd>;e,VREIg#-pV(#q6
%V]dLNXF+7[GV=O&.j'$/#NV6I$]-6:9aj!3DMV+>C(X,de;Bhl0Ku<FSGS/KnrnkirY:sU$;kBJ8\et+K@`BDO<!'&&?P*\I\7.0
%P\KUA-i5'D:863U[dUD'aHl5jX#>2]b'1]1C!G9.aG/R7AJ%1CMnT=`[$Wj`'BeMjl#l9eUTs'O6?1P]R/PfQ1QfQ_$C5q$OV;4W
%-[N>`jlA%<]VHtjj%Fs(Q4N(@i$T+XBm:Z9+aatB)LJ(n>FE8]#2%:9.26Ck"rd&g7N*m1Q>h\/Ze/n+KaU-%[d>LXj>X.2IUmp"
%H1,*J5ecF3A5\it4:?(:r9/CohpAD"B_VMZ<HZL8Ij:ljR-snlh8C?!hS6kA$Nqhtn"7j;j86,GVq,)`e?T?!T@pqGhtn3,k4nZ;
%L[PiHbKM`$BRL!Rjo&ihWmd,FBjT@[aS&W3rS0%J(j%ht_0O9qhM7^kbR%hW?@+cKHq/;+L.9;Y[<gA;6fVhV?4T*ODTM0k>L\\R
%/V:i*m$ULXO4o/4X\8*t9k$TI@<^hRkDfd3%Zs<$QF.[H\Q""jW>=&lXkl6eDMAMSJ_!#4UsGeG@/)cgF/]r+5CKd!J4(jhBg-U;
%I&(:6g%c\tVop9l&rI0k8EK8g+PlTBdtcEi;5V%\p29,5'=$K&r(XR@E5+YWfY#s*eGXoH.QW@.]7'&V^Z4?<2l*iQSZ;>i[k:E*
%n$Wd%qqI,$Fb/JqZi>q]?$E(-4ae!U%$U>*o99jEH+/Bb2j/qj7t;d)qOlU-BY@Q70Y!I_Kfm6\GhEEV<MFi%@T]:KL=,c^G1N%p
%Gt[VY-W?%1VlS*c!i?r\bLL^`g.KpV1N.,VhDI*mdsm3Xo)Wi@`OM@3HTuY(R[Oht%bdR&DXY6D&:^Ypqo4eTpi^cI$?]\2H`jkE
%X]fc+=?)@]2-p2dJniSnlcsn-gbSIV3ud(`?cH2"R<daq!ljR*^NH_qpp,c](1M#jp?YG!&l<!nVVuis5>LP#KKI]NaNKi!<!$[*
%(.s(dV$'9$TH5Yo6LAkJ2hD)\?#RrDLg,q`(T+16AN>/7M+pILE**#/;spXbeMIROQ_LIIn#+UYn\B1e%n:t`iIho9LE'AUCeXa>
%qQ_]MHGAJi0ZD2tC0ufg8CjTSNm`>qlt[C=`jK\3$bG-:6.&4E\+2OID2D4)s&qh<J&!Gh.gn=D9LC.&pHCscY7b*9:+(sV4)3^)
%IF7or(j!Kh2l[&eDY[(h>BDa<L.dR`7tLpbdc6(T._d]G"/CTYKED>8#EB?)%nO,J+q2]%:QFCSQJEt(H&4o-J9g_1Wd>R7l]++<
%f.=D,_`];%lDZTP9;CQicL11ngY58;G[HgWdRk$OhB=e+2o/.Nfd=:9Ssb*nXY^>CfMdWD'9.4_29eY`FFjkGm@]]^!Cr5ta&'"j
%ZfF>hD3.arEf'l:d[t+]78`HA6a,4Qe#5bJ2J%;gQLns?g<X=)aO2_;+0&Z+4@;.<#ejOSrl7HRYa`tEBD7g.>OU+IqBR)bGkI\A
%kH</,3m#7/QT-B)htLu?rCLUI]fI4R+I"o&3uAphXfVCs%/s4K;n"qqP6?9glYT6d2!mmr.8WCmQ4CS#LWuO22t#/InP0hi5nUsX
%JCXpm0tunQ@nE@Oa)qmLRSUfpLU;Wc6pi,71?YE?;s#+I0p1U\)/%*$[VlolQ'1@_icWP]nXYj,2]pG84aj4R\oklYO!p'$KTnm>
%q2!VPF80iD?hoM*,N#>W5q.Y>o+AYFFs"'O0-ARlqS>ZoU>L@:JA4c2=,cpu7s*Ej2%OE"bU&<%4R\NQj%JQT%<5OE/CT(;Z9gQ,
%jTdFhA;8.m%pr@NESL;R+%'C9kUt=2H<HqQ6h7--.s,abrPW9$QAh*$\u[S>cMa@60.S"V0*'h.oj%0)m*;8&Xk%h"ql*Vk?$L$1
%<Va)@dA-([(ERlMA8n?T=V/;#4S3esUP,5SKnnNo*VteI)Kar3cVpsc^$sB>!-HGc1-&:Q\aXRjI*W+q@@1spoHrcF/j/d?mEj8M
%)!/WPOV>ll]C=1t3C.RFoE]sbm_V?[)]&Q>n+RfHiLqo3kP,i7DKt#](pI7:1%L$R6Nk;eF5`fdJp&NG/_Y*l$P0r()#\.^\F@jl
%j`B&&L:m$&-2`VUFsu*(@pO?C*LC>tmN*(2j`08<:oP_8?[*tCT:Bd\%#g:1ms*fbG:UtaPS#N1FDF</gMX*I#$_fb*s+:uKnnNa
%_3Pq:d4[WS[cQT6m]eB,oY0]Hi1>iggkCN92^BbkiLtIO\)c`kn%qG!l#G`jG\CW`3JnCRX`LiW%nDca_d@ZP5]5"eLI*"$[38o?
%N<FXa;`Jg?KkLY-Xs\2ITi9*f0SLsP:#a#Wmhf5,oYWX)*dXG@,/?bI36Hr1[d[tZD2/l3naIu(r5-@FAD65`*r8dba1q+__t1=S
%_!q(4%XJ&7EtJ/G(ERn[G3H34%<pd)K=ah*qAG[j00JlP#gg't*dX:2TVkNH_F&8'LG!A+\F@jLq/M@B)!/V%VlWVOa<'/!BY!WZ
%]+qO*W1bh+oPOh'?m6C.HD^uEMs,2kn8Pm:I>\>FoEu2#_g_AtLK6)R?[-8C8'>b)2OQJgKnnMN;uqGDiSa(6EK8bZ,AgnH=7U3`
%,PaCF84u\$p@N@`U%`DZ!@+^gEf!j-[iLpm&*$o>."QBJmEjuk)th'82k^fQ[7L2/nBa6gQg8?q?[-6NRdIONB.)aG(ERlMkmg2:
%7$;Wo4F;5+$P0ph41)tLNdBZXpKD!FWEPXH>0j@`eTr9P"^<=T@3e/U0Kd3jQRaek8!s5:+n*,)rS]]Q>,-A--E:fb>[Crm:'s;f
%R/CGe9c46oB>Va-.Shu2_U6>,@l9loKhc:@XM,G8XmP6"bk8NTYVBFZ73JXHBBeEOg^27h/BnF9CD:#ugA)"Df72nJ<]@b!95CS@
%[n@P1c^%HYrM$?*l.>K`U@4`:'YRL2:ps0+bK@ZhdBdl_p%GO.2ejGWq-cCd>jU%FPfrL8RrY@t)TpUZH=+3h^'Z<5Oit!"pc<i)
%4?_N5.F2YsT(3N/=\rE76`6JMVZ^Bgh1sQrVlr"^3rS58W4S._#<h%I#H=R.bOt/Gn]k#*D<pKWmQJ'>5Bh0(RosUhk>'=3pZ=\(
%kGG/`Z(oZ>UGB<JaNbmBrjjP]/b5^U?pE(7*5*KC%\&i9Qd[T?k*4P&Q2GgREYKm;DJ6b"[gNMF#JoO"D*kfVP?kB%P,J)La9&0Z
%pf^6#N:alMQaN`1VfT5Xj>#4Rph"4l^9FHtq>It#^K'ulmGjtFm`\Vp'p<9`%,f,a4[j?RF*+V(o]I?-8=h<-X7S3]s%nOmf-2!5
%1:*,-.`7V"QO"=f#+([[hj'>OS$/Z31,Hc)FS%,UMCq(D*HjNN:S!.4H,q$id.4Y=,p[MWa5Fu2FbkR9#qZl:F+$3YZb*9(SlXDL
%ol<`[c9b'LWUfkU"mF.`o1h0;`6-u\+BrL;/EUNB*i8Un`]#QKU[WDW)]n&RkXeAtR0_9F6p'1=Ofp9.oIFA'1L^D4\!D$3OSn\%
%X[VHOq!?_gMuF^1hcJ[+[beJo%tYhMo6n0M&Z,;44BRgi']r_]#8-JKJ@GGWNFu,!deim1nN`3X/C3a5n-;Hl3`^D#@(L1P[NlUE
%IYq/3(us;Tr2`VG)#5c'1q)J-6>p=4G>\YaI)V"Le^p]ZU[ceZ/FqLqQf7895q92tU2(tVX8Q`H93"jnB]rEh+_PP$kEp^0m8iZC
%<U-#M@^l23m-sp/:7bc[kYj('=tpS0&OeBGGW#YFUG^?[8s*rbBkp_ZR["$q&W'&peG?Eu[hamXZl9\G=rQLsF0p**WEhA>dp61h
%>j\=F/e^acoOBaH-+"H%3tD[M^:i-=?`eruDZBS07?EuSmT2V5*j-gKd>C$O;>:UB>q=e!WlPFab&NSmC0YNG'?j1UJ,_pg/?KU=
%5I4/>HP5%'@N3X;>L;G:P[:Gf4ZA1k:E+WJT<ZCC_D_\lh.]c2?<4,A,YG[A/=!AUG$m/1dV)siK*;f#X7=GmhH@Q)I:(3h<8J+B
%qn'[c@59>1cI%7&&t(\NRDPe$5!ITUX`:;#1$&:Ym4q!))kUKN:U3d8Enr,[BB?;1En9Xu(G6d%@Ug>O-?jY'YY]XOhRY$@_8.$Q
%XWMD:=Ke:D9A3goL]$6-XBp;_,sg2)SC6W4]5_fAHnJcZ='tChcR[bdg&:,[2>$Q\&7#.)l.E1ENm4?7A/p!LAA((-/`M.0XIh.4
%&[X^oIY3MLfEbBBR(P&:;6UWq&S?M?K_Mb&\t9O9^9`X"LrL4ZMTb`e6pe%HE9QBI10(0lDhTV'DDqTFMB[<P1Ku'&a.3*"a^#&a
%hG`POiiXFN[ZLiHV%Zk/U!O,[ru3J1+<e$9<$@uoG$9kF/:eqt?UgGMUh6^<\(4GJGs,mre0CKehoIaRS%;UK_Gm5K7"f6<NGs5[
%#q"jI?)e-D[Sgr-b636s$<nsf%q80%FaoU3:4Q,.VeB>VcXh#Ei<7C3je;!.-sT(;\rY/jcK=,s[E[O(9eDYV$fT]tZ6+Bj^]_2Y
%mB5?<>GROOS!eMWFR+ZpY*&Zo/\Kb:*4La##SLu<7:c)6<dao.EA]qp[^I-U-P(;C`6Os@i%P/b:LYVLMZK+eBlUr/%Q!"CA1bHT
%P*uQ3mMdMe8.%;D?X,5&lB,BC.=@X_[kHVte]R=6+cWt*B%6Zo!kOgSA;)<dDE:hU52HG%>uW?%Kl(Q:31)#/Et!%s?[6+1P]u*M
%V)0gQpKQ@pg<hX?Rf%to]e<-no;9;I34bke>m(nT\?&`Z$Un^W8tOH9]&U'/PTnTI?A)HUBVG0uP#hM'B=ql"W%#+W_eP=0](C9F
%qj>p-VUY#VQ=i(hEtk\4rmG6"ZHh`3;[RU+F&iU7G$]NuArl/W%Q1*H<?GXMn'oG$m[CHUH+sS(P`F'iK0*i/4/b/6WB&79F@K9P
%P]!V%Q*&:Gi1QWCIH,i/orDGb-2F]^cWMQb4t/nt1MUm65T!L,"#([)DQ6o?jesg&PfTJ)e@jU'(._iFE)S%Ir^p4<M8si"\PE*<
%dYoZ0N*'[LU8kC%jZO^Ff>j*[9Lg#3cY>SS'Dm#Yg5OA0B<+36<LQgCZsdTINBFVXPdf!W5ET@3PZ#ip8@*&)kt4'^'IV?(3On65
%V3\X:&K(3!RL&k]<@qJ359NVtX[^$rD-Fj[OoPYZUPq6TB!jH`:pm-P8f@@`<\f*n'Of>TK.X[MOU9H;WD%B!L=D>FNUppZZF[1+
%DT24PeqPuiEeb4BVS4:f5o0?P3eTEKdjpJ,LY:HX.^_]Of(/X'UR<A'F_/9e>UdtJ,.j];I-kb9m6[?k:UP7,4-SIHZa4;p_W0Ls
%c>*B-,Ee*73`k%Pk2NggGJD?Zk[#N!)^u!&km88ch"gS/<6E_Wm++enqdCdW-pHfH$;V2/SWgXropq$&MS!6g0%%qo4EE5&MKS1s
%!S:.<lQ3<PR&!=I$[&=N>,pJ.j=[U<40,c*k;.>=%t:=hGKp[jjmkaFFB>%4T[&e.e-?#<l-iGE\^k6kHn-r1[iQ=W[8r5Uf<4f0
%hP7Zi](ZO)NK5gc!GA<s2Z!#2$QE$J"\>.09!mrt.fC7!T!rtR<'6e0B2UN9#A42&[<hg.'KR6Eo]GGY]Jo&)ECQ9$3X*4.5?iL`
%DJu_.jt;P]Dcalh@9q@Q\*C+BI.UcrdWu;K`(kctbh./Z*T>68-/`!Nc<BHus#04%C1hE!lM>m@lY>D@H`OR'\^d;s4#=G-pU(*T
%KZ%]smBh4p.S$Vf%6cBYQ0MV\8D&"FFI_T=69##+)s<.J>r4:P_6>rLd$]+)pZUFgmR_;$6;O-,N1gp@,$6[lpXFluRr?SFkWkQI
%[^Osq/,%0@#=PG\+)JoBS,9aeA?\EHC%7^Dad9B*X_]FbM3L%s.o33i#L/7q`mr<9.<Vh1`ObFI3^V;5JM0%q4:bhSBD\AoOL$<e
%hC]N5T*ro!@PkdF*K'5S(H)qkF+!ZQO7".q9ZX>!b;Y@,.s1U"=;m=^I>g30S_(EVgg&,]L136Z49tkmEM^;Y&W_D)+]nBrQh>kg
%89:L5N(&dF@9FO\^]_l;kT4KSi3nihlpu"-:uDO1CP'M.IuR6<2FVLo&OTiWjmT.[;2FF/"iEiS=ZB0CSuJ1i7Pt&L^P3Qr>&a;2
%F<4\I/KDPT]_gd+E[M\a]K$Kl_HXB<,e0@IIL:hq%8[:^bK\K@W3/D]9g"bD"Ih*;ZaPB3R'NJZklu<O=k`CB]#A:\pgi\f0.)l9
%\Vo!FU#PKgC6)%Y#`QX&[7rf!pq4A\4N'GGRN2[Rbuu,-r]soA[]]>UGH$5)G7cC>UlIZeknr`11W)Q`d>>J*Q06,geVB4K@eB#`
%;g;Mb^A<S!BGRaC(%ZR.V,I.dW_=#C5I.^pM8RRde>l'/l+mWQ@)gS@-`B:)@Tc-b@ff8V[mn4-#_k,[L'LEZHE<rT."a[mps`sr
%JKgcobe=DV51UZ'r)$KT3]BF.10SU&2IkqdU'^/DZ+Q?_>IC#46#/rIB,[irA8SjbOenq;d"@JDl5k=QJs#Nq267_Wl07giX=2-*
%nB5#_(qFrB6+JtHs8Gs_NMe0iX`KU!*T![$aBi!"L(h<HJYmKuJmKqAPWlRFhm!t!s6S=Bg3P?YXiS9DH=L=IjP;6AkT4?O7+bbh
%(,=a1"c<2Jj2SI_J<W9<FWl\Js0VPZhhK#e6,.jpGc3_81#533<oA`SHH@2!dKBD\QAN,r>X?ipW6nc'0?l5(h)Csc3+.4kD%'%S
%!J=&bL<i>"1:p6O44?POR=@gr4r]X+J8\,/L64]D56BSgU,<>SW1oQ[o=%6#86aci<DJVIioX-Z0,J?)//7RFhICFNol@G4G0sVJ
%FWOm5Df'Vq]uh%%Wr5h8F0QG20/h:gPBI`44b<u$lCClq'K-WtBM<*#?kf):g*=[eNG6[uBM"9Kd;U!b>1.kAc*<3IAeC!i[.OZR
%=O6AjKFc5-K=X3[,6rB!*B,Oh#;$TQNU%S5deH\cm3):dq:!hJr+VkXq^D6bNoB;\`KkL!A-/.*1o)^u0%>3$O7Zr,kG%Q"V(3fU
%Q?nDR5"$s)0Ulrn_fkWfnKE*rq<Q/WF"?%4oFp@&XH_)9V<].6?4NrYjJ]<YCb4k^7erA]%?Gr^%5$i#i+DA6V'_GAA)9$Y^cT4L
%aF5:3W!De/Ieas4%6c?scL7oF?oM?UB1X`UWS-IWm17OWAXhn]AtMg]OMK2f5+R#B2a9A#7_n-3c9@eF!;!P':T'e!2Es8"FR#h>
%psIc=>]1rLql'2:j\J9g6[kuH,d_-,4/S;uUkMKPLpgjMOlco?C7'$OaXOTni*3Ni9IXa]d_\/>D!;Q`qV-*82f7n]_%GY'M[ZkM
%YhV^D?F$rC<1)Jm$11\"AT-U<%.q$nl&Er)DS`c?,P4AT7<_qek<p7]D)rQ@ZuL/.Ou(gjLJ0GqKEO#.!^cHN&$*m8)?Q?:`!JmU
%;$sX2l-ElYYG1gHA+pkhOrh1sjl*a_[@iJ:+cZ@0*sHL4X]CGmWTZII:"-]dc1aIU(dn.%gq$fC933AWg`6lAhER0P-FV"u2/:56
%j`Al]inUd1^L3d_5L8"=HijmkGTu//O\AT\OX<G!5.nYKDt_q2N)'DaV#5qu@R:,A(H0X8L;6"0jc4R6G0^U[4NMd2h]Ee.\1o4:
%8OC:B-iQ`#!5bW56?CX9*X[,A-]SH'7@c*rNkg8T&f,++,]"71>NS?mO$s:90W=>m6_"ns4BR[F3@6J6)G_H)1*gO]Pp1ct78S;L
%,DMSYn!d]8<^L9ZjDXJj&jie.B+HW5&.W\5#PNO_/bn<n:nDNWI5F4)Gdak:DC:Mi\7RN0B7qLY4+U;FZ&Rjb#8.a\&29jg,W8UL
%ODh4;.-$JVC2!Zr2FFka#s7[f2j7G]JsXR<n84O3R"2Dt6sMc-Lb'e^<+OZP)l?A4Yo.\T;Njrph`;4#=<$AH@riU,Od;gW(jR3#
%`oN8<lAZ*&"h](*U@C->1P3`[e(aa';n:PT-o]n>YFb6!HG;9eV8XD\`BkkWj,,i(+J^j/\;@anaWOKH-nXRV-pB`O:*h5Zo5$c3
%LMr='@TF@'oKY8%:)K5X_>CM4i(iVaedi-]fKa'o))jFG/X[F>;1t;Pn^.Xc!O$s28m4[d;=btp$L_bZ<$!O*`$0%5@bS<n85lXT
%VJ5/oEFHZq6Z&ksPFsL_WTY.f.sIi8;tM]OP<.DHPi)4aJN]USnopFi1lIdUM"EA=M*9s[+KbZhSX<%i'i2f"/@O#3j;QpmLj)Gr
%&$U[C*AYLLfFV62gZsd_p>oFPNP*.D$d#.L2c%8\5X08;'!6M(8.KnpKoFZIS0T&9q?h+(Q^4F0G]'%X0(P2gUn^#Oo?f5>]A4m*
%#S=hc[9B.@m,>Y%Bf<<"k=uEZoE51M\Fgjt)=+KFc)(#i@U\HY;;fVWrn*C9Aj(>m@(u>b,)G,h_Tg2n"_4Wle5S+D#*>141bu/O
%\!>;iF%3@jSf?&f\@I&DI4GlI/(%d?&OLB_"fNL48hc59`r0.LAN@Z\:E"Kh"-4@l#Me@HK=T.O@o_k+MAeW'-$HZ#[2GV*o\hX+
%*C:krVdV/>qip8A^rVIm`9J;.qsiJ507!uC!Z[T9VX0*#md,qjAn>:pM7*CC+kh"'^42p%Lh\>!C!G]o4-G4/qon<!(B1nTJic\n
%iF'&)+CddlgFb#Zhql`W^Yq_l"<:3AU,K[e%^YH/H3Sh3XgFHk`TMl8Jt?6)N6eZ*fm)pr;\s_1n]e,0I9W0$pHi1:hPUhiek]7f
%B=V;E[t1UD"MGj](6,,-34N+jL<a\i!=[f1L%nnq@5"4u[+5OedYhQCoM>[E*X7>2`tJ:'QD:9-%kK'1m'F54c7e:O0^),$2''WO
%Bfo%HM3tt0`k5gf!B_HMQ;#+94^i!F3*F7Ic2nm8_3Xfm[7P%L]+Deu_'J%gB:`UR,J_UmG4ooq(Ekl8U&:H9]AURT"nO\!oOK'(
%n=(H\)VT)4^iFH-27'3#MTa.hF5^#(.j\A4l7]LtkMaX_$h/]>,R5A3j(6Is[N0o;OO&^EU'&a)j!QDjhWJC&98_>>)t_>k^8ZC>
%FI9cG$ol&h<BQL3G^<GkGFQ&GK!+3DmOkThq_#[ZZfm[*SDPPb(0uX4eOSXfW+BL8#JjjRUV4%C$2g9qmD7e2%ap'K-9bOmaF(d`
%"gtTuV7F[!)S%D;Yj>Lcj7PULe1W?M?A(ht:$=T!iJ@AmYKbJNlIk_H?+0838P'J2?S'Qf;G88EJh4A!Dr`_<HD+P)%QF-<T\S@t
%5o0&"S''UR_5d@crdnWC,&&Y$IU=j*$[?X5Nn2'/7(U$[0-!==Re@.s/*V9s-Kr6)3oc@N2^"*Pan#M8n>IM-j)C7VZ8%)i)Hlh@
%HOCUE#Nd%M=Z]ge^/dk,-^pj4pu,W1J@6Cj`/o*Bj\+h](IC9%As)]RH(1)Q?4#)e>NimTKU4H)>URPpOmR`%0&:)KOs;#1a5r&$
%(Y9iNq(BH6*hO^<1LiL!Vc4[pYf-S&F,tGuWR>k5_Xo<n-$FVT26gfZEdadG]:<5Fo(0!/gJg7.2I<HU`B4#N[,g;u++,s]2fU.k
%@6QR\GX'%=)75^@=Lc+u`Tb[V[3/1NGfe<m0BL[@W1n:%3j$YE0Eg4NGJl2a8*/!<md'I,Gb@miJG"2SSir#//0I'Rf'+;Zb[=KC
%B30kueRs>mh7;nhLtp'#1*<TN@Y,-#Wbu<nMHWCI_*h*UeAncU4e]d28cMG>KS@['%:K[$C-9uqrG,hS6_sTPK!=sZOs,4b&XGl@
%c0#i+an%Gr$]52^'.fFBCcG[Fg&T7!NB6^67TeV];iMc=PAm#p&O\FdcB"0>/In7Z'Scd)$JP+MX9r,CS.r<;V1gEYE!"8\QF]2F
%3amdG'DdG84FTb!fHd?'QO*NV75b?0j9b/Q+0(:t^`um.rhcd&4Y+tnK`a<%TA-r-,%`Qr=eIl,:/6E4+-D&0QB%fMoA;"Fd/,Q]
%3(+J:<YgNiZaL6G!@g5hMXLo/G?fDga:5.:%lEuVVHC</?P=kfT]jK/8gkUQ?%d!A_<ZC]`RDT=Rp2pKHfgO*PM+[`j5'%)Hm:F7
%9n4,.%a,EnIh@X(P>MWnoOKYe&6_gHEO]YtCe!)Pa/!76&[I4s`<k%BY5cJCdg(XaoBfO;MSj6BSD6^B17:3M1teP5pN\!:g^EI^
%/`+gTYutlZ/4XlalFcLlDS`d8cB<klL_.1X(jrP=?g]>K4[%oEABWbs)a?]:N)N+]eT.[>oCMcqcrN**JZp:TFfqQEmC":.9/UK"
%EH%Y-)Th[s`c],l%QG_7;J1KKFB6F4`JJ%jCoRR]ISMPQX9dXt!C:@D4;`kclCIn#U=(cPY)N'pfI!AB-%`-PgYLF%H_HD(Y?nBl
%.9Z9C?:*O'2s_6tA0PhJ;\r/?l@+OL1]/+dJsI_7OR0,I+"uWr"PkrTjX3:YXt^E(r`OFSp!lV"q*XQg],<ILG7>^tZuFW!ni[5i
%CIn,[Qb+RQ)ZKW*<f5e:$[3$p*jXAm1[Z1G\r`P+f.;ck[8G^:@'D.fm[A*PfK?o,W)`sTc/c#No&HZJ,VirueC@j"]G8!]&5$0*
%(!5m4E&p0aq9#rKU9<D#fkl6[4o'0e)XBtCkcQq<[(D'b%/[s1)LegC&%cU.#5_3,CM[V4K\SEhWM$lCA.eTUf)T^N]oE+emEq]]
%i5e@/>si6rdQ2m!>pFIT+*H0Pk<k<kY.5D1Y$$_Pa$/@S.o\$m7\SnG#q#ucPU#3*5UUbM<o$=PM9.R^2\fQP22eF9j%N-gf2-UW
%JGEVt%6$CCm[Dl*UtmoX=!QLD5NT%f4H+a[mMZacrg^U?@Ra)5?*i(j=A[Ei4j\f7>WM%o.Q&]LlE3lb`hLu8>XL`Ne52,/bc%.6
%C8aT8^oL^p;JHPXMg!*=WDSI&M'&[]ZaDX?B]s->;PUlfrS#8cY"DFUok]7_@?5&s-a.Nr;PV6QMci50>cFD89`XWgrB[8Lo%B[6
%F8@+R%:*8,KD5\:)S8lA,>*qtep^StObM%jPa\Pi/M):d"O'-?n9WF0;j3'af8k+50^1`YVoJ.&r=MhbE75qs+7dne2i[D=]=Xtq
%hGWG!W?DJop&76>GB@gOgb`CNJ>Yli0>)4:`V[V;e;5/.28SW6=g"g[I/ch0e>2*7[=ofp]3Q&@)W@OoRJ(-^)SqOe3,(mp4#r0o
%g/B6O1c1KYV`Zh'*]e0!:Wu`^gb]/XcZs8!_IbQp)FA<lHPYX5=ACh7m`&2L[f*SA7[3G,K9Gr&4fqltW#+2a%Yi#"Cd2'=(nj;m
%G5KCepZ17fp=Oh?mF\k>/3#bj_I;PE(D%:E:j9>`G)7r\M3]u'G4<.+.kWo.E&t:3Glt$'J,OTp2,ZhCh%[75ciXQTI4uRsr8%Ke
%4:02&<X1!i4GcKK6@42kYM6A1/V<hJ^j*0MBg6,j$-NWKg`J>DKRQ8`ApiVfh/P3AK]U.Z:7(@GhT!%XG^>1l+0FoJ=1O\NrNI5:
%6@3^3Z^HL:,V1;i"b+I9Ed%t<G_?Af'K*5eAAM\Z.kZ&?=nH$Js"sH>2P#GHX5M,`,#c3r7-DnaU\nRn9dE@Cs(e6QDhpBpm`+P$
%n,%&)<e`"qa'!!Bj@fd`EK[E`mj2rqJOQQ3(oDcG+'!'#FLO0W>#ToGWM(4>,Np4KC7O)85G6M&N<YpI5HE:1NJ9NNa&6YsB!7t-
%6T#d;!#Vlg/DHDXptBnmrq_'tPYsk+)X"6k8LcSa$N-i#_f$jkVpmi9D+]ckLU'ekLKM1uo!NI+,rm*m8Z@OdPh4lORS17j'1p#h
%PO;MOTbrO3r2`d`1n%4e3e(82&R4-WWmmE\W#nrQW(%GN@rm)uWM(4>h>/0cWDVF,8r^\@&9Lld#T/Itj)L9NQVt0N[Mq),V1r_A
%e0=ZbV1r_A+9b6gk-j3pXOP/rV!mX8<2lQ0%2CcZV+)c\)Hq,[C*Mrf3mhE&&,dt8_Y3n)V+/^B(W#V9@AS]6YMm%j0r;nLmf"Z3
%L2&OJbRZ3]gh/F';Ia+[?)aM9LaDkK.5gfaiPk-a@>3prn4F-i&kl`c5GHY(<hWFL8!P"!+50)]\SBi_)@I$dV+/p+nMQk`C4r&\
%7UoJ6/6?GPPaZP0r5D&Y\j"C6<GEq:JT$!8WF://!Vp!n+&QdO7`-YA#F-4FN;?\R7_0W;-^>T2IE$0S-q_`^dt^h2gQUbl%E(8r
%0ATXbe:Vo!D]2fYYm)]XOA\GK"o.4mPo?[M@,T[VgY<PaRZs70KpYp@DfoEuf#H";WL>3\"#dKR0jqTtO3G&U"p+f,+^mp/"NerZ
%SWNH6mn`uO/*MK]4FIh)Y0OS6?;adK+RK&\,b1de,^,GF>1/S"hR/Z(ddkh\<IK%uclT'(I*]5uP:"=emb)\de1IFb^V77WRd&&N
%jrHh3:]Gm9-/muF:NPDNa5+;gp,>]eh_iIAopahuc$^BL68lT*Res6JD@b3Fj#$L9kXt6LT3Al$Qda`6c#J)OdbZhToS;2Mgmc=J
%&m;TQHcJ^sG><5:295):nGf'.giq"_;fhI&:35;Ma%]X4gh3(f]+2F]P"B,E1u\/QS)miYM1a1CmO.T7IjSr\T0N,]X%!jH6eMr.
%]`Y@JL6RN9rVN]mIX7gbDqP$\h(]p_GceZF`rEq0Ab]DuU#!fY*%(TY30V'@c;9VeSAfmnS8#[Hq=ioCrmS!W1`bnUIiN*kQRVrM
%kNUQt+`E>o&\#:\\fdCYkY$[]k5"^/4eQ&p^JQfA?9@qD7Lcb=m[Wp\A^h9loB2)OOS#;!p"#/to&$V_IXBaZc[:4Yo]Gd@h8't,
%\HX[L%0d&Uf::"N*Y*A6doM8,ec;<92MetT&Qi?.*3`Z`/>e%'\sEcBBMA`pmF;,dOdbtt:!<;/bp,+<'S=?aoIN"ji$n1Z='ltA
%Xish'.ke[UpuA;r^0Psj?^!SODnjVQpqob6G%:AQa1X_$DG8bB/#s$g]Gn1u]>BcHAGkW!IcoG)cZ]K05HshXp=^II?r/&rYHR5o
%Kg.=]p@E)XSH4A/STZC+r76i8J%`5`hA[9P[Xu6qV;&oDIu-g2V;*/rVSOBH?PL7FV@TT2/(6FaX\&,W!]^3mIWd$N0P*/df8J.u
%UiXuFM"u1,!I-L]C/$m@]g.nhhnh4]<SUmS7hDR;e#:-fWm;WRIue<Q%^s-3Bih@N=)I75)ZRZOUCBUgi3td_2`^I"IWAEMgW/pt
%1L^`&Woi=H=e=EWV];r:g#^?PO4mN<HTW@pDhDjIDL&O#:H]V9?//diSilfNIbXTqh]?m%EVjXgmFB%.'k;YLZf0--XCj`Kmb13\
%Qf%KWF?YZ@ehtV?YPkob:\nq!X6mtLf8HM+X+40!5=i/!XW6C<!<ihjVZ#lb:s1]9bd6?[+ru@'E9M1>mbHt9CCU\.a_9"jC"h7&
%9lTuAMoOK(\8Br$1M^8XbgU-"Lo$P!)b*jU*pkN+]j-)43u+f^HauSr/Q^$Y`3o:KF6\,O9/Gn#D(O;&5.L8pE;fWF[7o>k<?0>W
%T=,YJ_mgQ`n:G*q&V38m^Wh!J]J%"-]<OGO2q?TZ_%Inf46(?K:]OJTS84tMgNo0ulZ#)B8sX7RgKQ2S51f!d"iXtT:;=,Rm3R;Y
%oXsp7I\t*%9;?Jf^Z[g_SSLH':OBm0B"$a9bAX;ZhLdDn/"=g.XNdX`F0HnT[FNrRolXl[f$(KC\<b"c<mDYnhpG"3,k('+`[`,r
%Mm".gFGM$Sl)*Ig!&,b)k1n4<],MUuB>;^$n?ffmV,?"fG5$+Mjk!-\C2l[[%iqCiR*E[Qdu<P]Ctc/[E^q(U5p;`/Z/Fcu2*AWm
%I@>Ubs.e6%EQuM3M+BA7AKm;@eeF]S[\LOk:D2reEhM='Y4K=*7qqR9okF*ZF,GN\m:>A/&_T!)I,jSR"D)&M"R<Y+2(uGmZ>njK
%KjO2pWDPDeC4"]_jo>[ZAa!.;,FG6&95tGpB5rQ1\IEi[\j6.KMra=:Z33aYepCaZXm)>aFL(`UAE0!>h1aN3d:N4*T((Z\hAc2L
%0!r.!"GgirHfj.(`m.j@::<"?gKWLig#G@5,11qd(K$!*?"e+-G"UZ:8WK$uaB*N(\SAd%2!\D/P'c_*>;WG!^Zd:HnbC#uHi)@3
%f;G[-.u/Dr5^ccX'1U7M(Dq*)P:a1Go4F_$'2/(F+WslA=-M\KenYCB>6rcr']"&.J&.ML1Y2''oU4E_1bYN2T6D8)0XHTFm=FkD
%L*#tQ>T9o,kFR+lUp[Sn36\Q9k"fm@7QCuS='rIfg%qF1/TXj?&4O*#\EQ98\]PALNo$:C'q2e(H36dM>c2U%9tL,3gAB9Y9k3Uu
%FR;Zr-J2(iBC#6^GL``u\4($9l#IhhP0e/T1NY<VDS9Xqc8EIFk6nF?8T*/#=*+)1`D8N`/II$Zpql?s8%aO[m_%29r29PqG'']g
%af!9M_bB1c^:h;\ZLd2&lSfnaTY_NCC9G-V(^D.d4uL)[?U)7'pD`uCrq>=Ij%X8PQ)j?)2`Ae^q\jsq\k^M\&li\gZT"TB!f6MN
%p9WfRg92uAn(,PQQ7hN*qU+m$J^(1?:]D[U,akkaa)"H]GPHi]cF#kl^&E/7g`AJR5.$mXmm\q.][)Pif3`:M)RGL6T$miV\&L94
%mk5VJU?poP@D06YBVsD<5PobDYKSV8eL088G3Qi#e[^a\bKBY[H+H'2H-pLn>q%jR;g.#.[(JIXeLj7:/FDp"%Q`eHD&n*g]6KcN
%3.I>XH1PHTHo&Ba2>uLQQ@#E2gK#[o)f0Zk78t:bTm:hDM;%AF$:s#i/Qq5BgbC@BHT16R)@$p;7O]t8VH`'q1[[4\[0*<*S959;
%H94>c\6dL+[PI)k/e.#X2dW]Cd+`<J'>'Q'kmiWEK88Qbfo?:X.(2eio+%Og"+QXrEpX+&_S<`n[$A93phNMY*>Uq2f&1:cRMMfl
%\Z]jH2*MBper*[DY5ID5\)6,[T&Fe%Q%K[Yh-Fk25GQ-2&D!X<I&7@B"KBO]D_Haulp1I9mc5?T!IXZ^\36L,B3_:@HXc(Xn%U)#
%+Fd"2JAj5MWifMfg1o@tk?[D,N_-)G^#HTW%I;M)'e&(^qVNeYGKSm"8Tl,hjK3#tS[s8bDd4lRGc&HRiT\mj-:M=JMOT.#R=9WD
%jpKeh7D?Z9kRb&C*QK^Mc*PTGS1FQ)LUqK9[?63E'>mgRQ`&tdA]'2p]"F[_\U/C_V_m3&ICGP_N/+IUH#TG6*I7qM]+a#43]/t"
%KFXLFh3HO\i,lm]ZVHNDFT2&2:Q`?f;#DK3N1rS(;:Zcqlnm%+%^V`)#.l(#F/g0p`p,Bc>o;GK<SP7(mL[4Zg\c97.GR%$cD6dC
%9$]8fO.5<n-S!tpO>V=W[7&S!&d@s6GjE%\hPpu.+<BVn[Dm1bG!V[?f]1MK6ddlrnCP)$Xnhn;7dcg1GOY:IVjm?<HY_Z4;!Y9f
%]CW.RZZj(1%m&S3<sKW#N:'HL/:RZ?Y9'3FVl6*PG&2+'*?0^FmZ1+bJ22Scm!);XK8,mEV)p:Dpp7"doZo(rn&XK1G@grI.aN0S
%0?U%R\_^Mq2qbH4cg`o3QN&f(oT//eqnd@3N4Jf'B=Gh;?r;iX4bj5DW>@0GM<<L8G$6bqlagk$gd]PkZ#uDNmFfcNX&F=(d^F4-
%bI%5%$ks<&BfjqPGck>=#6;))]T&@VOdD%LOqRL@4F_G'RFCZ?FOh<mSE\VMPQs26bk(irL?BW;X>>1L)4dmXd'M$]fiEQJ:uF^4
%F[iLHf$]Wb46qisn`;1`LHOm]T"<nL4A4d%c8o`Z[<g3+cFfS;#<qIto9^WpXL!D!7+cE=lg35`#lESecMls^Yhs`W)<Ja(*>/!Q
%B:Vm$hY^uD`c"*-XEAL2_k)!o9+a;9=_II2S"Dn1XM`#*aKs0(3tH4T\?jHd!SoOl*q$*c%g=$LXL$ZEp-<8]h=HH,?TO:kOgKm+
%l`<b-*q$*c6GVfL["g[-X<hQkHe)?/P('XAc=eA)9)?BL3bp2/LHXt)Xe^I$=_E50Fr=:qpGfkq142riFcWVq"!_XLq6]1"[,&f`
%)7H+%O44R1QL1&PlW8/pNGdZqr':QdS8mnUI;eP@&`!J#I&)5"1\fkuZg"UXck]Y2'sb%V87#5EGKLh2>Wd4rP.Wh]IGOIU4,\F.
%FmaKNT=A]#R-T-=?sJiUDVh]Ps7u?9X,_c1p4LTa`ZO&imBes.^GU>b$CgF=%*f]e&)=!)REfH;WQ8td<b6+5FBO1"?JH_KYjG-7
%)4.67/`KQ<SLBhs%FPcYA6MIt3.8u#PKad(<-/3Yl\*Uuh/VHEq@:2]l/L_:_jcs.cF/HPSQQ7T?(AZE:$Hf'%l)u1PI]kr>U=g`
%D2N6.l=:M)?gSSC06mbb\Q^?JU?<qV+"!uE[>LfjI$!6gQ<mll4,X0ha87+<5i[^S3C%uK(,@]EmHU7_rUUM]1%"W[Jfi;Z+XbIQ
%SXCMI`]NUi^&@rGFK`ELS3"jJ)sIaA-Jc3e?^(#ek66X\g$pO8H(:_3ouI=Sh+<(hD9jMWSj$u4gp,O0SF_H8\#fo2c54`3G&VO%
%I&,V*)H(pSI6CNb`NQ^fc'gU?nGW.37/(TIRPjVPj1;#C]Z`B!IaU@"]CUpg-O'7e^1bb"^U2d@cTY<H(MBZFoOZL#5DlLg:L?dQ
%/i0PMP'PG@JNpeUfpg=,p>/d.+W%^*4T4c8iAp'0%0B[CaNlRG.;D"a>e!GX0$`ZQM.pUB-@+54CtGtMS7uV2AgmqnFpUF3S9mp`
%Xe&h$XR."9VBF?0$&c,GV3uC+fQ<+Le(L#TVMsbljnuKl_k;>c#3?R2qW`a"fU1E^-(qK1n[K_bk052qXhZ&Ss*JBFo+mj=Y?Z-/
%>[*b9Dg?G%H``]Ug?):WJX`aLE(;)YP0phai`;On)pU4A/60g1-/%3CVC0\.+0R`'-6[U8K(cBd^3ukU$>6d4f5Eij?2X:4i7(:X
%IldLimntHCR,sQ8.)8Q.KPk)le`m,35QC>irqCp?fDk].P`\^X&Y&5?=8d/L^VMjI5(1*=o$>fJ%6JsMFg,;Pk#:X]B96RG2%=-G
%cQENV:=InD1K%]Gc$HB^^(10/^3<,)?BZn;8.bbrEq]jBhEojZ;MLchS2tqpVloqel>R9nkDa;_==g6TKmYds^r;(h5dOA6)T?.m
%/?XB*PeA<7Q0eHTZlniQ.0.I<[77meVK>B%&&8,$PP[PcS[.[]NRrRLrd);b+nmV'hN4%n:6XC`,3J7XIsZgOl]7)b;hs+VeP&sm
%WI3umXqg[pQ>XR3Y*\b^r98N-0>jEb2rL^9l\;RoiD2B`]a92";)3s^@R(R$@TX2C)n&U#MX]@Wap'+K9quGg;R9c\N>h_\NJ:lZ
%Dqu\\#W;Zn>:,H?%'s@(iAY\@9H[c/bc4fshl9g8JV7T%9LtU"0d6;(BbB7HJu&4:<O<l_^20&d8=H_b2%+HN2_<^8U]nYN>*'Gu
%d'=d.Tp.4k%@VX;Q7qDEBu/(ro8p>XkNtCm=u>i14=#WL2tE';==N<&Pn`P<@KB)-C_k+h,RTX?A/$-tILCjA!Krbk7C*!E<2p`*
%Ka.J/`DR:g.g(nXe.ED"?7aLZbCsE##YE2#P#6nt.G%3(!l)uX).MeEZW&G@(6q4c;1^>Kjg%a8;H7ICo'2`C*@ed#/sVkd<-,TR
%[\1(1Z<]*Hq'm)T$s?V('mQI>X49hV>h<cA>,>&5k[^3\g8It#L1/[*9"b;#<AQ.KV.`hCq+@sp%94oXNCq/HC8Iq1WL:_/)2R!Y
%[8sDq890fY)I-?<X&uDiW+AtENN-9<8uX\KNG9o7LIO3Fj'(9?_8Ck-[qb^ge.u18;uld>JmC%\8i<R9HDsrE=iGEp$t[X!lTh^]
%/!d8_Xk'G99@\@%euVkENI%?pr4Z@JS?Fl&?DCc1of?&s\S7OUYf\HBkk/sZ?`Db5HF7(\l?9EBdAqQ)>ds%,.^?;H$7*'\[U$4*
%*c%WigSSi;$?jl&!N9!`8rIktAqL5O+IV(76KD>+C6WSp$eS;B7a5g/N-_m?6ZlRT#X1iAZY$`N:e<ppbX1DlXOQu-pgpI)9U/2N
%_a!RQMEH)\3o=KULdh02LHg#YOI[SGI;s<_T.1U,cp\I(e40o#F>])r_CX8bqO94@YbQFYpRkd[9(3.I+Q_8V*_d%g,Q3J/?SGt]
%1hY"A+&CnsY2^np1r_o+\//Whb9\)Sc6ooYHgM#@6o-7>hiE-^V9m^i*;-)hPJs3u1@[c@Jd1]S6FeCc'.oHsGSL$oDr&>K:Eb[>
%]Fu='hWGTFU),50L@F,%#!]po:9]`Jj!;<aL@GGe@>kuDh9cVkVniU7U8Rc__8BnFMAIu-M_k,gSq`EHYr%cc;ioHRIYk1t*6q_j
%LbZ=mJ.4VKCb]/?1:Zr^D[(0`M*j-/"U'-214_e/&Q2d\o+:>H$s@%+Mu0c2,ImbA_:DWjRiCLiL1e^Ue5:<;W78*+nDt>$U&4mC
%O,qeW3F&_Pk7p#&/>4IB#XMFP0cNN0JX_Xm,XQ0tp$k_+P='_c+$k]S1:l6o-qFcde.H&pIk2.2R\:;X%uYZH-"8X*@8ILA%"e`f
%,U++D2%HUAHl/H&o)Y85+F(gL5N3Lc@Mtueb,g7?]RN>'M@5<(3Jg4+OFe%qbJg.>3C97ti<qC$5D#%2U7@8UnHk"?5mB'6&E//B
%KS0oWCLqWb'j8J2aSBc^94CC.8fms>KG&oJ=b?:9%+tqB$^V,j87bVLiLlS!j-/%;q$\H@W]is9J/H-F7"q?[`Z\-,8.7,p0`mCU
%iWs8"Lt$N+m9:,l7BB6T=BpZ`a:7\OU'iM\NaW*H9FS<nj@KW>il>T\#J&5cN3?$:pXjmrOaGD3/6*'2_O0FqW+grd%EBsF$?-1A
%jj<(ZDjKEg_?-PDr$k'c?QB._Jg0O$a<-E;78grY4dnbo09?O-BVi3r#*f7335cFZ^)5*>lk_NCTHN,+*t:KQ7'ZhJ,)0'O@8pDB
%&nu)'6JK@#7[]B!j:mK5<9Ok2@3S0K/V2TsNKnIT;W,LsmK!Yl)GfE6[X>AZ-ITgh&*.$sq*Bbb"6-"7;%:k<N,Qnm+F]RJ@6aDS
%M-3:LiH-=Y=pcYdP3X7=(g8hh6Z0.o@\>=VY=6rI8VD\o*%LX&<H67GbJslMOqSkGA&J:p,.N6BP*6-k\noDeY6gkP.M!`J"$%qU
%]bLA_$@mZLDTt^IXf,?t]gi(*Bq#YT"dX^O#r&)=AWDRh)"Q`RdRAnO:GALU<FSc*XA^bb.ErFh<F(nRDE-iV4O=:!:gdU!MMMs!
%rkq#LNq0lB(d%6%<(?aC[2bZHBa1rdGSVNV),_0k&dot0c;:9Li+Ro1,sm7TMT5;2MQ`q"3>"jB$;O?^UC&>])%?eTm#r\1P"0g%
%9`RjK=:&'j;;$^=#`L^fNWCQ;G;0TYPoYf*Sbc(eS/)U[$H66mWX^'.&.Xc&%NB-;LJ*/aMsF%5(iU4b)2pT"7.?up!C0RGSgXQ(
%%=h)6;THKf,cn16&bY[15E@#1!1%8UZ(Q\<E!#pGqKC9VmV,qE.$E4L%5!3Z07;NfGQcZtkbjNPp@M`5ITH/pRt1#jdpb)1qNs"9
%RXhgqqLYTpKJN("\PO1_hUn.]A5@m/OmfdbbGn?piPa\!AuEY!NNG_Lo*VWroVm+pT-$HW6TY:R$'7YCCG:L-N,'h43jQOFM.M#F
%Da5rs#FT"F(5YF1AgC)=&K_rj%m_=K%D'qpT2/<!4hL0TjQBM/bCqX:MX:$q3&\Rm+bE0k:C'BSoE(g'2-8E4UI6G/<oOaR+,)VE
%KOg-M&ljiKnL@RZ%(MpC8rP8p7&1\(0OOEuI@EbC$&6_o7"k:gLPYCI5/Z-B2?PA03V^m-_<H.L"I^Phc`6)5`p#5Z7U_Ye,-hWO
%8l:c%4:o]q8RiYli<Gl8n_o$hphY$Wq?H76#mn]VJpe-o5S-F"J;Tj<$h]97Ne.Q#)NG+oVH8MV^Q]##8j9<b9P&N(lZF#tD&!-$
%9YZL<5QH%nJXAtaJ/a&^$HDIi6Wb6<H#Z0./#JC8:P9(ficR@[2B6fc@2nKtF0uo8/e<1Uq?a<^**"W<,pe/#.WQ)RdkLDpT(,*4
%-pg2<&1I(rC1ghC_is'm<^j%W*%9bJ'\7[D6")%58qo#IBY5*(S4F-N/mPY2.?Y'bUh'P6!*_u8SE+W"mAMTc;0@hYZ7(ZakJ:fI
%/UmtIJ"XZ7(pHb`+W(-kl6LK_T`fb]GhaAXiSma52&.f^<cDGt6%5C*.b2U&E1tW*L&(eD[*f'lPaG(-.-EF+J0BWtJs&*DJ2JTd
%=K?HKhti/q#Dq"7+4m\ap^eO0q_Y5R;"?eN&I86>'S/#/6r:4a`e>N]nco;)5\-^ETQ%!6&L\-Jp_7Fu)]PekRSRB<q$#eKP3DX?
%d;XI5ieYHmFG,$F'^`-"9T3+>-!jD_4>^U+L*e9GCf'7K,7/f][ZsgFJt+s.,BYRg%YhFgRgP5).ln@5WNg.d\^EFn.)sVqJu;@?
%0:M#!Ri7_brp@K$Nog1k8tUf1aY87rm$Z60/0*RK]E]RUT0C(1:kL"U(')Q>m_L8Y/0gYd(_"30)p\MO'd//7S(3;U8]gU!8LLfN
%ehf'0Q)6Cp2iKPLhK3ZkU5l!Ts0UK9dkAie)99amBBf=N:2Xg`X>2-!:iF\,$N[((F-XN@TCo=c=IAgT1Qn1K`Vpoq"tOF&#I/Hj
%6FNS!Z-eKmqR!gb-s2=A3'*.+OOe_sr(o?Z@!5V-qg87PN-kG@)NWk@q(R>H&CA%J'/K\+@AtRf;l!cV67=\5Yt:QS,`@M9+rZ0\
%bR(R'8HQ[q608;96gPY]>ld!o.<$h-Tf,M&1l;EF@>5Ap%S)*n@?Sqq`sG-`T`]!sToM)JSAJ1B?im]r,98F".UNZL9&XkD#\=,*
%VGg]Rl%+)!![qQ,MeJXr\/s?G+jna[1kg7L'DJ2/U^i?X,Vt#b>e"=IA?tG$<6XF9G+?L/-`KP=(7BUu61A0G3"E8,*`)/HliRDV
%N1\eQU`p<Sd\D0*b,V^]UK-1=Qi/F<,TKi_dZ?/aor%;p1Gp%N_>$tu&bNep#Q#2<kfo5Z^m^3M]2oC@ps)#(-ltUEgBN2KTl^#<
%lPGr_q3'__hZjQa`\9&<nq`8IJIdsa71c#&HR:YhB0F9tNiW9ZRe\a5I&Dl@7J/G7?ADRV(ba'0BjbUG*gYiZ[rngV^OV)*nA9G6
%U'Fco_RU!POSC^`#%:5$7]:pT26%jZV<@?]L83)9*FNb<;F]sPfE(*Hmh1-NN)%GBLr$IdS&2n)E)_m-al_.S7Ps'1W#,rf]`]ft
%"&Ef;pegiuR*[K4UjrYDZOLRV'bP]mSr3`S"PAYQ+>I!tJrITg?rI4'8Y/XIbWnK$`oMg2)sKinfr(]n_I>0]ih8')iFi:Hi]*fc
%It3e,(C1Pk!/+5YbC[$3#0!hQ$>a7gAsF7B=&kY3NCcHhnf#"Y9ULHcJK?'?OehV=_Bp'?*:0/,dfJ790NmV_oPtSF1;d"A<TSbX
%)\]XH!`=[b-a7#;!5ad%5jCY&rVf@&a<OhZ-AdEuLdXXR^]IVs#;?gKKXer+hok^Ji45P$Xq/eIEG9hH.On\V$_S1Q6d+J.>\+PR
%MH%DFL3PrX8,Zg/+MSQ^Ze9'#L*U`d'<4jiU*>m\$+&:IoD'8Sb^^=-O=^^IR&%iT5X,T%3>FXh=U57t5t)-S=BncN`"^DR)91s^
%@m]s\M$ZNVl/Zic_7'b8EU8'p/Vn'9qQ)*dM%%`H#,s#PL%*Hq^l*YlWI`lI-j]kcN\??$XXI/0Z.'1l@4F0rp+RE40H4JU&U<.p
%#eYiN'r`=.PTVMB*[G"-W2@@/(@sCjLk@Akj%DMD5CRh[R+Vk8@d)XC&ec,SK4,gW$Xt6KP^Gb]oOQ<1Mdi3_6BhAF^kjgg:dYD#
%'>UH$U#7%.re0+V+N"A2JB&Mq@ZXUpC_@MR5%6?>i3u,mYu_5D(CT#:,Xtqfk77uRlPpYTEV(JmR-0054MEP2o?]o:!5h=C$I,,.
%h\9<s88uff5@R&r.t[^E,0+Jb6,2u\O6G=@[BR$cFJ1A-`&E%<BciXeL6ha3<T(ZT"U@@nWE7+ge-U,r1;I*H#&(qJ$urg\OnJ&X
%YW.e,mU=T^AqiWSk_lF/:),r0?&4cFc<!"po*b\>-W,ite?!#S"q+(p>)=J1,/@.t,_LsE_&*Ar:BVjs-O[(K#qRMV(b0u$Pa[kF
%$`YC1D($*oeppgQ0Mt;>M6$>D648_88NP'jJ[-LQ[\(-ee;n#TL%r]KK?k.&pQH0h!*G5L_N)G<;3iR7nBA/%/S8s/*+LjhQ_kmD
%i/T033Eun8&qY_umC?g=.g:<nMg.uaNh\(S#SEIA>?7B5c\kpgCZ4I(nQ%E2e:pLd,'nDhU")M6R8t$,<dhVjEJ(fo+37&GFP^M%
%CkLbW7)hL0:a'do:hoeuKJhb[3khl&7g>"jj:gkqn;S+2k2XE\*ah>(UHMp/DNHgh8tmAuEWj?Y3(;7lKTWg@+V40D)b,B^e>I7o
%UkpS"8sUP!@p+VdBHSiRPJ0G!4:`3;HH&/b-1#Ec-3o(gnH4D+jsAShd3E<R8H;$*fI.)a8O3Xm.fmYfD,&t[<m;'-4lmD@NT7q*
%PGr6$?B:-uNs):&Y_nhXW"+[*%[LX6":8\.6%)*D+-Lsl7mm390,3^3HfOWaI\>=LZVJ.u4LuWl(kLQgk`a[WkX5.`r'Ki'qKQ-W
%!QH^m<V?kUB<_MA,FHW.a`sHZM@Te7*PL+5Vf;Qs[%T1lpFlUU#KF$=BE/\.e3R>dB&]*33REg(00[@/`s<1WW8JYe4ND])32:a-
%=&`1/SAie;iNOF.Q0cS%AKqbjR_]0"5FgD4`5Boqje;WM+>X9[nu+cZ<:O\kr5A:5<!h*YQr51O*Ad>3X#tGWE>lpK:2;rfR=Ui#
%i'u$&"EC5=INAR@YGAG1&:,&X5ms?:@o.tq^g"L%$Ld#MkQ%3HM+lQ8&ms/YDW^$-o&JTsm?tk(hU^;eZ;3.m".]bs%Ud:0Eu%5:
%2!ksATF@bFK"H_+V$%Gn)O,RO@:!G1Tb7_0_<-WpqkjO[TI"4H"sZ)ekfZr3ctg^)$EpC9W=(2#m=d.?0?O!L"EGBWddQp]B?>be
%_sr@MllAZV5>'-GL\jn'f<jQ'GY6)G3ru57@78$Ze%Ca6F$$hsFY;kl4u3$[Yms\.61U@rE$,eIO=#bZi^_X5Zbb*Ud.MaATZ_."
%!(&"V#>T!jFDO**E^[s>,_@A)WIPY_iM.NU*DDQg#1*JT3.op;T*/aO=;H^=TX5M6^dsSm(kUA0m.bF:LHt[Z;V/Da+p9Y,(6%Z`
%U$c#!7gfUb9>n^S`eBNXgD\u.4!<e=7rX[spcHdJXFu75L5mTP//c-D>Y3'1mNq-UPMr2s4qn$gZE_+(`[:i'6l;7XL3JB&JX/p,
%q?427Q7X?:7>l6>?k_%("U*7E'o0GWU0@U>&gX?Nof.fAM\\Q))ZbRg'*2HrXq=Wa#H4B2/q_4S;TVI[Da;hUYGU_uOlgQ!Q]4Vc
%3!7kAFK33r+:gNC^j,OK#a;@M]jmsTmeA&Pj>7Gf!/&`t%QXA2_d_Oq"06j-BNt-U:I^+TmRZEp`JVb6n@]6ak[FD%,bjK>6UihB
%AqiT_E'OI2kc^E`]c>8853bhbb[$I]]L&tY/bpYR86Tg8^6q\L#9$Fn\-H+N5i.kj(B@&#.3c$*m\GP*K5`1!=B_Oo&1^_FJHc37
%Q@e,SbQLcKCbGg)A2lu1o'tMkPu$!6O?"Q#l7@#0.$-k"hE:A;?`g-$e#C7JmY5A[RXe*#l_tlWpIt9FP6lV_Hh$'@j5\\_^QSYm
%PfiCNI/<E[<f!0dOi5e22fC>*^Ua.9k2U6$-T+JuV[fp.C@UKX.fMBh<VWE'B"khA#P@HW"5b[Cpi+7tJc3>c@IX6TJc5$=mmHQH
%'asn_"TJt#AM\+)<Ys"]R&(bT_X3.b7,*7s8aSs<3Oj".k3pp%c4Z'XDI(^BABc_Jh2kAAh4ROB>!]pESb95B(!Bangtd^eYV$F!
%^b-\_J\T:&q4LtrL=+*c\aAI;gip'ch#AQg`kugrYd.gjho1j"eA[gpf#:oFlk_\3+-sf:0jEq+9/iZ)5:<Cf4YQ$N\>q_?F*XgL
%/X3l9cO9#KcO9'e"Ken8A$Gm(%(>hb=TiHF*&Wo*<fE'C/nNXpQS7K8V0#5>2hUi]@XaWZI&5n/FE6"@lt!@WVT7`!M"bNPT%;@d
%1C6<R.!N.p(Y6Q74'mi_Y%[QAn=Cu]:GW9iWbq0K*.!0A/9\sJn^nlPhFp,7"k.)3d##lpc(c6/`F:o8Mo2]2pL`o'NL1K6<nV.(
%U)nqn==8_AnN7#fUYVEULUCLC$l2NGE-3u#L356'Nn7aE/)'s0rI5K5jt5`>>E#!+9US,id)0$?s$-:3UrnWqoeR:GWuFM7,3[^#
%\S.;M7AZN`%'i!<dp_,X2He_--id$K6&2o*]%qCFo48gJDHdG8#\ka`l;tH0mI:RqTcldH;bZOa]Y8jkjl4O317n%4lc$VEV_1/^
%r,d""F8ZstV-\Y^rX+X0Sbi3'Vgjd>P,OXR@\U-VoW/!.8FQ\Z~>
%AI9_PrivateDataEnd

%%EndDocument
 @endspecial 191 x Fo(Fig)o(.)16 b(S1.)33 b Fn(Reacti)n(vity)20
b(results)e(from)e(CE)g(analysis)h(and)g(illumina-based)j(sequencing)
-152 3424 y(e)o(xperiments,)40 b(o)o(v)o(er)32 b(38)f(data)h(sets.)38
b(The)31 b(heatmap)i(presents)f(results)g(from)f(tw)o(o)-152
3507 y(methods)17 b(alternatingly)j(from)15 b(left)i(to)f(right;)i(CE)d
(analysis)i(results)g(are)f(presented)i(on)-152 3590
y(odd)i(numbered)g(x-positions)h(and)f(MySeq)g(results)g(are)g(sho)n
(wn)f(on)h(e)n(v)o(en)g(numbered)-152 3673 y(x-positions.)p
Black -152 3953 a Fm(S1)84 b(ADDITIONAL)22 b(DET)-7 b(AILS)23
b(AND)g(RESUL)-7 b(TS)-152 4078 y Fl(S1.1)103 b(Recti\002cation)19
b(step)i(in)g(the)f(pr)o(eparation)f(of)h(r)o(efer)o(ence)81
4177 y(band)h(location)-152 4293 y Fk(As)35 b(discussed)i(in)e(Section)
g(3.1,)44 b(the)35 b(reference)h(band)h(locations)f(were)-152
4385 y(prepared)c(by)e(manual)h(annotation)g(follo)n(wed)g(by)f(the)h
(recti\002cation)e(step)-152 4476 y(where)24 b(possible)f(human)h
(errors)f(are)g(disco)o(v)o(ered)h(and)g(corrected)f(through)-152
4567 y(a)j(comparison)i(between)e(tw)o(o)g(separate)h(e)o(xperiments.)j
(One)c(e)o(xample)h(of)-152 4659 y(such)35 b(process)g(is)f(well)g
(illustrated)g(by)h(Figure)f(S1.)41 b(V)l(isual)34 b(inspection)-152
4750 y(suggests)g(that)e(in)h(the)g(rectangular)g(re)o(gion,)40
b(CE)32 b(analysis)h(and)g(MySeq)-152 4841 y(consistently)47
b(sho)n(w)g(the)f(highest)h(intensity)f(at)g(residue)h(41)f(and)h(39)
-152 4933 y(respecti)n(v)o(ely)-5 b(.)47 b(This)36 b(discrepanc)o(y)i
(ga)o(v)o(e)f(us)g(an)g(inkling)g(of)g(inaccurate)-152
5024 y(determination)19 b(of)f(band)h(locations)g(around)g(the)g
(corresponding)h(sequence)-152 5115 y(position,)f(leading)h(to)f
(recti\002cation)g(of)f(such)i(errors.)p Black -152 5284
2018 5 v -152 5336 a Fj(\003)-116 5359 y Fn(to)e(whom)e(correspondence)
21 b(should)c(be)h(addressed)p Black Black Black Black
2015 2671 a @beginspecial 0 @llx 0 @lly 473 @urx 268
@ury 2420 @rwi @setspecial
%%BeginDocument: ../figures/supp_old_new_comparison.eps
%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Korean
%%Title: supp_old_new_comparison.eps
%%Creator: Adobe Illustrator(R) 16.0
%%For: y2smile
%%CreationDate: 11/12/2014
%%BoundingBox: 0 0 473 268
%%HiResBoundingBox: 0 0 472.1661 267.9170
%%CropBox: 0 0 472.1661 267.9170
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 16.0.0
%AI9_PrintingDataBegin
%ADO_BuildNumber: Adobe Illustrator(R) 16.0.0 x682 R agm 4.6676 ct 5.2591
%ADO_ContainsXMP: MainFirst
%AI7_Thumbnail: 128 76 8
%%BeginData: 5181 Hex Bytes

%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FDFCFFFDFCFFFD98FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8
%A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FF
%A8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A1FD04A8FFA8A8A8
%FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8A8FFFD04A8FD62FFCFCAFD1BFFA8FD
%1CFFA8FD62FFA8A8FD7EFFA8FD1CFFA8FD1CFFCFCAFD44FFA8A8FD1CFFAF
%FD1BFFCAFD45FFA8FD1AFFA8FFA8FD45FFA8FD1DFFA8FD18FF52FD49FFCF
%FD1BFFA8FD15FFA8A884A8A8A8FFA8FD78FF527D7D7DFD04FFA8FD61FFA8
%FD0FFFA8A8FD04FFFD047DFFFFFFA8FD62FFA8A8FD0EFFA82752FFFFFFA8
%FFA8FD4AFFCFCAFD1BFFA8FD0FFFA87D7DA8FD09FFA8FD1DFFCFFD27FFCA
%FD1CFFA8A8FD0EFFA87D7DFD0BFFAFFD1BFFCAFD28FFCACAFD1BFFA8FD0F
%FFA8527DFD0AFFA8FD45FFA8FD1CFFA8A8FD0EFFA87DA8FD27FFCFFD45FF
%A8FD0FFFA8527DA8FD09FFA8FD1CFFC9CAFD44FFA8AFFD0EFF7DFFA8FD27
%FFC9FD45FFA8FD0EFFA852527DA8FD09FFA8FD62FFA8A8FD0EFFA8A8A8FD
%50FFCFCAFD1BFFA8FD10FFA8FD0BFFA8FD1CFFCFCAFD27FFCAFD1CFFA8A8
%FD0EFF527D52FD0BFFAFFD1BFFA1CFFD27FFCACAFD1BFFA8FD0FFFA8527D
%A8FD06FFA8A8FFA8FD1CFFCAA8FD27FFA1CFFD1CFFA8FD0EFFA85252FD06
%FFA852A8FD64FFA8FD0FFFA8527DA8FFFF7DA87D7D7DA8FFA8FD15FFA8FF
%A8FFA8FFFFA8A8FFA8FFA8FD1DFFA8FFA8FFA8FFA8FFA8FFA8FFA8FD26FF
%A87DA8FFFFFF527D7D7DFD46FFA8FFFFFFA8FFFFFFA8FD17FFA8FD0FFFA8
%7DA8FFFFFFFD047DFFFFFFA8FD62FFA8A8FD0EFFA87D7DFFFFFFA8FFA8FD
%67FFA8FD0FFFA8277DFD0AFFA8FD0FFFA8FFA9FFA8FFA9FFA8FFA9FFA8FF
%A8FFA8FFA9FFA8FFA9FFA8FFA9FFA9FD0BFFA8FFA9FFA8FFA9FFA8FFA9FF
%A8FFA8FFA8FFA9FFA8FFA9FFA8FFA9FFA8FD0EFFA8A8FD0EFFA87D52FD0B
%FFA8FD0DFFA9FD45FFA9FD0DFFA8FD0FFFA8527DFD0AFFA8FD0DFFA8FD1D
%FFA8FD0BFFA8FD1BFFA9FD0EFFA8A8FD0EFFA87D7DFD5FFFA9FD0DFFA8FD
%0FFFA87D527DFD09FFA8FD0DFFA9FD1DFFA9FD0BFFA9FD2AFFA8AFFD0EFF
%A87D7DFD19FFA9FD29FFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFF
%CFFFCAFFCFFFCAFFA9FD0DFFA8FD0EFFA87D527DFD0AFFA8FD0DFFA9FD1D
%FFA8FD0BFFA8FFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCAFFCA
%FFCAFFA8FD0EFFA8A8FD0EFF527D7DFD19FFA9FD53FFA8FD10FFA8FD0BFF
%A8FD0EFFCACAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCAFFCACFCA
%FFCACFA8FD0BFFA8FD1BFFA9FD0EFFA8A8FD10FFA8FD0BFFA8FD0DFFAFFD
%45FFA9FD0DFFA8FD0FFFA8527DA8FD09FFA8FD0DFFA8FD1DFFA8FD0BFFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FD0F
%FFA8FD0EFFA87D7DFD08FFA8A8FD63FFA8FD0FFFA8277DA8FFFFFFA8A8AF
%A87DA8A8FD0DFFA9A9A9FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9
%FFA8FFA9FFA8FFA9FD37FFAFFD0EFFA87D52FFFFFF52A852A8FD12FFA9FF
%FFFFA9FFFFFFA9FFFFFFA9FFFFFFA9FFFFFFA9FFFFFFA9FFFFFFA9FD37FF
%A8FD10FF527DFFFFFF7D527D52FFFFFFA8FD45FFA8FD1CFFA8A8FD0EFFA8
%7D7DFFFFFFA8FF7DFD67FFA8FD0FFFA8277DFD0AFFA8FD45FFA8FD1CFFA8
%A8FD0EFF522759FD0BFFA8FD61FFA8FD10FF527DFD0AFFA8FD1DFFA8FD44
%FFA8A8FD0EFF52527DFD27FFA8FD45FFA8FD10FFA8FD0BFFA8FD41FFA8FF
%FFFFA8FFFFFFA8FD18FFA8AFFD5EFFA8FFFFFFA8FFFFFFA8FD17FFA8FD1C
%FFA8FD62FFA8A8FD7EFFA8FD1CFFA8FD62FFA8A8FD1CFFA8FD1BFFA8FD45
%FFA8FD1CFFA8FD1DFFA8FD45FFA8FD7EFFA8FD1CFFA8FD63FFAFFD1CFFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A9A8FFA8A8A8
%FFA8A9A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FD1CFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FD32FFA8A8FD2AFFA8FD
%52FFA8767D7D7DA87D7D52A87DA87DA87D847D52A8FD19FF7DA8527D527D
%7D7D527DA87D7D7DFD47FF52A87D527DA852A827A8527D5252277D7DA8FD
%18FFA87DFF52527D52A852527D5252527DFD46FFA8A8FFFF7DA87D7D52A8
%7DA87DA87DA87D7DA8FD19FF7D7D7DA87D7D527D7DA8527D7DA8FD4DFF7D
%FD29FF7DA8FDFCFFFDFCFFFDFCFFFDB4FFFF
%%EndData

%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                               
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0

%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where
{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse
{ userdict /AI11_PDFMark5 /cleartomark load put
userdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}
{ userdict /AI11_PDFMark5 /pdfmark load put
userdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse
[/NamespacePush AI11_PDFMark5
[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5
[{ai_metadata_stream_123}
currentfile 0 (%  &&end XMP packet marker&&)
/SubFileDecode filter AI11_ReadMetadata_PDFMark5
<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.3-c011 66.145661, 2012/02/06-14:56:27        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS6 (Windows)</xmp:CreatorTool>
         <xmp:CreateDate>2014-11-12T16:18:28+09:00</xmp:CreateDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>148</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAlAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUrs47&#xA;27SWZr6eH9/PGsaLb8QsUzxrTlG7dF7nFVf9H3f/AFc7n/gbb/qjirv0fd/9XO5/4G2/6o4q79H3&#xA;f/Vzuf8Agbb/AKo4q79H3f8A1c7n/gbb/qjirv0fd/8AVzuf+Btv+qOKu/R93/1c7n/gbb/qjiq0&#xA;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&#xA;/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>210.001652</stDim:w>
            <stDim:h>297.000132</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Helvetica</stFnt:fontName>
                  <stFnt:fontFamily>Helvetica</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>Open Type</stFnt:fontType>
                  <stFnt:versionString>001.006</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Helvetica.otf</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xmpTPg:Fonts>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>기본 견본 그룹</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>
%  &&end XMP packet marker&&
[{ai_metadata_stream_123}
<</Type /Metadata /Subtype /XML>>
/PUT AI11_PDFMark5
[/Document
1 dict begin /Metadata {ai_metadata_stream_123} def
currentdict end /BDC AI11_PDFMark5

%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -267.917 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 267.917 li
472.166 267.917 li
472.166 0 li
cp
clp
gsave
0 267.917 mo
472.166 267.917 li
472.166 0 li
0 0 li
0 267.917 li
cp
clp
0 0 mo
0 268 li
472.25 268 li
472.25 0 li
0 0 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
grestore
61.4165 226.75 mo
61.4165 20.0835 li
427.334 20.0835 li
427.334 226.75 li
61.4165 226.75 li
cp
false sop
0 0 0 0 cmyk
ef
.5 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
61.4165 226.75 mo
61.4165 20.0835 li
427.334 20.0835 li
427.334 226.75 li
61.4165 226.75 li
@
168.083 20.0835 mo
168.083 23.667 li
168.083 226.75 mo
168.083 223.084 li
61.4165 226.75 mo
61.4165 20.0835 li
61.4165 226.75 mo
427.334 226.75 li
61.4165 226.75 mo
61.4165 20.0835 li
427.334 226.75 mo
427.334 20.0835 li
61.4165 226.75 mo
427.334 226.75 li
61.4165 20.0835 mo
427.334 20.0835 li
0 0 0 1 cmyk
@
%ADOBeginSubsetFont: Helvetica Initial
%ADOt1write: (1.0.24)
13 dict dup begin
/FontType 1 def
/FontName /Helvetica def
/FontInfo 7 dict dup begin
/Notice (Copyright (c) 1985, 1987, 1989, 1990 Adobe Systems Incorporated.  All rights reserved.Helvetica is a trademark of Linotype AG and/or its subsidiaries.) def
/Weight (Medium) def
/ItalicAngle 0 def
/FSType 0 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 80 /P put
dup 100 /d put
dup 101 /e put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
def
/UniqueID 28352 def
/FontBBox {-166 -225 1000 931} def
end
systemdict begin
dup /Private
11 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-19 -0 718 737 523 538 688 703] def
/OtherBlues [270 281 405 409 -220 -207] def
/BlueScale 0.043792 def
/StdHW [76] def
/StdVW [88] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
8 dict dup begin
/P <1C60D8A8C9B64EDF881FD1B4CC946498DA3C19C25C4B8520933678924FDE
4A210BE068A66633EA9CF0A18FC1E10710CF47869E1E8874BE0332D5C37713DD
48920646AEDE175969913994AE21EF> |-
/d <1C60D8A8C9B7EF32A0BAF021E6128CBCFC037CEC30B1AE5F130A02A684E9
9A341CD228A3B00C0F0947DAE3EE2F0115F2F1C7AD297D397118CDDC6B8C30C4
F280EA7E4B984FC742154737AF60110634B578DD08B328C83C16534FC3A66AC2
B8949B5365E4D401A937B0BDA9D51F9A95F862666542DE04428C6BCD0CD755F0
8136868EEAAE759CFBA86A9449780C8E59190C25DA649E> |-
/e <1C60D8A8C9B7EF32A0BAF02E48E9B39AD7C7181F03C1667A89DB68F4C202
1D90AF24B2D47013ACA99B4B2D769B990015FB6EFC7E8ADB53D7F0A72F6495AC
A0439C9D372491632296F74356FA6400495EC05ABB9CD13EFC8E45D6906A6BCD
BE0AEF5EFFBE2AA37FCCB9B9808CE70A23B0C257679B730911C6BE9556BB5553
A431EECECF30F5581F5F0240E470E520EB9771> |-
/o <1C60D8A8C9B7EF32A1EB0E906A9534468E05CEB1010836670827B7F6AFA2
CC00AD8F9832B5E57EC7BD21A33599CE96350BC4CAB33AA09D5134F6F8CF8089
D97FF4A8EED59E93E5BC94B6181F6AD989C60A6089DE02A32BD22539CE> |-
/p <1C60D8A8C9B7EF3227BF5E70012990F6AD75C7FC3152235C08E51F0E890C
E0CBD856A1BA3830CC955CB85F22E6341C345F07E05EA0368412D92660FD567D
EB92C9E8FDD81DACAADD1422381027E2B5A85BACCD7017AF3886EC62BD93A89C
30911AF489073ECA3DF44D377924D15B8547A2846FB0280E3F49A45EDA729B82
36> |-
/r <1C60D8A8C9B81F2C46C810F818CC6D7FA9350962F8DF74B0F191B25EF39D
AC43ECC82A5155465999170893BB853FBDB2F1E5E6657B1704EB4EA080223F79
E5CD0E9024AC9DE64C> |-
/s <1C60D8A8C9B7A73D329D14FC63C56EEDE3F9A78253B2DBB69AF677CDBDD1
1160289884D4DD9C5BA98196E91F13BADC9EA1FFD8D81D0FF8A895E14109578E
AE707C718F18B2FFF2D3889404590171D0D60AD099D0C33148CAAE5C0C1BDC99
87B32BC4D29C6F3CD338BD28A10AE13DF8A67F8EF98F4C78FDB1840183A583EF
7425DFC082B11B17BAF27735DD90DAD7C2C2F113B8FAEA052E0585F221DA84> |-
/.notdef <1C60D8A8C9B854D00D> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/KQJCJQ+Helvetica /Helvetica findfont ct_VMDictPut
/KQJCJQ+Helvetica*1 
[80{/.notdef}rp /P 19{/.notdef}rp /d /e 9{/.notdef}rp /o /p 
/.notdef /r /s 140{/.notdef}rp]
KQJCJQ+Helvetica nf
KQJCJQ+Helvetica*1 [15 0 0 -15 0 0 ]msf
136 243.492 mo
(Proposed)
[10.0049 4.99512 8.33984 8.33984 8.33984 7.5 8.33984 0 ]xsh
320.584 20.0835 mo
320.584 23.667 li
320.584 226.75 mo
320.584 223.084 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
KQJCJQ+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/O <1C60D8A8C9B6FF867A21BA19EF0C570BB6C4AEDB905D3E548C322F786DA7
0CDAEFE3DEF4849E1D1588C3A22DCFB11573EC9A318A3B019A45D0FC4FCEE76B
AD39BBA1E526700FB4A11015D71862856C2D89337A110F371091E0B563CCFD9E
35D4> |-
/a <1C60D8A8C9B7EF32A0B922DB529D70E6EA403D8A84C07D516EB0CA87D255
60EFFD4826B71D37804D7EEDDA6CA7DDB4D88588D1C754E325695CD9034EF18B
1C52ECD8C1AD064BA9FFA9DFCFDBD81A1A1F510247425188B2B0EB19E88EFB62
DF3A67CAB8A09AB20F85EFCEB4E710F5C31422D7D067E77229A96AC4E6570C30
AE029BF39543CE2D3F73268F54943B3DDE6DFC6D1FE843243F344FA30A7F9A6F
2F64561C1AD88F00A1B3814F2AAD3466C6710D7602AE81367BFDEA024A44D26A
B58BC3F7C6266EABC0BB04> |-
/g <1C60D8A8C9B7EF3227AC78F20225D02AD1F5838626D1D2CB26D9A686345F
DBA7E6AD7CBBFB0968E5439577010C655F74DB6EC4A53F96DD554986565E4345
C3B0DB42345596269AD0BEDF0DE0FF0CEC2214730A572502B5B1C377714234C3
B835458280E4747C6986CC3BB5E2EE9A72968F97F16095F2CF05B047E21023D0
AFA6E35E503A84FE4F2FAB4F0F4C9E12738FA69B930E049550798D7E9E63EE8C
76ACEF8B8A3006630AA6153916CAF49A5335CCDE8F> |-
/i <1C60D8A8C9B88C080EC3D3AD3617BE24B7ADFB69EC85A7611E0BE9B62BA6
C48FF03869083107520E17B994822C2A> |-
/l <1C60D8A8C9B88C080EC3D3ACA1AA9447BE5E1701C51D0B115EA96EF55CA0
1BE9> |-
/n <1C60D8A8C9B7EF325730A29066B7F8CF87E66E4D5ED765FA285510C69871
F54E73D088410172FA6F7A994A736ACF795EE035A8B81FEF896BF101D6B101C3
C5B39857EAB9B93D07BE2F0E546CED9747F7DD1D14A8975B58A16E53DD404C4E
661DB62A0BCF442FCFD9> |-
systemdict /gcheck known {setglobal} if end {end} if
end
KQJCJQ+Helvetica /Encoding get
dup 79 /O put
dup 97 /a put
dup 103 /g put
dup 105 /i put
dup 108 /l put
dup 110 /n put
pop
%ADOEndSubsetFont
/KQJCJQ+Helvetica*1 
[79{/.notdef}rp /O /P 16{/.notdef}rp /a 2{/.notdef}rp /d /e 
/.notdef /g /.notdef /i 2{/.notdef}rp /l /.notdef /n 
/o /p /.notdef /r /s 140{/.notdef}rp]
KQJCJQ+Helvetica nf
KQJCJQ+Helvetica*1 [15 0 0 -15 0 0 ]msf
294.079 243.492 mo
(Original)
[11.6699 4.99512 3.33008 8.33984 3.3291 8.34082 8.33984 0 ]xsh
427.334 169.334 mo
423.666 169.334 li
61.4165 169.334 mo
65 169.334 li
427.334 209.917 mo
425.5 209.917 li
61.4165 209.917 mo
63.1665 209.917 li
427.334 199.667 mo
425.5 199.667 li
61.4165 199.667 mo
63.1665 199.667 li
427.334 192.417 mo
425.5 192.417 li
61.4165 192.417 mo
63.1665 192.417 li
427.334 186.834 mo
425.5 186.834 li
61.4165 186.834 mo
63.1665 186.834 li
427.334 182.167 mo
425.5 182.167 li
61.4165 182.167 mo
63.1665 182.167 li
427.334 178.334 mo
425.5 178.334 li
61.4165 178.334 mo
63.1665 178.334 li
427.334 174.917 mo
425.5 174.917 li
61.4165 174.917 mo
63.1665 174.917 li
427.334 172 mo
425.5 172 li
61.4165 172 mo
63.1665 172 li
427.334 169.334 mo
425.5 169.334 li
61.4165 169.334 mo
63.1665 169.334 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
KQJCJQ+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/minus <1C60D8A8C9B7F37489CF70BD6DA577A0101CCD591A60AB52AAD593ED
DED9> |-
/zero <1C60D8A8C9B7EF32A47D2AA10CC01BD74F486262CA3CBA2A0BB3D25A3
A094F02BD79F42A0A236349C843943C6914F47589F3954D0C018D1FE33AE62F4
AD6F7BB100F692008FA5232B949E365DCD3CA3A3EC8285D42D2BEFA> |-
/one <1C60D8A8C9B7EF325730A290BEB204E49AC09A28987764356D1148F842
A73E52E5A03E7C90E789C54AE8AB77FAF63FE459A255> |-
systemdict /gcheck known {setglobal} if end {end} if
end
KQJCJQ+Helvetica /Encoding get
dup 32 /minus put
dup 48 /zero put
dup 49 /one put
pop
%ADOEndSubsetFont
/KQJCJQ+Helvetica*1 
[32{/.notdef}rp /minus 15{/.notdef}rp /zero /one 29{/.notdef}rp /O /P 
16{/.notdef}rp /a 2{/.notdef}rp /d /e /.notdef /g /.notdef 
/i 2{/.notdef}rp /l /.notdef /n /o /p /.notdef 
/r /s 140{/.notdef}rp]
KQJCJQ+Helvetica nf
KQJCJQ+Helvetica*1 [15 0 0 -15 0 0 ]msf
30.4927 174.82 mo
(10)
[8.33984 0 ]xsh
KQJCJQ+Helvetica*1 [10 0 0 -10 0 0 ]msf
47.1646 165.578 mo
( 1)
[5.83984 0 ]xsh
427.334 111.25 mo
423.666 111.25 li
61.4165 111.25 mo
65 111.25 li
427.334 111.25 mo
425.5 111.25 li
61.4165 111.25 mo
63.1665 111.25 li
427.334 113.917 mo
425.5 113.917 li
61.4165 113.917 mo
63.1665 113.917 li
427.334 116.833 mo
425.5 116.833 li
61.4165 116.833 mo
63.1665 116.833 li
427.334 120.25 mo
425.5 120.25 li
61.4165 120.25 mo
63.1665 120.25 li
427.334 124.083 mo
425.5 124.083 li
61.4165 124.083 mo
63.1665 124.083 li
427.334 128.667 mo
425.5 128.667 li
61.4165 128.667 mo
63.1665 128.667 li
427.334 134.334 mo
425.5 134.334 li
61.4165 134.334 mo
63.1665 134.334 li
427.334 141.584 mo
425.5 141.584 li
61.4165 141.584 mo
63.1665 141.584 li
427.334 151.834 mo
425.5 151.834 li
61.4165 151.834 mo
63.1665 151.834 li
@
KQJCJQ+Helvetica*1 [15 0 0 -15 0 0 ]msf
30.4927 116.742 mo
(10)
[8.33984 0 ]xsh
KQJCJQ+Helvetica*1 [10 0 0 -10 0 0 ]msf
47.1646 107.492 mo
(0)sh
427.334 53.0835 mo
423.666 53.0835 li
61.4165 53.0835 mo
65 53.0835 li
427.334 53.0835 mo
425.5 53.0835 li
61.4165 53.0835 mo
63.1665 53.0835 li
427.334 55.75 mo
425.5 55.75 li
61.4165 55.75 mo
63.1665 55.75 li
427.334 58.75 mo
425.5 58.75 li
61.4165 58.75 mo
63.1665 58.75 li
427.334 62.0835 mo
425.5 62.0835 li
61.4165 62.0835 mo
63.1665 62.0835 li
427.334 66 mo
425.5 66 li
61.4165 66 mo
63.1665 66 li
427.334 70.5835 mo
425.5 70.5835 li
61.4165 70.5835 mo
63.1665 70.5835 li
427.334 76.25 mo
425.5 76.25 li
61.4165 76.25 mo
63.1665 76.25 li
427.334 83.5 mo
425.5 83.5 li
61.4165 83.5 mo
63.1665 83.5 li
427.334 93.75 mo
425.5 93.75 li
61.4165 93.75 mo
63.1665 93.75 li
@
KQJCJQ+Helvetica*1 [15 0 0 -15 0 0 ]msf
30.4927 58.5703 mo
(10)
[8.33984 0 ]xsh
KQJCJQ+Helvetica*1 [10 0 0 -10 0 0 ]msf
47.1646 49.3281 mo
(1)sh
61.4165 226.75 mo
61.4165 20.0835 li
427.334 226.75 mo
427.334 20.0835 li
61.4165 226.75 mo
427.334 226.75 li
61.4165 20.0835 mo
427.334 20.0835 li
427.334 25.417 mo
425.5 25.417 li
61.4165 25.417 mo
63.1665 25.417 li
427.334 35.667 mo
425.5 35.667 li
61.4165 35.667 mo
63.1665 35.667 li
@
gsave
61.4165 226.834 mo
427.416 226.834 li
427.416 20.0835 li
61.4165 20.0835 li
61.4165 226.834 li
cp
clp
[6 6 ] 0 dsh
320.584 194.417 mo
320.584 155.084 li
168.083 226.75 mo
168.083 165.917 li
320.584 120.833 mo
320.584 107.75 li
168.083 121.25 mo
168.083 104.167 li
@
[] 0 dsh
293.916 194.417 mo
347.25 194.417 li
141.417 226.75 mo
194.75 226.75 li
293.916 107.75 mo
347.25 107.75 li
141.417 104.167 mo
194.75 104.167 li
@
grestore
267.166 155.084 mo
267.166 120.833 li
373.916 120.833 li
373.916 155.084 li
267.166 155.084 li
114.75 165.917 mo
114.75 121.25 li
221.5 121.25 li
221.5 165.917 li
114.75 165.917 li
.923522 .746761 0 0 cmyk
@
320.584 18.25 mo
320.584 24.25 li
317.584 21.25 mo
323.584 21.25 li
320.584 40.167 mo
320.584 46.167 li
317.584 43.167 mo
323.584 43.167 li
320.584 56.3335 mo
320.584 62.3335 li
317.584 59.3335 mo
323.584 59.3335 li
320.584 62.5835 mo
320.584 68.5835 li
317.584 65.5835 mo
323.584 65.5835 li
320.584 63.75 mo
320.584 69.75 li
317.584 66.75 mo
323.584 66.75 li
320.584 86.3335 mo
320.584 92.3335 li
317.584 89.3335 mo
323.584 89.3335 li
320.584 92.667 mo
320.584 98.667 li
317.584 95.667 mo
323.584 95.667 li
320.584 93.917 mo
320.584 99.917 li
317.584 96.917 mo
323.584 96.917 li
320.584 94.8335 mo
320.584 100.833 li
317.584 97.8335 mo
323.584 97.8335 li
168.083 32.0835 mo
168.083 38.0835 li
165.083 35.0835 mo
171.083 35.0835 li
168.083 62 mo
168.083 68 li
165.083 65 mo
171.083 65 li
168.083 73.8335 mo
168.083 79.8335 li
165.083 76.8335 mo
171.083 76.8335 li
168.083 76.8335 mo
168.083 82.8335 li
165.083 79.8335 mo
171.083 79.8335 li
168.083 77.667 mo
168.083 83.667 li
165.083 80.667 mo
171.083 80.667 li
168.083 89.75 mo
168.083 95.75 li
165.083 92.75 mo
171.083 92.75 li
168.083 91.917 mo
168.083 97.917 li
165.083 94.917 mo
171.083 94.917 li
168.083 94.167 mo
168.083 100.167 li
165.083 97.167 mo
171.083 97.167 li
168.083 94.25 mo
168.083 100.25 li
165.083 97.25 mo
171.083 97.25 li
267.166 139.417 mo
373.916 139.417 li
114.75 148.5 mo
221.5 148.5 li
0 .960204 .946044 0 cmyk
@
0 0 0 1 cmyk
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
KQJCJQ+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/space <1C60D8A8C9B854D00D> |-
/E <1C60D8A8C9B64EDF885E9C70E86F4D6078E7D1BF0D69911FD55CAA5C46B6
C6C433175B8381217040BB42F142B1A0E1EA4F6BED24146D2DB65AFCA0> |-
/M <1C60D8A8C9B6B41CC7E91641C452E31A1FF57E5819E293AAC22FFE6A989D
D096F29F83DBBFB131D21D2F3E6C6DAB9DE434C529570BC24A625218D657C1F0
3933B1EA3B0DCFDA8AB35AF4BBEE90CCC241F177D656ECD11D47536184> |-
/S <1C60D8A8C9B64EDF7B9A268599F9CD8C4143A0D599CA83C2CBBCD89A1827
CC58FDC85A8DFB6CF043CBC57E481A1BFB4AC131B9751770056C0E80F4764323
078BDA58184A405EE51A0CD263897356EBA37F07634C62A89D13BD3B9631D5DF
BA5DD765A30358A68432555538AB46A7C75E0621846302615DAD8C2BCBD5C891
F7CA482BF295A57FBDF509BCB98518A5F92E5A0834955E87097681F276DFB2BB
C57A72F7985B1447C571181C1100> |-
/q <1C60D8A8C9B7EF3227BF5E70012990F6AD75C7C1606B5E4B0CC1666D106C
062CBF25548C316EFAE3CD807215447DEE7459A9D1F79881E23A7CD97C235819
3B2CF61D474D654F5D11A16B0F4A55DC2C0EBE047696753569C42AFD2B22ECAE
0F067510265AB7C26184F3B68C845BB80CAB35D9CABF5FAFF5C3DB638C995B15
CF9621519C> |-
/u <1C60D8A8C9B7EF32A0BAF052F4A114ECAAC082E31670DC94A7FA83EFBB56
8580AF4F6C2C8932BFCF2FEB4A203216A409C4D844E8855D7E2463E8D98BEDB1
BB4900872849E5B1FD95306D62898C38C902A70A77A4381E200B6BC8AB0DEE26
413B477F144A27D4649C29CBC5> |-
systemdict /gcheck known {setglobal} if end {end} if
end
KQJCJQ+Helvetica /Encoding get
dup 33 /space put
dup 69 /E put
dup 77 /M put
dup 83 /S put
dup 113 /q put
dup 117 /u put
pop
%ADOEndSubsetFont
/KQJCJQ+Helvetica*1 
[32{/.notdef}rp /minus /space 14{/.notdef}rp /zero /one 19{/.notdef}rp /E 
7{/.notdef}rp /M /.notdef /O /P 2{/.notdef}rp /S 13{/.notdef}rp 
/a 2{/.notdef}rp /d /e /.notdef /g /.notdef /i 
2{/.notdef}rp /l /.notdef /n /o /p /q /r 
/s /.notdef /u 138{/.notdef}rp]
KQJCJQ+Helvetica nf
KQJCJQ+Helvetica*1 [0 -15 -15 0 0 0 ]msf
22.5708 191.406 mo
(Mean!Squared!Error)
[-12.4951 -8.33984 -8.33984 -8.33984 -4.16992 -10.0049 -8.33984 -8.33984 -8.33984 -4.99512 -8.33984 -8.33984 
-4.16992 -10.0049 -4.99512 -4.99512 -8.33984 0 ]ysh
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse

%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5
[/NamespacePop AI11_PDFMark5

%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/KQJCJQ+Helvetica*1 uf
/KQJCJQ+Helvetica uf
/Helvetica uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 16.0
%%AI8_CreatorVersion: 16.0.0
%%For: (y2smile) ()
%%Title: (supp_old_new_comparison.eps)
%%CreationDate: 11/12/2014 4:59 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb!j.=`6+<Z68;m#5B92D;<6:\81,"8tpK+]0pWf8X(WdimQZ?I5&\14NrEeD]$A&F,_n^@/P7W*#S;*?Z])iIrIkh<`N2*2D3m,
%hg<+-;e/m?A7f@_A40rr`o^l^0^X(qrO;^_pP_2%E!tn0GV"jRO1TkogoPZPUp34R80S)r;@suMNCDhU&]tmpmHKteT:ClFD.u*b
%%!mQR39)XhB_L9&br>9ll+W@-]tnXTI';6&AF#Hbr<XrXQ$U2;PA\"S^:TmFLV9k?0dr5ILc<K4Sl?bi^7#]o017etPSY86Bt)\S
%R=;Q>;9#.t$2D'`^qHb/;0Pj_i&cCZC`Ihr8!hY7K#WZd!AL!sj1?OZ0GufFs78DOm6CR<J,DN\q;X..rBL8D^HD='i1n-XX#^"Z
%!9h1B3Z\l2SEN_epdcmZn[-r6oJPtm-PFFuOA8:)m[1e`:Zf8o'FbNgK;$9BPNUqF2o9f-LiJ#.-);d-<*UK83X*s8?0ShWqlE%P
%I!&7<;gd[rPKWAYT],LI(rqb7qW_PDP=G4o(XPi:RjQ[H#9Be!qPo,qpR6#BQjAHC8P<;G7rQfYdEeIESTG,8N'!lCJgR>Fr#q&e
%7S\_:s(ZM4],ZiP]K;+o&0X*+::PREN4\m"DB^C:Gs7q/b,_-K2?3e4EW\n#a"oQ[Vk`Za\"Ae0Qu#_kh2XPR8VB_,JO^;D1&n05
%s(Q,ncmKL+0D?O8>2bjB*%l8Z8_^b$8+bDOG'bom.9Jb_kYGMO>q%ZZc&=a0Vg(VW^Us)%-INaEjNp+gK[3$f51=6@//70CU'Q6;
%&`/Bh]G3m+(/M/>/WkQmBV?d2'8e(K:b7_WQXuiS1mCS0ThHC'_q!4M.$dUq1&(sF:omKD@YFk_/JR,;T`AZHAU%E3-PEq8\I8Ya
%AQ"A,RWOtiLpTb16<3ip#TO!H5VX)lHpTP)QTSIB%L**/:^.+-T6T]X3_3g!(OX(Q(_h?!."WuO)?pA;GjOo'*lGL\<J"/t""4@@
%K23mo0#KJjQ>l!nV?nj]Wo0(?-)2gi+PeEY,OOO:b>T]'+oe2PN"J5S'U_KIEq55c*.3<H0Lg>b$#3"B(aFFF0,Ph*"8J[_LI^h?
%`F+Yo8LBX_$UHE0!OO<)!q*]p8b1An/eZr,0nMM*2e;Pk!4_WrCSYMC>Fm`N7/dF&@":"l_>nRu132q(`X&25N6jVEOl1pmL/03"
%"%:[N.[O3L5p'fn:qB?G1==0bLHA:&L(K'O8E@<-fI-VB\0ijAjPeD-'-iR!F<?C^m1\sl!-qB>dE[r08gp1Q4[BV[;9&VA.BBMA
%e3VXHeZ5i/)-Q5c+I"L^!L4:;Fd8EVQ*8KAN,*PoTMI=(EHN!BEd-Utb:OCCUaj]3p`KF1XHKL]"G+3`s,ql9\\UN'0DUC'a5c6C
%qNq+Q-HU3!0DUr,Ol*.&dX$fMbN6eqoe6--c]d8O?h+_-0,DYSoe6,B.ZrWR?h07Vr_YiiEsSCKI`ZO((\nGK'Olbu]Ncui<p=6X
%<A*H4n=TA\fY\[E2>W63cV]BL(V,q0'U+;X79ZOT&.j,O$b:;?cbnLX&QS!%j=@m]`J_hNGp:"S^SG$a-C;R;T^r:%IMo'&F8.Ef
%Xun5_^Z]rJ5gP"Ce`up0SA7n=eF'*Gi!RRMr!1-4IHBE@Xq$Xd\ca\F',AIc["IB-TS+S*S\Cr!6_2?`d6`@MS+p&g*<[:(;+SQS
%8`pIbpp?LjVQ=5r8ASYM"131f)u>uOTkai`I)kW?8LZuK[%dUhdnuL:1c&QO![pWQ5tDWkP#bd4mDK/k-p7XRG??Vj*bd`,604M@
%ORX\)*opalM(=^V"`du_QK(sbccujHON3rc>uOtNa_2k`A-,d:#IP8ij71+\d.)]:_d>`Q8co2pAS&QAb=qdaQ(._Z'G@dag^6^/
%Z%NNbo=)dgfcHmQC1TJAa++nTFQ*oOGX@Ri5>Ei"2ZCmYh69FRR=3!ICj#>M'M;;Z6"iYhY[!<tKo%`_IqpBn)3W3hMJ@:%5kDAZ
%9R?a^?If15h4uTG#IffGp4b4U(dNS)*4tq.]L,,ZU.W3p&2+LI^ECGX*be)Mde#)gn!SXk"H_[D$+n7r9b/CTF\m'tQ5dmQ[RA_(
%I$U?'V6(PM-;Vs;nEA&?ilh^_j`N&PY^g96/b6[!kB._39($dfe?;>am/ul,lp@7=ps48SWdiREX07CiOs#K^?'H/I>`fhe"^<=s
%TKMCEg^'HpQl&MaA\qS!f2pUjfrg*U*Qu8!F]Rj%$](Lf\:?JdPrV_;Ja&R(6CrNTqJ,8b'GQ_A[WGIb,G5e$Z(*p&1PC!Eo4Ea/
%o*'habf)@1N?Y=CI>BE(PugCk[qC5JKI.D_btIAY.VFF_oO?"`TQSLC4+DBaS-rA)Y4FlYH;RWi5bR1rFW'tC9ZYWiI);m1hr4T7
%N'&7W)kN0,M'XZM>SV`"aWq1.OIsF7+XpKEV'QMlTM=@I_4i4`L@>nf-s8kk7;u2e/1=#")te[^Q#r00%/DOU70&6B!_\d[*KaBh
%,G06X&7ApaQMMW+/(1VT_&!r@a,8.3Cc(>bhWS2:#C^kG9r:;00+Y3m`,tWu3g`IuDZ?gd\^QE!gSjqK"=D?+Bf[0BH')T/[$kJR
%qUumI\pa.Vdj!,6?EZF1G>[tZ:@mjI)UUe5IC.fN[ARB84mD_):`<'b#Ld\!hhb[JS"i86qDRa70^PD'3f0GogjCYJ@)E'L%t>[D
%hqf_QPIRRhK=kqndF1Zdl?A]WpSd_<s%L#;NYJ%CRN2].oa'2Pf-mU\OJ8;^UaM/B?*H[dmlF`gKLS(I8&rMZ)keJgMmfOYOjn=L
%5X,n/enFP%oio\'lPDaIMTY%UmD88sKfSG28mgD'[u[O:Kdaff\)$ED#F"BKO5[_#O,hRdN7$"J:@tU?L2J0AU.L4PHda^L3?:U;
%^CA1]KXC/T'V2mt,Y@g^CelEVoP<aS;dpG*la5(;@q]_Ye*Zf>AOHcO[0GpC=**/gp2H'j.<tYOD2qF5q"ik6]ok;;_m,\,$dfrk
%#6ZMH>0J_-R3VLO.AP5*!2@#%Zp;57/`H!B'!@1dPaL_^V;;5%F[2BT@*0H;AP/0\kQu,<JN5"k:.^.<VSXeHe#?76CYG8"LV4eW
%dr>n3U+QtT:+Fk`b&sQ3*I2r'4r>GXO[`]6@U$NcZq20Rb2[1k[@<uVV?3QMdF"2QD&F?,W@eeHP$/`SP*C8u;Q<A^FdXSf8f7r/
%UJDdJOQ$AQ:BRK2J/2#IFh5>2i;l6aPZ43:QDU,M9U.Y'aQj.%`XhmMl^+Xb3JiS72Qk'K0.GpF6%hXeV_Fkpp"KR.;9ZNhb#'4,
%W:pj'T1@EEjM^6HhM!*rr[#I%k;n6]FS0,ld5)p#8cpqtL2];lbNEDlhk_6(]d\81)%EI\KDt2Pons@4G$do0$0#@m+EcJ;XUk'A
%n+Jo%*;:lPYt#tZj1cdnr[&7qoL4-A`?Zmo'N&#0I\bX;qJ@-$pR3>K:#;VUpa>q8$@eVr01rF#d?b2j4>$5UQ$S'+"'Bi##h=@P
%*"AG=5O13(c&is[:gcKpM$+a.aIkqG']T7f!kjE/k_fTC/]9B(Or-t],)IA6rt>Z`6;fFl5hES\;`SWf3HEV&`-m@GbIA0;U[+[D
%!ToZBVOE]mGJ8k+NA6%d4Q8=<:D1Y^7g"gA%Q(7/.08Y.rQ?9iX[0-PraK)%XmnOAKoe^djuLpn*#29W3uf-tir.=i)<,<jIWo-.
%#!K@;4J)]?3!Tm>j`([nn5)o6Gg+RFF/'%UlCWF\Per1R&s@q9(#&[hhlf?[aaRnF)8:=L-=%9=2o#lZ,46qjT.JM]P?&\U\Mg<K
%PJ2pa9,NqN--:&5Tmm+!UJ'3uUc5XgR]pGJ17,a5-gc,%XkOa;#t_F2P<al+h0oTOoQ&ZV^ue4E4eBH:)?14L8FS=u)#Z[Ms!"jG
%.>SkOO@5j>E!/KY$2XmX?Y85s]nqC&_9*PPYcZE[8=_S_#JN6_+$K*%M&u<p^\.+MG6TbY+.tb\HID_Sg`c=dZMQNG8]lD*I0q&a
%CANUe4E[.(r;jYCdC0YYlo-lL\W>PW:Ro&W68'u_dG#-4M>(WV[d+`R'T!h!7GirW5Q:NJrolZIje)PC5<h0o$V1&6U%[keY.jGg
%ID]/SQtC;LO8Q=2dL\]2L=X[SU]D\N0Bh1.7]^h33btMjo4hJ:`;+#TL=AC-6>)'A$8"eH4@`]jJH8%7=7UD89`NVD"kmhHd>V6J
%)H$;2bW#Id[__@33Vl#`g`G'B"s(hHosWWLq\R\54&Qp#M,Ca9F:0@@KlH#+B[lslJltr$9Y'jY;Ro7pT9^,Fd0#%OjY_EZO9.dV
%qmQ@]`imY7GT/67b6_j@g9SIOHW-ap]GR+Pm%Y:ebL,1*[6O]EUT2k`m]!i49HfX,8s9pI'*m`1Mhh9GK1.?KXQu=+p'0n[WT.ZR
%Em[l"`U\iCXV'N.Y.MqZ:NEftSBUF$muot#;onn%S1R"Z56m=g38;pPAFT7>@"1D+6o3jMa@WUk,"CU_;Z@g(#'K.Uet7Fp96pI3
%gRj#1ru#eHENe-rQc$gs7*6O`OIA=j&\gtX>3'ABje@53ef@Bj&Ku$R]\g;kah+=qd?9!:_*R!X4=/^AmY@R"rV2S8.[dL]d-o8I
%c_"`5Lu77u"0:t!"qr7de>1\&M$\2Z]\,o,)DM<ba32;@e<Y'XhOd/q5hk%cU*!ajUtJ$8ed=I%?FhrY*GQm?6uu&dOPsX]Q,Ph$
%G%;VRP8D#9F8W"E']\.[U+b-bF_-_1b)<;Vlpg3F3.99toL<TQEX2$fF>@fB1r3Ciq[\i2C@6W8h=:R$T7*MI%]0p6)mT-@Q0jS:
%&00qP_0Hnbd;8'SHe9<1,PS_F2+9sG"$LRQ,*Pm159;_>HcFg=gHigY6.4-q'PrdVX[.$XEOR+>;'*+V'2k]]g]Hc319IurhaWbq
%7(.e>MDh&^a2PQ6;4d0-D-=:X[Y<6qn-K^#4Bb]BneIVl?^p(K%6g2Z4<$k%C%SIe^63r;@"Ws8ea7K,5Lc[N!$PT*2j0UiHnoI_
%Sa%Y1C$/loURa#0YK^dB2:EgLl'OQ#9QC`:6f7AG3?*);'>-qc365+;`T@(5]Am>'q;\tFOr'/IDu\Y.q;X^<)`O.NlMYT>X\jB"
%1(EgF1-E`caO;\qrc1^0(K0^:E']p>I5r7*].cMJ>#;dT`sXu4bKhjs)*\t/11l\3+%_:QKKI/Nq$7dt#rCdRcH7:u[K1a3FgKsG
%^S>5tEYK>p6%Hp`(g,2u0Q8^23u.+[`o*$EfGo=Wi3!8O(7%(VVWG"nj";Lsb=Qb!fi0Kr#(t;)ob^:_k]`i[bMCRuY)E-;QVr1W
%QWIZP*LBVUnd0soE=S3LUgC7sqaB79;McZN(?=PNL'pg:<^mQ9g'[(1L$+O?e-a2ORu3%XMB!jGKfOd*%YEFqHO(8NC;3B.mL56&
%F.C+3H-Z@\,1=l)35YQ4pfHgBjDHhP2qg_pR]SB1g%F9)Bf(M'T!;"LG-<tqRfsY4IWpFfi]o4\p`BG05Q@Y]o'cVTa++!Dr9]"/
%[nj>X'CQLTBbC&"FdEiaGjCa,=lpXcAG-@WeZgr[=/6>=pUes[#&"a6do8>u:52=3Yc5P`FJaPqB)c`%I$<>uK;#"6_BK5A3S9mC
%Ji5iK7E6'\*??)`:,&N6rCPV#Up[():b\U..n4;SZ)96T"b3pG^WK^k7+9RLbNss*[jkKFH3c<Mj+<Z0:L@JLP$HMLY?:<52VY5?
%!A]T;QbQ?BR!:*Oi[mdb<?Xt*#^jjjBSD`3CrW=9X=,>-8ZU*)mB1;'VSBB\.V[I@>ZT>4PU1K1I*/07k&*5WB&!Ku7mu;\]IhUE
%Cc?^h&pjqhD-7d?nRF`k\0D-],:)eR(_.E>V.r7m\_39hi"Bs4)C%g\gmhhmnQGFC>A[On`E;PF%(027(,!d.M[t!C#fl/.T=KUF
%[+CL%j#)F=d#Hm3Os_/RHSF_U*<UH7*Bb96[-rDR`1[tDdA$Y0Njphj7+m@YM.n%!=`G[gdqYr11/:YCJRdhmA#ai#];K(n"k_$+
%F>LPUCh>J7:FX2q1hG=.@TVh1OAlrI;MK!X;;sS%cKf[h:"`JD`]Q3JG^&E=EXq.rBfkYnQk%M6$JXT:>L!A&Ul[qP;MZ*o:"nDF
%W5=V-gW-T/W)njSC.$/oY+r!;0`!M;7>=?L(a8E8hm&SicucVGZRIg3ljd65TV&g7Y:hhtcu?u;FE(hi'IiuD<T<\r8o4>2ZFOA7
%@EEYZo-nE(!/r!0>2\)s"tVjS\5@m^rCNg6qa+St(c!Ns*5)h]=thHcT!f>e9f+7S*(P;\d8lHcMR9rK$B(cXRD/=EA;hWXV1:*e
%&<Sdo[E]KQ:U%$Y<M:HEn=$BDVef2@K&cT;#N@hH_'+7/Z>(KS:N%&sQ.-OI<]41KpL-Ij]ni1U];X@qU_i-tb$\3@D5O7'6%hJ0
%IO:!ZD`"q<5pF,!'Ldu/\lB=2Rp(8V;K=I-&*uoIXem2,kY.NsD7Z`qc*f>/*3k6<7-_[p]j=6t.J>gi\#m`*'VbJj68CH($<M!9
%qhhZ5Qp9V?`7;e8lIoSWL8FYTS&8j1>TN#D30$L9&bkWoG6l#%NWu[m72Q_t)a_bF@^LOC6F+>^rq^'2%59(5PBYbuT[fT\22=X/
%`*a%hI=4T3lq3hblYD0DNQHdQBmG(\i_4VbSuD`T*D8rebem5raM@Wm>9P&)DA(es[.`4A2TM"fUdIhtGgB:WAOC3/O&fXhKp,-H
%%Zj\on%<#FNcX]CXOSeT9RAb)-\!O442BRY%At'YAWQ2oN30ZQkY#Yq(O/l/?+?7X!n"[kMbXI3S&MjI=r/57I=Spdc+?WkCM;>o
%\,YPSr9YU+h`q,1YCHGas6\_CO8n/;j$3P?5Q:2&qqM/GIp().JCCgNfd>I"A=Ak5+OU>DJ@2deJCBjSjXa4:T<Hr;P`@Tg^@dI\
%kR?Rk(-TC?KS`@-XOOO`F%l@tF6V7fDeo):&K;#iMTBhSE*t,*6;^2ABYgOTZ:lM\(*@ZCK2EG&d^>3GT]@U938On8Ium`a8[0F%
%8$XBKh!eOdRM]`^foqXZ(+>m/(lUTb1u!Vsg5L./*qn;P/=78'eF(X&^ZZ&"\il&BAMQk7A\I6Q!BOm[Wr_/7c<a\k`PrGmif'1C
%H,AC*`T![+=p:,X6sX/Y:Y/9CZnm6,Y%(EH41\^kp1Rh[-0$bR;g4A<BNL4!VD,;[/#6G^kZZ6YfP4$dJdJb23@I%!a(8>>h3K$O
%<(p(-PZE.jTJ5+6XjWf)X0?>#CW_L7a!bTVhkf1t1jYG@HJu<`*)GY%l@U:]_9"&a`!06[_'KGe"pD8r;]s8)+&]-D<[7ehf>?q]
%1UXT,&SoeLNKIrc>#PthA&!I7r)W3.(g54]>eaul!d32o<B;J9>"H1A>Ka,DKSc&EKlY";8;n>n5^j$+I@qDC,;@=%/dhmhWH_8A
%L4UQRpYmjJi;RjLb!gs'iSa_47"fJFD!*o*.PK)4Dtq;[\:6BX(LPXVcg(AGDR9,\h<cY0L#DAfin`XA#]+`Pa1$8k),IIW3V.oW
%EkrF5mWc8*m[Xlt(&&F?kHV9G5"7[aI`D(W?hVEc8k^Q!'4:JqiKs*XGp@>Mods6^8;5H)Dmtu>%8RJ?8*TPMqW4`_Mjc)%m:YkY
%rn`(2G[GbhQdb9hVpT8IW19n8'&!3+8ZH+hKeFOYc;s'H3Y@ao';uetI\`u*2j*[h5'C3M4l18!qsrQCGrN4ejo`/)T/Ip335HqV
%7ZUCGBGC&kY+H4eiD_c?.)#9J?X?\#XQ0[F3cU4qqq:T9-i#A'cHctQ(:o$7H.8%u*$31-]"7Dt8:X.rf^n/U$JrJ(U07nRMaYUb
%MQjj%I7?FO4bU_bU-+OkGVn+q?]Q7TW?X#6]-NT@!_(A,b+#kLp>"gu20k.>;g!&SVa;LF&Sn@[E3J9S;C;RU)B2pdp<?ch*^)C;
%06+$H)K!Bjo'T0K4##_(>CB9%T:*)j?151qpI;9ZAk&O9cbk#+qX2R@\Du*7Y'2NtGW7Np27VJ&m?k8L=C8hW5DeE$JHYV_NSWE3
%ja?(;Ygp/P7r"ePDP%fSb*?>g<MNSl1UuBq+a-pB7WRju_c81]46*T3^["5FWWerQ%;+bQqj#""@S/`RH?E.:Nio/G\5bqbXcdjB
%+%B&FCQ)^%m(C?0@Zs>GXD8Q>+Uns_LNL&4XX6fQm<,a9gS<pGIr!j)8L^nCSX:I^\X=?'G^Yr4S$cGU(]+'CEN:ho?#[DW5LHkG
%c-WG,`c8mcX`ENuo=RYqM=o,<._]iLl<T#m&$E&hZS<<b>%M2fX!YO3%9os)Vlib7\eXp,ke*3&5KgQ:_UG1:SMgH"Rgk@Ne\FkZ
%e]*rgA<TB/X0mSD-edikfV][(1*2;-';!3%/._J=cdfbTPK'^GXA)X$]6;?$e^L*he[6m5:>G>9jEh_!C%WXj?.Q`f`iU;=ca@e=
%hdb=(eNrp0QD`DT096cJ04q=%\SLUnD;8kX]RJCF"Lci]@9ZYL^4+oZS$mY1P8Zfp<fae\n:'5iePZr9F-B=X$AQI3%p_>f[ed7P
%<Qgl=qO$34RP-t7<QujR?9>-15;ScV+i@?QT5P[GXU_.Thj[cLQj^QkC.71AQL"J&mH"2\W7B;Z,eQlVD2E_tiX)Ia-'>Rg>an^^
%[\bsqj2m7W@Y'/46Skj9meXYi9=J'RlL%3Xo4/&L+kl3o3hU7'27*,TYkEqn(@l\IJX0ABE2AbR$FC_CjbkKpH06VMoGB3G4sHfQ
%I:!;V://XrGAej"3L%%9.3*'tU(lBWSNK0<dFhP6RqoW[eLG>,d%b@kUeW(_qG&!TS4@\=r>=me5"VgPoib(J@C3k#]FXL\a&QKl
%$LCu*o&UH=rK]!TbSHR`H,S"[d("DGNu$&J>V^Xf654Fpe\+scB+0V:V4H'J.58),hsYTnX=3#9Zi'fOT;u8aa3<DW'usR]F-J@/
%:uI?s2^u)B-18-gE+/IK_-Ig?-Sj+^$Ts*PbNj;38bIiEGEk>bRD"T$FjG8"pQjKN4PXW88^[[H>cZ"Qf0-b,/Z^r!gI(E*/\H#q
%[Kb"3Cnu,a"\uRs7&aSfp5HUj:Hk2[rSX8bmfNpFAdUXI\YkM?O@f,c2"t84(<t]J\ON<Uf"GWCXYJf[JYT_HoqmdG^Bhk,Dd2OT
%Id=O\p(gOYnOMbXLF*2Y"9.@[kaK0Oq"_O_UFkN8n`To%p<MaU'PYGZbiA@<@Tgm01`]q'q_mVo<3pr4Xe#n-PFcD7G5.bXb95(0
%(u,_[cAemFr(k/"mB6o[D'9n/TLpBeDL4`Xk:2i@N)'^,gY3`dWlc9>VXu:uFda2KO7)V/g$$@Y5cSeo%P+2C(#Fe?B3`!/O0f:K
%I.ShCWa-*K[?o,ZF@RSc6IUfCYdZ62;:397U(>e0]a'gZ7ZUJr0@DXpVcXg'I.h\Q;/FjZh;+A=/]G+1;MHr>)V.&T'>1qi@9HQ"
%qU"I]_nF`(j6qQD*RDO2e_&][H)k`B:/ikSd"\OHI$HoTBb^s!VqpC1=fX2FXV.30%9LD\B"4D6X`_&%d5VdZ/$4[i%**8CCYNm1
%Q(A2tCHgOR.LX0I2q6fHVD!>8ZrKe@-ESJO'Bp6m\lLOOe)>&=<mrNbns<b<.TS,p>6V^7_oMo5iPt:2o2\d;kI9TUJrl^BQ&+]>
%aWRK<bZ[0%RG.=-LpiAZ;0'u"Q(r)YY3<;=OKlipZZ?%$U(O&mKQRR.K[u_?Yl(7Y7I%P[Tg4r0o-05!6c*JHjJlu[bD5A1#_)h?
%UV@>@8V#NYL?rr0$2+D>"_0+=451Z=mm,+3bd'><g-:O7DW21odMnac7U%iPH;k%7ZAa^_%3Fq9#$@jsTq>PYoV6]T8E)\**bknE
%IjjlaVf@D.1XkU%dO+nu*=iF-LdiLCB6=W=%LX0pb,C*CTMF[Fmo"-=4qM;nEsJSu_L5=>R.Mh,$BYjV;BA0I%'5:&nP][K`ufDV
%=EQPBiL'q4AhZdC#k>rhbo@r'qq-!#M$shLfU)m(mLtl-BS6J!VWXF9STU#&E]Z6.^<A$8RnOAJ%G?lW*R.[RL=W:nbrDOQmZh.k
%ZWf^BW+U3JML@R$FhE=73>M3J41$5[Bt7&N0Z/V46:9#Y@[$(d1K&gU<#?T)1T]P%r[gg5VT\Q`1sttef,`*#nHVK)2Ur_=YOm(A
%?_/ej2dW(D1GTg&5(?Nf*Ls]'jme`I0"c'b3:\5`7CMoErgfac-^8`t9NTNRm)QM&`aqj8cQu=)J)2"OM/3;N;e@pp6g]UO)O#O0
%BM0_oCFBY:<\_/oDIg[BoGb7`Wl*]<8X"Ib;NO5l7/J]lef($8!BO'"-EVir?%DilAc]>nD[3%<4%o2b_Za-HMq*Bt!c1QD8-h<f
%.I>1GJ.WN66L#$=Bpq8lRoT6Vh'^eB=TUl6eFGs2'Ll7Sn"\]Jq\D$U)u!Nl4I?QKoN[[,<7+B>E=Jflp,t2`T;dtGVJ!i$Yc'b/
%LsWYLa(@D5eu6>e;,WtD$>-OuV&A`$N[MA9iL:eCWp)E1k%7)c17mRQ[)WY`].KXPT/<uOgas\!T0>+"QI6ddI9O,64k1ElYaHVu
%IVr7[)s_Yc!BZ:,ZCZ\/PXgAr`C\<DI5M_T8KZBg$ArY890gsD0P6u.ff4NUlM\G&*R\a,^3PJ/Rdo4;%V[ul2E0'_,ttc#9_Q2C
%g9$IOI5^1WHF8\]lt2FP>Lg9mBY7tZiH1u4c-oeZqnd;tk&3K9<jb&jE!CA?O#lYeVmNq5\?UH]>7*Z.gd3Bdfc[4*EGBEr)NBbE
%/2U?9cDW+8h:Qn*l%oj60^4E`l@dFg$_i@BM1u&hShN\kdN::&`d?9IDeu]Wbpnda)14KFR`@-#.ILrt/_(>k](9olpd)7I>Wk7A
%HHd_)VfCVSP`lq9'X^_=(88slEOSX<1g.;""dBBS&@`49@0Lu!k2X6;/$L)R,j85uW-*`^)tA+"K1rg@C"AIH^99NT"8S#K1*`$o
%!1LoOk:>"RF[m?IjmcPF&Zeki-b^!)]BMq#I@q#=2:l<hiCdJ@PQW2:MuDs<]@]j-3*TUO\<0ouF(@tL1cg")R]:t>+]hN'XQB>-
%Slc]n$jL<u>g5`g`lEFm*h9`iI<DV1*1\#f>6ruIoJ\_D+b\Ru<3e_Vc!1dF*g1E-eQ?]0)i=:a_l6\iZnW2]lo0Hapfuqo1Y^1u
%[d?$uk]LC!KN?=Rc^[^O@^`dRht/=d['LOl`9cHF!ui1c2jU8I?g"Nr]^B07UdiEMrRPXU()BfR3]QN@\DXsOYOD>N-[5M94Zq/2
%L^T;kk1l`f#Y!PeJ`@nj`o^_6o(e92fT0Wf^]dg@6B&5A.BLu02tg]5+@s-9R1ls=2-GaG?I\VYQT<Pah[8S8c[h@/S^jO\(?"TA
%>c/N1UF+1Um*!3TkfCC?TF=N$7dJ'FPnlYA>(uQgBNRCpZ=\KO3PS@>;Re-JJ:m8T1U_gc995!uLA[a1+=M%5"e(ih0>u3]o5CZ\
%ZdB]@rVfqko_*%9isGCSOBmoK/),NGA!P&ImZTt9Cj*5io91`Mgp")`'mE$F:#)r4DWk6C>eHh%h[[V`g\QNW9t.5JJTGDX%=qEe
%)qELT5D);L*,mi@!=B7hi[VG<*:5iH9@eVmLC/B#ZNXmb:9:.nRPY60KTk&4-`YYo2;27+I1Y2!BusI@cq[ckl:d$pIZ-$_%ZTgA
%rQ+2c!Mq3;pDH?ES1o+V*aJsAikX%Gc(W(!H]=Ltd@'Lk[40/Hq[5Al]%>LC'h005'fhY8I5`u\]&s^4n][sB;qB14(6D;\2haRI
%blZ7$?55LLpum&7c.`qo[8.I51n?);Ccu6@o@^ff:pS09h]J>'Q(WSUCp);.kWFThUL#C^]ieP8a"!HoF#6c%*Uf$pRR7;hHcn!+
%RnNT:RTJ-[?MQH+p)+hChcr6Lc*i?,/\2m8[l";%C$-`M7;pj8n[>b/`9[+elcjGCR##%/r*%b;rb/u*b(j;2.1"2bNu?iF8qu$]
%L_]X>LP[8-/Ch/GFSm#KTuni,7;*74Y"Z/H4JYWo,m4krf6!Q.BIe)@,/S2,jCk)G@,`&2_?t!u.A1?4YFWb,l7oBF;Kutko:F/$
%&,1on=Q`Ae*!i7LD+_n,hM$+,'R%K`dgg5p`nad7;lAgF\L1nJ2+Kt3p>%P)+u;"a]bVeMb*,bB/-$EoR[^kcp]6g,/MCX.&b:-]
%>P"I:(_cP46Vh%jc%L_V`i:8LU#hS_R^Db&`-jDM-53Zbo7PRS)m[ZI*U_B*2p<qDOmeDmIBW:GRuQERB3Hd_2mUa^\BedUXL*(/
%+8(mSM<0r1[ACe:XCM'2pm.$WK_$(hWlFV?N'\<s$0SXTj`APQN%>pnV\#8)/0@7+bD#Oja7?d*d)@<Kq5e*%fTX1K_YJeLZ$\/N
%FE+:!53l<7H5*W331k=E+$G]j5+Kq[Q;87G(CK?S3^B0),%4)bi'bHgI-,EVhkkgb[l()>ZM#$R&s/7:53%r*e/P2!G*RJ(c5;B)
%;.ZU)T6["&Y<+`nHmi_=;N=U3F2D7Rg&,Jgfec<h<BQq*bFd$NT`m87!nE7V,%AMW&>.tpc5=,.5ePmML10!iHa)M>>BY`RlZKO!
%r8([pL[e8j/hLpZ7,:'b<6AK?aKH6n',kjLmf=MW+K5lp>M?`D#5>XqaIU@0m*;#K$.5QN_X8CIR]V<DN&Xe3m)&2Wr(H7bZ,;RH
%\T2R>775Es"3$ciGjVnlJLX^A<XsI$ZSP(u&uN+W'ZY3sc*bRF>Y!I"jfY;FW@]&X<%_it_]4!i=E%kL0ep%L&)oh[%V[LE,Wr6h
%.BPqVkYt6b3lObBGs#8F@OG[0'3"ZgFV+'%.&IO^ACg90i6fNr\BJID,h!m+//s*!W*:%/pSSf3!Mbr8Km''^c=72!DCIB2"g(n5
%<_m4%Z8'<>RSAHrFiUk?0aO6I#_%V=g0\>D%lEmaO%#.B'4ijFd_o^iC$in#Z:rL``$F-Z-@EjrQs8+1M@G0'e7EP5]'"lfR%CE[
%mI`cXc?WW#rDqGiPR+-M[gr&Hao8/9Fl$\QPJq'^b:*kK@'CNX"H2M&6]56kSn=:I4c$-p#:gRIRVCCrmskeu@`5O7B51F*%bS,?
%mnDd[(fJTO4r^U*AedYj.us7a\kh?F7\Oi?7XAbp9[d+=P2cOj(OO];;$b[!HF?sYQ@X,*_K+ANJSsl@jKs3`5!kOpFfXNDOO?<&
%k-G4o7'KNU&BiN<UBCB14k(jlHTLEB>h5C44t.6qgoZi<Q'(aZV%<9@N2jFi2`#35ep=Yad9CN3/8BY"N?P-H*A23B&N;JZ%3;cX
%-pWU,=#mYEaArd$Nq7D'$KiZk^6ij7GW8@^NQ^!<:cKM6$1!Re(P$b?V>ZMe9s$@Ug!3a%TXja8,!*f\Y7hK.+@+#Aj$cpRSsk1_
%iK7DZX<U%-81-s?(5n9uSD0FiFIE<>EYrOKidO&T+IL]q[:`!S^R<\Nf3iQHlbP#F(06*7[.Lb=`).C=r(LulRkM_+N8s1k%_E:e
%76N!ND=,Em:1kNiWf-JtQq^9]g+:NFk:;T1VH86iMk9/^@b)4@g!SlNOa3hXg1hl(>cYJ$bpkJe%SBqP1/Hp=Ws7ah3\kUsBA!#)
%o8H])_Q"jP>]ug!X,5&1&+[tNX^iSsiQ+.@F6b)HA?!Y_):/11LQ$)aa?84f=\WFu`CZc0F.pbL?kn7mYi"./Y</u'.]6,LRNkSe
%_"A=kd[parjq8cW>rjt;@RL<.LWfNDY#`M<Y&-bG+X!nED$#D4Y?D!2q?hc-]'Mh&HHJ%1Mm_u)A(B(<k]uX<`>V>4HNF(k/3OaW
%EN!kME4-hV(:`^3hJZMWA$=]/0@!js^#-^)4O)@jg2!T_3YKsNWjfoEUAF9M9%N%1BjAH$.P:qdBKb))14fNY^E0S$Mp^0hj&#6c
%crs0sL1K,uXB[+!#\P-Ci0cs?><\6/&!Ce4?'sKplkG46#'T4LK4Jn$)C0[9U*/.0mhGuInn[47"N_iQWsOpm5g'DS+t,7]K8Tf:
%clb]$T.33t7FLE9MT&T"(B-t,A><LmNR@*=ClB,dK?^q"(4JkPT#nFLlC^8A4-,qa^Mm#@iUU6%:u3[D:Bs12>2@Y\M(Kg6V_LE[
%3e4:]-r8TVrfZ>227V4>a.m`o$1lu%&(+H^T*mHQ7MgF%YuQV;VmYAlF5irbg@rU7]"3aW)*gnS=!cPTl*!oAZY)&=Ybmon_W`%b
%n64Y!%&6,$4_h52g.,H7qP:aLS9;-)a5'a\k4A?X&q^BG)=0"7P,K6okl'PiK>a],,[PD6!_;"X-WIagJ]-l@OEg`H'=c12i7f-6
%.sSp$NAq`frCkYaBm9'g,#YjFWDQPGP#C(J&U&@6j]G2l!oV)TN<,MX<guG%f@mb01_'/:q&c`Um[h=nXl<%87]j788o[RMQ9O['
%fdc@6'/shE16Jod;]c]c&HK<#H*TskGFlKU>+Gun_[3o>iJRIoL"Vs2cn#1bc74P))lNA;dtcaB<R$0p2F!tg/[JKIf"leM/n6_C
%)VFh.\8L$#kA`X^2oBUU1>$NII'BH:>$/7Bgck]a#6dja%a(JW`i7F0aU-%rdp8#eEhd@/PJ)d+'(h-I.PG714lk'pAZTu+$iaO3
%iV%*R96\N8F$nY$_*tq0qJ9q\A>c^eYaFVGb'rZb[=r+^CfAjI4M"R]?I,QGR!#Pi]q3XDc#:$Po<-=[S7uXZIONo_>LE3U>3'i7
%gA2<)5ukLSi+>5OO"MfRT(\"AbX\TdhTt$_[r><JUDtdZ&T;?(?>//6YI3#X,?1pk;LMLdD.]&aI<$^fW4p5f2Pu%R7TtC[[Td0J
%T=KMtV1F%aK6&a`Bs&kgccE.TnUt.Q@%Xd[H'Ss,F(4QD6!tcB9"'Vf(;%f/.^75IWmATsEga^,UN7KCHjS0b!rIq`CV"kq19f(Q
%W_]r5X<t0t.&q24@V,AN5,5&?QfT5n$O-6lfEG:rfOqQOWCION$g]\7PHgb);Ls6c;170[\Z!i?-EtfqJ6HetT+S$T_r@Kpqm<#.
%*+2e^fXCpX3=5%nNjPVaqm<$7-';dXfI,-')qF,WNV&Z$Yg5ie`V[np"8c1#1@Hs'$S31JBBfT,g;#mN'mI':I7?SErNc"05,27)
%mQ<!/m'G5*9eeD)@%S#lYZ6+ZJUL!T@Lp.G!rI)UL(!7%3hH&.):*sHq22V$a)%E;Tc3TD@$em^C%RYsh_5d*(=2"'>i]!:Mk<iR
%59#a&)6.Lo!!d$e@#M%/gJE;K3acK38-`gpZe+1.c"-:LF7?Y2\S%80Qg#/<6CN,AHst@O-[LGYSZ13iWY0A,)cN"ngdloa[49Y!
%?=fRJCgpoU/$g,=s0m+>*:#Sm>`=AJnit)^d@mC^_;p)l.u/-D^H#dXB9W?IiX`^fnioK_pItS$77*h-ao<,86I(ko:[oI4bl>.k
%]Td5!;FP`/r-q@bOJ$H"ST.;)1be$)Pqa>tULf%HZtF/fHqQsC*?"ZskY+@h@f!H@q-r4:0_%e+jW<YKN@c,XCt&+&HA7e2`aoc(
%LGSYWY\n)KC4MkN1P0cedc?ltV]dH"m<gZ*Yho;ZG<W7rgVfF=F,<CmNS3)%2i"FKed,=:C5)+'=J!qPcCK2_3=3W/4p<<bJj`aW
%&o\,tILd\/P4jFg=Gj!<#7P:>8:0A\c!HQH`&aGYqgM)MR:tIgao4->EPMs6jsWI",555S"9:%3Lp8\(R5$VAgg'QTDOiU`2D%9E
%Xp7"q?aeXhjRRnSc6$WV^mOsjP<7>sQe\j+6R\8`!nRMZ_S+,a+D,SA)8j7<'EB_5:/%=^i#2\!BX&*UXaUA&/A.,-F,NJfAG37[
%@2+F;HFt3BL/=OUHK4t@ld9.t5F5*WkOiRVRTskIhTFEE@G\c07J4Xjrlp>c]$u3;L]1uXr[k;4cB\.MAXbr(-$fN&Cc7<;obg%O
%]hhABC`GqAcCO^U2:(s_Q,i=sj3+el%7tt+naau#IJG`i[FB)0$Ujm_CJOHD]Blh5,FhC:i]`k8@]gj-pVtq^jk-=9"'Qu(=)V*Z
%J<l8i]s53(DU.JC)6Y'=/:smQfJ8b-enYNM[Hc=))RC:&$+oGJClBpriuEVLFBcA")GB0;ONP2idTcV$\XCW`#GAal#bNJ"J7@h$
%NMZ46IQCT&2M"g7dN$8)3=*_`ddo&4:QnL&j,;,'87c[f5i&_Be)ur4#u>?]SDE1;/(*:.r,$*31/B#PDqo1Q@X^U-AtAP4h6t>p
%TD4f"%>)$g>I@XrF`CE$[tRB$fkH\G"G4)lkD<)2:SVm#^6L"^7")ARA]/TDXh'Jcil?Jb#$$0:g3>Fe-6"dLn1]7qEJ@QaOnAk3
%O[BC//DrM*Lfd;g.+>Z%lQ,r$M3/a:q9>$p'>ptG9t)H[d`.Dp4)8&tOa3_d910j48.J[be9&R^\OiiYFZ&LC9WPG1H`JR5%pl0k
%kQ2?':G,@Gh;SqaD6m8)\emHmcD.24b?m$,C1H>ElgL!>A6u:IpV$*nN)^[^kJ'C/=QTS;[7\?'k00P2'C-SR?c'/'.Z?hQ>`8*l
%[IQ:hhJ+A/Ec'M[C;qe"P4*!+JJ"q`CL5Ij8)sH;7r9"02qgO8lr3[O1UU+aDBFA'PMn1MGJ9T3H_,]Z29a(9BO^r;\TE15>;#nM
%WK1qe&>Jc`P=:M"7Ju0BRb:BXduc)s<-LN)rCZa9U`^+APTG]TVd46jC#.(IA[[qKhFJDbq$apEe5-e@;FJpC_l%l_jt]\*K-md<
%I><n_+h3>f:-',6;9,eoU3-YWXi$tmWpCb8S;5,g9GOf-_W/"pTItld\2gM1W=PAuf+<nfee-b^KLG?\@(SGS^b#@nkUrbpNH,r(
%30t/Cjgs,'GGD"jRJ"JJnh'!E:I^=i0!.Oj-lLjI429nN/i9!R(1r<.dc7aCMiH1QnBu'3M=/7H/$Pq:<ac2Z0%"1'jY"-anVEK#
%:t9T%(QrHQ"f\m?"l2=7cK!LB[$m/?&(mEG1p&885C5B>'#'>p]`>BQQ<1"V\&:-OPMmWV^U\O3>Ij@LBeVgI1;3ITCsr#h52DX_
%B54BkX/!-q)Q%b%*bT+<cT/SY65u8)kD8RdgYd1=O^9WWWu+g0Nqs5TD7c&k^P]jqW35C9]4m@WK=p'0TL@&(UlbX77r5/AefQr.
%bdoO$`fYDBO9:A:2$/;?VoC]nYE:Gj<pS?t5;\.KmgNp=d6r%!D)M'_&5_'ocm=fd&K.L'@\,_6Sgu)6WQ&]nJ)`L6d:k_;na^cA
%P%`DQI68]8RKZ"jS]2o>GL-*&#p$u0ap7_h0^M+=S]2mX/*maXa]Ua#Q1oo`O@6#:Lb<>&?D\QZ(lr?N]W*"#>`hYp7sNT.M5PLV
%EQsWIOQC1@0j,[cRIV#T'iN$2i$Tm&e=#\DnrL>F'q4a$PpS$2*D$12A;(5"]:Y4e:`$D-Z]Z'7QHAU[4B\AK^Ar@KR[D7JUcWb/
%>4#'iZaX*iQLJjZ<7u)CMgO4C&ft3]AB7:tdi]VX4L@"H'+V^-KSS.3%NYF3fd/b&GcTB##nN:$5f:)]NA5"4KST0=H`eb*6_!Ji
%R\8h7G\EZ8cqs77,iR_!!G1jK4>\oji,"/a%P[K#4LEDDi,Y4Bdl-0Y,?s@%#nQb]ZQ6W!.4H$-GW:I7lnSkX=V@5^!mc,G/Xl1U
%H5RBCg'SH6>46k$En[#i%o(iOBXU9/^KE&FTs\6nf"9\^29R3&iEW'%M^LVd4eI\=*P*#Ba>Ze;BFVr5R'Juo6Sg.Wh0)ElZ:P_G
%?37K]_F*Y9@%@hXiX$-tFZJ$bH`;[Rf%CO=k-;Gf,s8P!OBbAo6YdKV`mD+u_F$iPEQ]^l<$Ka!fnb4/\QH_dKt+qr#nIKdNQH@B
%MM$fgEcg2pb<_`:KgRIl.)bM!"UP^!67u5;(fT-<&ft6Rct^38Q:Z=7IIi9K%'puk8U*5T*j*P-W&#"2*s*`94Ih>-/Y;IYOf6!A
%_S\O[Cko1ho+]Jqs,XDuq4\0+Xg9$OChrVg4>\aY0iC5QB).+8%PIid2W:@+g'r)VC(_Rk$U8l?>=HCrCZ3=\qdGV?LIP.1WZc_/
%l_#lhTf!Obe#9ei*a1o3&m.`B6gN*,B-(=_#nQ2,e^mrs(/K0gm.MZ:44H3qE5FuuHIQLfSDe1?-9SYYU2nA$$LOVSQFUaK(259,
%]OJ2f/nF:t+t^&Th:"[,6gJQD/g[T@Fb*Tufa]n%LLh)>1<gYH4.NRR/Xl1UN%'E"D:4FX*a/g5b&Z4a#nJmaS&oheCkQ%9iLtCU
%Y!(36&u=iVUK<dVG\EZ8E5o)&d=d;+H\Kb@Wo#G)afOhU9e>uF\kVDE85r_WYmA+q1JthS(d54`pX]?Cn4_6\E#b^/WeNQu(Rh#'
%K$"'Mp9A"t708L;:u\^JC]/j"k`VXeRLQ5M)XUgPZdHn?@?+.>>RK?$[3@4);-h`1eQHtSfmF3GH,+1UnNL%34d"Q]>]>&Y4!!,0
%^:4PWF[$+9WUtaccdG<C_j-;.F'O";X`9WtFI9*LS2@b0fBXB"g6:C(b@<9O>oe$j\bc+"Q+Q0*4mr/lGKS`pYC52SW:&i?>&1%k
%oCM?"f=2A>gl$FCj^*sqkG-G'"O2nFO+ZiIPj_t?VN$gYlqMAKS8^36:fD;BgSpcF:XZH"l_jV=:LIu0p1tt]h90`.>uhHEhENsN
%f$_qZhg2K>Gn<VeS[L_"M`Ur".+'g[%:^b="DPo)&qH<!?X7Mh)c?o(3u]$B'08'3hK:r8!8!YeSA0t:#r64@`Cq?5$R6%@`o8K^
%6Pu5?F"]W$rmBpT*4-Pub^USe&\V>MS3P/;jk'2L=#iG>)Qu@Q=qFBnTagF<j'*4A;^W)\[+t.9K]G-p\kY/&r^/;a.YVuF9"U$=
%W=3-]?`L.,1UoQ:I[<LCA4oNo;sPLN>3&"D6irFcj7-gCGuT.FK':UNOM;0h#a+-eK6rk&+)5ED(G(;!Ve'6.i.*IDB6FX<AsA(r
%JkLKjrV<"=f#'hLg'McHk'%YelNZ.`*/<_jS<$Y)YHLCQVcQn]co7&M\7e"ea$5].QlVilR3;KcQL"cQ!TVie3@R?lT#OY6IhOba
%G$`<#s2,HCqODuWDV$uqeFOonX!+YGU:^c90++1#j[D^gi?DER43G/@>Np#!<I)D80>\Y5n+)AM59;=^WNA%CB0iD6jZ1aYbp`%t
%m(4EM@d$sZ8o4#2%VK83X,38F5=o<c^@f.<!'_!W,-<"1L7_n.<&UsNf:ELrqst(BeP6eYcoHkecM2SU'`XtJg\24@2U-3g]5fTO
%I/,4c[oXaN<q%Il$=^.^U`%ImOb1+UHC(+t:tkr>h<(k!=N6(t,,&DGrTJo=SOS:j7THrZTJGh<$nfT9jeM/%SR?kmPh<%W:3+IS
%NXp2E_1-t!;$m*e6-+H`C?+*sc-;/=DM!Alq3:Dg_[ql*XR8R9)'O3tG^mMmF\lnH`p's=?,5?*DMlnuB=qj`-%E6e^BnguJ.X._
%)Y[A7GoskZ[=h![$2PK8@sUFl^\D^^lFRk"m_!@[4r?o(Ns/2.[oF8>M]'d_NMcc8@U%X&RU"p#OgdUDXSl<Q*Z]JX<L&]1F,h"M
%PK9'`c4l[^ji,L/JL%`$'I@OE9;omMJ&SPWLH,65Cj)(a+t\$;Q.'s?ZuG\;0)!k(h;g2k*keCN3.$8\K%^^KXe4eidE+(>/d]QI
%#Q.NGZ[2SP$43_m/5mJDGP>kHrC6D$^\r2&FP3gA2NAuJ*T,IYbnKkY+3gZfNc#G`8QYD$TD%\P$BY)SmTp*j#gkfYdiN+bE"Krb
%2L/59'#o[e7%!qQO5sf9`h20k?4E")OMhnLMW'=5ifLbq13E.HN(#2fX:PEcmFET@U52#2<0rE-UW3#'p]1U$ml@c_aeg46\ejsh
%VA%oL5$s&Ms1Jg^L_">/*Ur:0S`W;I+>BOb0]=I:CIX5;3s,tX01V61o`Y$Tp[Z#*ITau]@B,.%KU?G+Nj+ZU_?:kmPA2[@GD]!Q
%N6p29kY>!S7Cd[/BV2S*BHOKS'tDCN_q%d2'=:F]O(0D$OTjh"%3"oL^pgWhLQGPS>Bi.WPrYgD0B#n_LYs8'aTnObc1qhE_7+.q
%3ADTrm%KlQZr"F)$AR`^N#RVX($1(?Vu*FWrJ\6$#aD+?cp;!nnt/,)#3E0KUb-\GKXYa!n;*$<]0a;S"*Zl"Dt2@P:WZ`/?j?PV
%'";cL7D;YA+urfqo7HG5P?0o'GOK"feX43-FT-8QN>4oMLV%UEmHtu/`NAPt7ih#4`lafCl\Ctj.t##[Pf3H):bh:CQb.I.1V46%
%GY\@So$*`a]4fOo's`'))BTWl-M'UmY`_\;>9<24a\J64+3GSiP>9=u'je1M)L&1tIgEHI/H\dCORns_*f*"(7X?]IH2_j5X[h7R
%O_l59'WQ/2^:cXG3uBJV2AX1f+6ue_@p^X-!Yr)Ln)A$E_$ldpSTCR216,ka_f\"@ED&tAUYW7[8U(i=\+rXiQ4j*#iea+k`f?@5
%L_pW-QF'<hFNt]U<X!TYY<!9B'-@1qI2]9K_0>J24X$MH6@ScT:,8Efp%*_^*;*W_K'-oRnFk9DcA?o;dIDmMDlXqTXFr\Zc\iSt
%Ve[k[_\O*RCc;X[UA)rt*m<H`5)/gfCoR5.qTSZJUG(;9n&8T#CAYnM4EsC:jt<RG[Hu1f3MPl%h\[cu/#2R&K?t#mD`M[Bcn00q
%:kQ77fg0b&=)N\klabKRSQbH](u$IQSrYP/U-/-3H&L>$B!YhaNHXdBnO<mqf)B,QT,1kDL?f_^:i)i![i=U_60,6hF+8j.?H2W=
%M[BT=QWu12mubH;Km8ss8%EUOe>W<0=VciSnbC9Ikf-=]VO]W)2Zdj^6G!iNDEkioMNNg`;;lZ,hm,_a%dRSAj=0AurpqRUYMKPL
%Ae2SZAdF>DLj90;'<']:T9hpXm)=?E9I87G[>Sju,^&^N52UXbHIh2ahmmF'Gjs6(,?^5VdhN`NG):@'=u7G.C@5l:kr(mg:mqj=
%pG:u?9NV\j9t*4m%NRD_fB?k&mYKY/S'@tS9c<g,p>2)b[c+c2IYY$V5ZU!)i*G71KYE4!i2JTD)=7^C#`jM"?@"s;/7Q5B4Rb1'
%3#-o9pq&]-CA[1T:n<70qrFn:Q(u[3lud(b2)E:Y?^LrsC#&Jeb$H1W*g@V-.o5CUEVf*Jfe:We%*#q:T-Fi4%aaTj^d)dMBO4V9
%Cprp<hSu#hNak`+[+VB$6?98Y]hr$Rff<>Z=Bf!mb<',%W1!I*pA)1?f.T?YPZ`B<>@t[$[)LBTf76^SF=Yn*>MctY!R>4[1Kn6<
%TJU^UDJg4WlpL&8ctoXCY$&h932(GX^H9PkL0QXg5!LJ4pOi"R>\K5h(@TG1Vd)+LEftja)K(m2:T`)jYP#P*S2S\gZdI02,QDd.
%>aEk)n\&shj.]Is3a;nBYW[Eh$frV<d5B@O!u4rlh<\SM+o+=>.+ja/LiHK[0R?:opCcfP;QtNJT"DSJ)/W%2d3fjIk<8WH]r73b
%9lHhLhcY<H7hH%(bWK\OSdHSu#X\NN5L?@I:7L+m5dJB',>80UJ)U289WF+`N:@4f[W-k!Dr==#(l@V7+9qkaB=AC90BQqJ.p5s\
%<ES<a;P\EMh(c6U]YQ/-R3SEJV-FD>&C-gj*)6j-O="$O5T0(%L"jWLe1-+Yl_[tQmA%i2dalY9k:>ntrT'BZH]lL$e&E\Hh\c%K
%qb?WTg]#)G[K=s;_d0.NQRP$:at%B(6GL_&@ir4'grN#TgdcAYhiaD*Zf<mr9G1M#Z'.Zsa8-,A\[)s@m%>Aq;F;DNAM"jlllY>h
%nTk=T5M)7c-WeT0%>pS5H7-Q-SGgG>.o6[\#4-O?SQ<dXkM'njDAknQde^1EaFAO5O2XZ<4#Yo3NOIQUo6t2Se]B3*NmKr0J.]+*
%DQ!pRlSjegkpIEfn9tHL./e+bB44,o\,G]hNT+HQ;VD":r'c:G#BNW6Js$jWSTA\Zo2@\aAlWG!e##!"&O2!30\0gof',5"E57c%
%D$`h`%G6upFR*bZ7AfW4V_c$5,."+&h)\bZOf>7g^<Rbb`iD7O_DO^"$NZ3:-_B800C&r<@V&?6d5clP?>q'7!gDLJ*4p$>/b%9M
%IsFc)Gmr?!Tr:M&.Y,3Oji0WKp963jC(9i*+qK]k=KP#%\MJh+FaEkB?qGKa;,)@>Mh]X+6+F=g2-6O5.,bMSRkNr>hkB.Ti?JFS
%CG0BtF%Z5+)5Gba3;`D!Y-k.s1G-'?qGke]Sjj\4(UL%4LSOFjId@iN/EQNX1hic/(b%59)5f"AlRR'?%t:FG%b^=/)m#O"DW6Cq
%'?WAlS;JoePpV4ZjHF+e\Q)egGEBC+a1lL5Y-ot!6RkIZcf^TUp+HK.\Z>SIZVr^gIj;\OgEC$"_Nn+5l"*M/Qp\2jT.;iaH\$4?
%fDKTlcLEgr-s.O;G+W;HkiR(ga6[N!a%r4R4SA>?qBsQPSoE8JnoJCb:HaLR5Blhke5K`IT/c`="ggL>p@6Xb)r/c1r?.)(qoQ1*
%V]P:c5BZ\QrFV>$:Sn'4IS_o/@?Ep:*(#m`$!MpB&nIfcP92gi^P8EV+^==i*DjV#5i&EY'`gp,1?>)(A4RuUBD8^]ObMr+-H6/V
%XZK$3lJ=!)Y$*R)[5n$PqKHCp/Al_ceAIZ^cFt1\FR*6mAB'.lH$8Yj'FhLRB$b!dgcO)G]G2NQoe==:#8P6)JO.2_C;d"jiAK9n
%U@ATiYC$sFUO@OOq2M-gJY,,DIL#@P0)E*o"=N*:ikO?<d@amsdh`ue6*jr&Z8[=]V@A\T%YBE($e1-m\,XfbQ3[,#-]<6HlU&^]
%p;F'#m9]_o]"3W[WG*$dq:)scoaIQ@*57(X;#.^.AU2#e=rS9=Hugl?5s=3P)M3hTA>Dp_C:oWU2La;Af9cLQ?EC3`dG:,8&dC*4
%Z6FpVboP,gN/(M7`<15F;agaZ2G9-.*+(0dGf3.7opan5o\icc_lX[b+X9,5O<A/]I6NOAk5M=a$(8'`C.0*8Yg['8#J/"O__GEu
%H2j"YK^)KHmA$fs"'IPs%m"/"0#UUj:7co44:"lW-&2-XYo,9@$+!XM6/h4dR%Q!=0GJ4/J=Nad^`Z]O3J:fH!8iL*i1E!HcF5QB
%9(@0fiR6j;<72mB0b=tlX^0fuBoWE"$n*l\-eOEo$R$&.AOt"/2@7g%_!n>aBsc0f(HL.S&.F:UkCnHfYdCq`Zgk<]ahi!h(*F*m
%jCnsRm=ZO88t2\VMFer^fp?+M2YAa@nm$j^I@)o-Ub)d<V+h=kTETp=^^PraSm8[Jfht^up9j#[.LC.WX1Zk`2H;0%1qt8-ZP]%d
%RL?-[AdQA.d[ZK4?UJOcXaRqd/dS5WL;?^?63GV3g4BD]UGRBH=A%':_nd\enJ34m.0*fSX9B0^D:4=b,G<J^K2.L1adIT[1I;>;
%?tg::L$9q$0d?]H[&N.p1RiJod7kNdfcY]6+IH1sg;s5:lumfE^5(a5HT4EmH:"P/&D"/G%La899[l6aIZHYEfnrcKg3hKJ"!D3>
%<jZ)2Q\of'kM[5:j"*.e30"Xqm1=?ETG"?.%pe7KT=(cIptAM`d7PQMN0%ZUX<H%c,\YO&%\cj$V[ui9VI>P1n'm:rSb*O]Y].7f
%&lK4UUc:VfR,NYN5]/G53qLqsf#p.OfRT.TYeGgTKnK(XdDuAgS^dt<R9_?j#72n^)Tc004Q9AKCG6FoE#:JHj+6jCfbsE3Wd\5N
%$F(W91iY-bm#`^]r4Q34XW5HHk5Hu'1*<hJ0H5"uk)OheHfC>n4]IZu1pIp46#Pj=Y"uFlT4?U_XRCuAJm(0"1T;S0=[*E>AbYI.
%00h@\GAtSpF&0>E#iARe->n">LT$WW/g`kP<P*UVT7nsRE+iFg^rqP!3dl[+0qlapiO?`rUo@L_-^)EGL8*M;qN7.\I&,0!;bl*4
%XaGgD@ckQW4F&VG?V8O\S_(g8ajgQThF%J9Pkk#=3XLqKeS)EibK>sIN<uB\\E=@jP5F%nkJJIm8-t9.%>_m]_jfmIK'UZO]:j6W
%@PBeF/PtRsh];f*o>>]u(O%]PHMm#=O;<g'")@RM-o5"SA4ii[7_'C;]b<k`B6h>7(N?6W:T2[TLEk\n?s1P@;6or?j4jTk^s?6W
%Z#rH'F`VH-)HJ,I!5jdGHl^G$-ZGWoE0Ju^nMbJY6DXoGC$_lZeu6'/bZn3oo-;6\Gr`f?m<YhjCZ])qE',+kbP<>ZghC0mE1->i
%KET-gpTrT]1$7M[ZONo)FPlr9pJU<+C)U7\F>r0[rQ5dg`Zko?E.C&Qp@N@>-J+6K)i\#ZhF$4L9Jrm?J\o;fOOh*KBpM+";rTK%
%JlE&jYY"ZWNkl3H2%(HSi4%tt<ie;Jb+5a\[M_GMUgZ\RhIuZOm/Td[L_W(-q.bR5'1#9"7@Z3VU*X$TfcdGq_B30,[srHDDT[sG
%qC>?DZ?O'lLT_;_Pc!Qh+5Z:SY#Sjf\D^NH"(KC.QPpK+qbc'?HpK&H]C*)(*k4'P#1n_!i`u1je7Tt7)(Bsn`\q?f7\,pd\'Q1\
%Jeufl\<J1in@qKKXt(Q\QH-8h4;>O3"[;SV;$$Y:L;*$^0;[r2E8SFD%n>u=&F^[9!?I4TL4-FYll8O-nUl6tVqYZuoR\`bWRO->
%BFKqGRap,Pi-u:K$t/9:)`%YbZ,%,^r#7@K9$kJp(u)T6/!tg0^o_]B:b.[!%(I$lM.[\A3G4H*6Y7C2)Is"'q1M<.]j1bG1o?@>
%;PIK$eCf^%M4nr$!Pq!RR[3O8')*KFcI8ab3HneS^_`oA'sq0cNV7O"`Vn`V<O#AKHrAQTQMRT%TaN;.\T(Z9S^]JkZET.PLE_C]
%>\idnah-2Y[437GV]-ng52RfhCG4/IhnN+Nar=AB4Rd4jB+2!`JUCf)S?45A#&r#Rl&JTQ#fl"4)Y0J@49ZX0H(Deg8^4st$M[dQ
%B]f))/Ii3IMK"oq]:5J_,,T-Z!=%V\dgB>oK^YK%@DRLV.O:WuJ`!<o'e64<Su>M152:4*B?;a75$KfaVO%j&100fVI5?_uS(f/Q
%l&MY*b97/7&,8%FEZ,)ti_=fEGjPmXnFJgZC-Y0Rd`tuY$eH66W+6Y$.ep^e0c0=I'Gb`i[h$t"B=oXd\ZYEE7IBWIkD(US]7>$A
%G.<FVk\r6Z,CCnHTSSg5q+Tl^:.;i'dR:Uf4/2@0b(mXuIVUhCY._11B!5LU-X+-Ao?GoZnQ`chc;_e["UrA:@ub>JqudR64I'3j
%0^BN854f&)X/ohT(QMg=Pubt3BGWP-7<Z:L20[HQ(7/Te17#QIkMe*Tefl2,.XZMjmLn#h(F8ZljNsnfbmC66Y<A]TIq5h*+^`Y`
%":4Jam8slsGSsHhUn_EEYpitlRhjAbPiEIs#7)6N`5T4/mN>MK1INK^Hu&,k?5DqpUM69^i7YYJn8CGPBfq0ZeYfUjTh=Q'5ljso
%6HqKTKN,&Xm8V>n^/aZHJn1Z&4TN>oktjej+H9b_o9L,48:Z;M<Wqh=o8j]ESc*&+/.'7FL.BD22NL="Z/ECd<!@bA/-C(sbqPVS
%q#?9\,nF''hKI^j`No)(Y>^A"r%-:c2-*?Dn\ooe!GZk:4gQlQTElY8EA'7Xi<<ACb$SDrh;*.WR-33dp+O7k<6>,)%jT)WTtMBZ
%]8YAl>>&a80)<LA94_mQ9hR9$3b:r7Z,IT`eQf/.k\^N-XiujU>C5H6J*b0,hu*QL&2>^7D!au/^RC]s#[nYc1_X7W\UN#`5=CuY
%kD3@l74HJL-37PoJE%KPU;0V9/o:,p`:r)L._`OUr15^="I;9I5$$.[!Uid'C?2aLm;/^sSLeYCS#hG\<R\PQne^7*L8Qbh<M^]K
%8qEIIe:*LO;6h\?;]VLX>oJE"BAn,+ba$UFO@_E@fn%>X!Qc^fBP(&S[gO.)oTsC1*DT`o/UT,U9WWim;(og@j4rtj7M3'.L7&L]
%rB/C&PT0,i3cu4cggO#VB6csJ[q%2tQNJ2ZQ\42?*q*5^jOSDhY\N!CQl<%m'ta)NN@9l]H)W@QQT<@EJ8uVtd%jVes.)E*hG.K>
%,Q;u?%LA&tSHCiMiW$()7V]mTru.8am+\oZZ[k7^a>+^jFa[_n`#(dAcYPF-:rI/a,H.3eW-2jUQ\W6'%ZQ[NrZl*na9%VW042t)
%l\O6h34<P<Ct^V\E>V\IK1Kes'#en`rAD):k-r##gu2BZ_hWW;H$XI:X^4iJp]\UX:6'F:-/p`R*U`FgZn+=6HjT5KhT6r]IT00K
%+d$]nRcJMIQ'n+9H&lcs?J6l=D3AndKMG0EAZST]lqt]!<Z,\:$rI@5Y;b^1-?a9mZH=#PA4VLhohq>bDi,B7AW1PIPYEo$`Ee$p
%`nD]u;Y&g"BpGq]agfhCg#]:j(+'nr4N("UX^Pel.MI[_6G:XC/7rK$pgt:!h*+^NY7_q')jYVhZ-q]2Y+Z'58V>oN#/>6E9ff+b
%2Z>%eNu(ajQfE5mh_1(N:'/C!Y8RT'VZ.Rb-q)7dg/=*Y5(=8Q>d=B]1SU"J6>/*l1V9$nLg)rt4EE=I5>*kK5BA_c>)iCF"d'^'
%4YTp3g0<l^ns"l]V&3Z"Tf'??I2@pH[dbd\iG&'0lKaS9'[$=.lZJj)kY;MF"&G2^7q2,sZ*RV"nFrMu:q?G2Qoit],.\A\i;8oK
%'!#Z$("P+GiJD*/W:6qPO!;8d\$_\-L370Ca'"?C\Wg&G<\-hgO5SHMidJ@WNBZ4fn9l\8r+Lh_)7$'7q2n=0oWhjr9CjB;KNu>2
%\hu^hPd^?)\l4&'$W+hoa]AhsbLl"/[%>8h2=h!n[jGpf:oCX&m`>.H)6p!6q%:i14\JtI+"8ocQ7U,i5FQIY\^s=1S3>htq%4s)
%[XUY)%-J032^a]a!IgmYRY1.6HSJS/QOq>b/'dXZ5l)$$oC`1LDX7'0+H<ZPm0%-*'),RC,$oD4;?IAGH[^DHZG<ai&prRt\=+#Q
%a!@.k,!?].;)<0;p<7&eBl8;]P2$u4h7L2J%51C.9h.1mHKBETs#dZS6)tCsQ"1Dm$h.pT.UV6.%tt9a%M;QQ7b,C=1onO,S>IIl
%;q!A_ni*L#E*aX^-j%**L=CFI[tZMlKCC^GcH7eT*0]30Btoi$'6^B4NAp)o2Q2jiB!VhEb$jrH?$;=^J["C].0iI<&4n!O'D/U`
%!-#l\S!,Z4J95WV&gI/]XHp2FY^H4*%F?DB<f>m6["Ygo%[[N_5!&3)QG>qZZl^H4khh3kjm4r3GW&DT"b'ZEg>-Ir3V8H*rNCqL
%7/<(Qhh?HC&C??6k%^3I_6%cPjC`m";omLu[NX=)iB;HCb['?,36+Wpa?Kg!C$M2]XcfsN8lWn!Kq7X49r4@,e^.M:=CDI-]SMCf
%6sS`TEI+RFRM,iHIpl+s6s;YWp`#dgels,t+DM_fX@HZ:iN_JY^HfSU54Yhd;:nktmB`c=nnFd5lMIrhT5QI;BRCn7ZK(<'b>igH
%\.9CNc(-H*,PFLF&"%_I9#_Q*T8Fg-m',P2H&+d?JbjBfndQ#WjI=S=<:3K!cX[XI-&"@dgnVgd=1)+Wh&Kd5GP5rbZ8VUpLYNY/
%RUN,+\V8]^1#YshL_:88igrO"7V<)q_FJ5h'ES3pA,)D-ER<%m#i"=C*<glX%^@So[tWaGP5IPKUOC=g]f<J;%L7aKK_s\6k^#XQ
%=#ruPkO@)Lk.r`#lK`Nb;9<X\V<!"RJ?&a]P99TT;b#$Yr*AOn#S9KlV:/5=>6h*nHNd)u30<9djJ3)F-RC+mf3\$Z>'TkeF``QO
%kG5p#BnupB`D]-Ph3V"Joc`U?r>(;i@1=T]fuV<mE=bp`*"qY"D`J]F_UrO"_=Q=;^ICm>R7bNTW<=laUDMCN1ccY"hn"4p>#:"e
%7<8\r?gi1CjcLfo8\\&YKD+q1l;-1QG;OMH3&jIJMc+oKOk_*p01dYc*2\[Gne9EpDF^MGibQ-r=^AepD&-Kh]03jZ]m"_o%3FPK
%6j*FnI^fYT!m.e2$#S;>aQ5t/Hgd0=038$jb>Jr0T1%[sM;'=#+g[sfqG*\qXSW$h^t1D+OJEc.l8So2mmrhFC;aZ-Gd>nnpj(0=
%9@Wl9:XOscf1^WANGh!?k0p(FfK&.pQQ$C%eBS8c+d'=G*:ff4[lm4OO++6oc%tjW7M0;lI#:N-TSHoW9(793d=[?)rgE;-`*3\O
%;FN0,@A&<4O_(NpAhReBf3ZnOL^_KEp3))4$\jT,iR8!#A753$hEdB##c/16hC5Xc!0lFe%?-DcR&2BfO@Bpo>H]%)9g4@9YXcoG
%+b])iMI'QWABF5j4m;'3<X%?qYmKVs)/o'HQ#-T#9"@IsWYFG5VeCP*:8:49JFp85B:UDj"51',*^h<6*qlmFa%Vb9Mg%$YdWs6-
%Y3uC*%Q9oHQj\)h8`Q&1ef,J9j)>E)F'466@*a.qX5ZEXf-?1h\%KAW?3qMs/GOROFZI3C1WB\-%$@qmM-*#s[oPXaWP<T!nZCMr
%++8Lol)*!W(A?/]!h-;n'75G[+.X7'60J"6,#!Xp8:lbKhTFj=k6!)]Hfc1pJWY1A4!O:Ufd"?k>Vp`_n[E>3rVT8IP5RYS=(O5]
%"$48UB9V'U]5H>eA1#VBdO_^goW?6Yh`@cbe#%m'PE4?iGN+hPEkoH!S\,H9*LC,n2q,(_<8;5IPE9ek2Q3O,c@.2=[Eg29Fl43/
%mR$5u+:m;bCO9:mehXN/KBQr&<$._C-IqNQAV4R%o[JXV(UlRBa2tarBC)dlD3:J*_ApTO4,]1;E4W99`^jVS-/0j%N'I#lDP[Uq
%W5^\b'J.<]NduRKY^?[)4RWT37OjaEB'LjYO=TjQlCsKUDgc@uOt*Z>3M\f-lBc<HV\=r4V4?77S!A(ti8jf^3j,G:?I9@V"PG$5
%B7)GR$+]O7&qX/=)%`>]""BL[,cVD!L8b5U\YbQia\%:F(VR5t32d8kA2-r/jL@!]F5[Dp]V$($>jI%1#n0$+,Le=0?j$iVqk]s3
%^PX[m-`ULRpt=BThL7o->\+J./_WlXhHIJ6gi(G/C[n>5`pN.r:4^gcB`sDfNuB<q%SDf:@5,RfLjp5GVM$:RAFda$JMJJ2g!dGS
%@VK*0\)9lr?sa65?h>*?AOuG['q1P9<sU9WHGB\&:F>h)i$>Gk]d>?lGhE"1'@jq7_3H'-m<p$.p5W:^."A-\[Qt*(%jS>*,9at:
%eBHF@iPL$+=iNfSXMI8EA:)'a@"Ub^Ic5XHbln*jF09k-o_4g,?U!GSM'%c_mI,8(]&^m"P:bM4bqoV-AI69#9SOhnU;\%f#WRNH
%#(WBQeBC60_]P>J'<jT3@>'sf849r$M90SJJOJ\iKR=3$^u1M)/`$b`CT]ad6@RC+DS=-ANSl)s=:g2g?j4b$'Jb6uLb+@>)[\ZW
%U$74ORh=s8Q+;FqKi"HH84s>@P=:KX@.4X[i?FVGRB;U5+N$aOX5%0s<]MXCb!cDI\W+>5I7DDF^B?]r7El.Xfsmd=$qNa"Q8$O]
%`"BNn8rMC7ML?jgW'mL>9,QHIlScnlPd]L8":(It9!df<B]"Y]D"kFN,QL;\EDZg'#\l<_7?AZP\-\1;6J8/IqlpiL!<?_MK2$ZS
%[4aKOGuP9.2ebDg'0'du2!kG=1Yp36=[+lddknqn7CRZPT=HV7O>`Q.-;LRpk1ei"5(6RMCdcUEack855];$<h,)Wmk5=UGlDsXS
%gX!+NW-1M-q^#!=Nt3RN\pD=7PM1u"?RF[NH8[MW.sa,Q8JTs((./,+G6Cg\qQ<oTf\(NnDRH[off)>eB"P'ASXC:Jc'IoE`4i2A
%*>dM&:Z#mYkI98K`mCp'ct0%$-N)S$;gB-h$6s,`NF*5LE"Zd?%5Gtr.#5KtRf7-h$W>FU#r#NH(#\7@;PZ22@3(l=^'u%V#&Vf4
%3OuqkD^PklkaWkiI(O]^Io<fDqZgFk[k%b!F!Nc2&H%AY7lf"-07sj_QOl&W$Dm^Ifkp/'_baFdk5_EX1Dd?4aAl1EdKgoI#TSKX
%N396Rm+#Sn\`?]08,R9&pQlrSd.e`f#3$Gaa9;OMo-ob"L*7G.=PX/[EC5Oe.,H&-P9%_68^I$e]t-JD9coru"CB4-Cf!&<oL!j*
%HeJq>pCqKk!0HpeI(CIXH8U^^DbMf4n/),,6?Dl&e")imcA1s7L5f/S1bE;r0/oJSHMKnA(O6DLcJ#HZm/3s=>KFc`ZhC@mD.%$`
%gmfEVbdr(WOqk_Xe78,uEVgnS^D36\ambKbb?]VZo\DMZ>Wn@1]sW%Oip+oqC5'"hOElV#JTocu3uKAEO(lt&j-i=La$*`OiYVhM
%$VZ";*5l+JVUVF0qo![sr%?q*>T/*$08ffn0]CWX68ABL`&q-.0g^dRF:::6&D9]X:2cCB83]jl:Q@?V;<mnWZ)-L0("q$<*#[cQ
%HSKmc?ps1RJ]EX-FQW]!Qk.`!^_DgGnn<Q1a_-GKrsVa#HfRFja3M&@rH*^XCf!:AUg1N0%[4G;EKkHq0*\gP![kluR>I@>>\.Pg
%>36eE>_8RN*)AIbr=402M&pT08!hY73lFJHNP+o7mFRdk,fEH'2u/M%s1r>'mH0+e>DU>IO#T8([9UKArq7H6h&l[lf0B8d^Ue^*
%]*:#t,FTQGMV\!%46SUn5MR.Sm.Rqi5:F*!DRDq9e_#'B:uAbeWe+RSn`a]hHAkl\kK^oam;K.7VQO:?iVP(rlOCRjNhNpHi7B.K
%p48h6k2n\uZ2<L:F*CmQjb<#eAAT@J`?Oi:kl/H6KOb/a6D@LCQAPrfK-t]!Su+^Jor<O5,SC(g.e!c;;,;UN$7)T"NeF2If.RDN
%kH81?DP,g7Hc$>Ya.qS3A0f/BibjlS7T(EOMt/DO`$2I.3fY0B`/#h]%%kXaHNru\fJkgsjfZD>LRX4?h7lfDr]N;]l1u\[KhbU+
%@"0'3^,58I6'IYA:Zm@E38V4"T*MBH#_l!/R^237JVUQ-U+EU;LKl+L-Y*Y;WOi6$!a(t_3so:%i4T-6&-$Hp8I,3SoK,0+\YGLT
%_<?[F5]B5eDQZ4g2LF9B\D)M.D@fV`01-O^RRm-Fa953ap-P?VKt>2ZX?Fge.$$2pPb56K<1ba"_W4K5TfVAYGXR@aadf8[7B"OS
%jJeH(F*pA_N.ECuN/`B:aF$GZ;(3q]A;dDu'5<l@W=\;M*CR:\Kr?H?5YTC^RQf1f9^"sJ.E4Uei/8'hH)?@qPa!>s`DhZ`A0e/C
%,CQGAW0X4j28pDg!o=$d&BQ^k7&?[fOY*Fs7*@Tm+#SJDK;b*3&2hF+Lgk1DY3@__7(":oW$u=LiA'2\\C!@W@'g+#?GD>^XP^RW
%N6g,:goM\ObRu1LVSf97P"q"6Qi]"^$'B=5$W2AMKufK(&@KJVLcdW&YiTLYLh]Kg;,`F)(nVskq3`:5>YF)1@OadQ1!#i<$;u>O
%K?9@S5d^b5W%h7=e,^lAoIuPn1.\hj!tfSdI6Zs`4\W8b$rg/%Kdq+!$XA.XK;k04+>q+TLuRdBkqbIj;)`Mi0ggbQA_7'J=baBC
%gaj]DpLbB'cXe!!32]B5o$l$!3c(fBl-sC(W=T_*#`r5GoU-2`>*;5%'Or8_B$#fldmHgna@B0&KpWR*2sD*<r(mW^.8,5,$SkOW
%1NJcY9FiqUQ)h:2</<!>J.]m6FYK5h'WAG_"#W8(kOb/`Am@:XRUQ]DPQA^e+iKTd@`f6kRPu(or(mW^.8,5,$Q;A9^0qOKi>gRG
%F0cA8n'=&)T?B:T>\[m.Q(Md\acn(BUFi?0jO5pEYP_'!;(Y?_C5Vt21'7M&I1p]e,i%#TV<Hhl6.s*(B/,ED7V#d?9$5o#nk;_2
%]sfm.+TA-RgkmS@3'>0cngKc8ZtnkemPsGh0/#-87;*jd7?THt7QMVb^YD+WAuP_r>i0+A(6'$$G%P989SY&^q2*g4H#79X8<JTp
%geITA:OU1,Rc.5k_!@C*l-tD%8IJ(+'@=Tg`Y-Ar0hrd((0d5dQ;.sP&U>R!#&6Os-R/g+QmpQOTf@se(c1`AI]8AB@R;AN0fiA?
%cPU-<6dsHg)HS2ThukY:?Xa<o(8E+N4[[^f,lu_FqEWfc(`-8N=7-iP,h"_+09W-BE0Apf]&`p$bj67+Bo4ZBA\)KIWg'W:WYB$;
%Z:,M,s'KPR\(Vr5"lT9ohSG[JGL7![IpPn6?r5K(h#ka`Cn]CRG'j06?':Bbe*UW1jlts+6'IM&j%:MeeZXjTedPAfjTr7pQGP0h
%3&\%iaaudW7&[Nagof^G26kNN3M7uo&F-@H/RG$7qSs8q+["B\;[fQY=9QIeXI#6PRE!LGYZj'uRonm>)5-D(*21Bp8E!QX71]m?
%/BoAM>JbeJ0CnR:TY;&[%g@ssWC2/]P>jkiN*<9dh]kZ\,a7HV^i:^KZbZmKd;9W6k\h6PQi^r\%"ZF>/la)XEZ5CWdR.k&_l0gI
%YOGei:uIQ`XADh]&SR0PSMNM[rK@FF;\-96L/DHGOjVAIk[e;s1-0`pkG%`'far<^63/pc66abn@Ai.ER=A7mU-/_mlM,ige>N>P
%1Om*h_jlp;Er"PUqt+&M0?]-[\+=UqNKn*M"&l=1S.bKSlaf.@%VLnd*D]s*-=qC=[mRI$habSi4T>Rkn!flE1TAr72.Nf<AN,Y*
%dE5HUp_ht2-erie]:2f7]#)X6Hg(hi(:n)T;Dn-EYP&4W,]8A%UJ@hte`3i/lE@#JlTr4;3Z3+sViKu!g]b%;o(hhLjpU4*.`_~>
%AI9_PrivateDataEnd

%%EndDocument
 @endspecial 191 x Fo(Fig)o(.)h(S2.)33 b Fn(The)18 b(distrib)o(ution)k
(of)d(MSE)f(for)h(the)h(results)g(from)f(the)g(proposed)h(method)2015
2945 y(and)e(the)f(old)h(method)g(respecti)n(v)o(ely)l(,)i(o)o(v)o(er)e
(the)f(95)g(data)i(sets.)p Black 2015 3209 a Fl(S1.2)103
b(Band)21 b(annotation)e(o)o(v)o(er)g(all)i(pr)o(epar)o(ed)e(data)h
(sets)2015 3325 y Fk(The)e(accurac)o(y)h(of)f(band)h(locations)g
(determined)f(by)h(the)f(proposed)h(method)2015 3416
y(w)o(as)e(discussed)g(and)g(assessed)h(with)e(95)h(data)f(sets)h(in)f
(Section)g(3.1)h(and)g(with)2015 3508 y(additional)k(data)f(sets)f(in)h
(Section)g(3.5.)g(All)f(the)h(results)g(from)g(e)o(xperiments)2015
3599 y(in)f(Section)f(3.1)h(and)g(Section)f(3.5)h(are)g(pro)o(vided)g
(respecti)n(v)o(ely)h(in)e(T)-6 b(able)19 b(S1)2015 3690
y(and)h(in)f(T)-6 b(able)18 b(S2.)2015 3881 y Fl(S1.3)103
b(Pr)o(oposed)19 b(method)i(vs.)f(Earlier)g(HiT)-6 b(race)20
b(band)2248 3981 y(annotation)f(method)2015 4097 y Fk(W)m(ith)33
b Fi(E)o Fk(-score)h(as)f(a)g(quality)h(indicator)g(for)f(its)f
(results,)40 b(the)34 b(proposed)2015 4188 y(method)29
b(becomes)g(more)f(practical)g(compared)h(to)f(the)f(original)h(method)
2015 4280 y(pro)o(vided)36 b(by)g(HiT)m(race-W)-6 b(eb)34
b(\(Kim)h Fi(et)f(al.)p Fk(,)g(2013\).)44 b(Furthermore,)e(the)2015
4371 y(accurac)o(y)21 b(of)g(results)f(impro)o(v)o(ed)h(\(about)f
(40\045)h(in)f(terms)g(of)g(median)h(MSE\))2015 4462
y(in)e(the)g(proposed)i(method)e(as)g(sho)n(wn)h(in)f(Figure)g(S2.)2015
4653 y Fl(S1.4)103 b(P)n(eak-ar)o(ea)18 b(quanti\002cation)i
(experiment)f(r)o(esults)2015 4769 y Fk(The)h(in\003uence)h(of)f
(accurac)o(y)h(in)f(band)h(annotation)g(on)g(the)f(results)g(of)g(peak)
2015 4861 y(decon)m(v)o(olution)35 b(w)o(as)e(discussed)g(in)g(Section)
g(3.3)g(and)g(a)g(representati)n(v)o(e)2015 4952 y(result)19
b(w)o(as)g(presented)h(in)f(Fig.4.)f(All)g(the)h(results)g(are)g
(listed)f(in)h(T)-6 b(able)19 b(S3.)p Black -152 5542
4185 9 v -133 5640 a Fh(c)-152 5642 y Fg(\015)e Fh(Oxf)n(ord)g(Univ)o
(ersity)g(Press)g(2012.)3293 b Ff(1)p Black eop end
%%Page: 2 2
TeXDict begin 2 1 bop Black -133 -253 a Fe(Lee)18 b(et)h(al)p
-133 -170 4185 5 v Black 750 43 a Fk(T)-6 b(able)33 b(S1:)39
b(Name)32 b(of)h(data)g(set)f(and)i(corresponding)g(results)f(respecti)
n(v)o(ely)g(from)g(the)750 135 y(proposed)21 b(method)f(and)f(QuShape,)
g(along)h(with)f Fi(E)o Fk(-score.)2935 306 y(MSE)595
397 y(Data)g(Set)f(Name)1347 b Fi(E)p Fk(-score)77 b(proposed)i
(QuShape)p 557 429 2806 5 v 557 429 V 595 493 a(Fragments)19
b(of)g(Old)g(W)m(inners)1052 b(1.00)198 b(0.82)221 b(2.38)595
584 y(FNM)19 b(Apatamet)g(1st)g(try)1169 b(1.00)198 b(0.57)221
b(0.86)595 676 y(Fre)o(yw)o(a)19 b(-)g(Cross)f(FMN)h(-)g(Reshiram)864
b(1.00)198 b(0.24)221 b(0.68)595 767 y(wisda)o(v)o(e')l(s)19
b(apatamer)g(#1)1171 b(1.00)198 b(0.26)221 b(0.38)595
858 y(Fisk)o(ers)19 b(single)g(aptamer)g(2)1121 b(0.93)198
b(1.43)221 b(1.49)595 950 y(Starry')l(s)18 b(Single)h(III)1312
b(1.00)198 b(0.11)221 b(1.78)595 1041 y(fold)19 b(vs)g(shapes)1426
b(1.00)198 b(0.18)221 b(0.15)595 1132 y(V)l(iennaRN)m(A)19
b(design)h(01)1175 b(0.84)198 b(0.58)221 b(0.74)595 1224
y(V)l(iennaRN)m(A)19 b(design)h(03)1175 b(0.95)198 b(0.15)221
b(1.11)595 1315 y(V)l(iennaRN)m(A)19 b(design)h(04)1175
b(1.00)198 b(0.09)221 b(0.33)595 1406 y(NUP)-7 b(A)m(CK)18
b(design)i(02)1244 b(0.58)198 b(4.60)k(66.49)595 1498
y(NUP)-7 b(A)m(CK)18 b(design)i(04)1244 b(0.75)198 b(3.18)221
b(1.88)595 1589 y(Fre)o(yw)o(a)19 b(-)g(Cross)f(FMN)h(R2)g(-)f(Zekrom)
809 b(0.96)198 b(0.98)221 b(1.10)595 1680 y(T)-6 b(adpole)20
b(2.0)1497 b(1.00)198 b(0.10)221 b(0.46)595 1772 y(Kiwi)1698
b(1.00)198 b(0.11)221 b(0.51)595 1863 y(LR)m(Opp)o(y)20
b(93.4\045)f(FMN)1198 b(0.97)198 b(0.09)221 b(1.26)595
1954 y(EteRN)m(A)18 b(ensemble)i(design)g(01)g(\(L2\))833
b(0.73)198 b(4.27)221 b(4.95)595 2045 y(EteRN)m(A)18
b(ensemble)i(design)g(02)g(\(L2\))833 b(1.00)198 b(0.19)221
b(7.60)595 2137 y(EteRN)m(A)18 b(ensemble)i(design)g(03)g(\(L2\))833
b(0.94)198 b(0.22)221 b(0.74)595 2228 y(EteRN)m(A)18
b(ensemble)i(design)g(04)g(\(L2\))833 b(0.94)198 b(0.39)221
b(0.34)595 2319 y(EteRN)m(A)18 b(ensemble)i(design)g(05)g(\(sparse)f
(5\))674 b(0.97)198 b(0.17)221 b(0.55)595 2411 y(EteRN)m(A)18
b(ensemble)i(design)g(06)g(\(sparse)f(5\))674 b(0.91)198
b(0.58)221 b(1.70)595 2502 y(EteRN)m(A)18 b(ensemble)i(design)g(07)g
(\(sparse)f(5\))674 b(0.97)198 b(0.37)221 b(6.38)595
2593 y(EteRN)m(A)18 b(ensemble)i(design)g(08)g(\(sparse)f(5\))674
b(0.94)198 b(0.75)221 b(0.18)595 2685 y(EteRN)m(A)18
b(ensemble)i(design)g(09)g(\(con)m(v)o(entional\))536
b(0.94)198 b(1.69)221 b(1.06)595 2776 y(EteRN)m(A)18
b(ensemble)i(design)g(10)g(\(con)m(v)o(entional\))536
b(0.85)198 b(1.01)221 b(1.48)595 2867 y(EteRN)m(A)18
b(ensemble)i(design)g(11)g(\(con)m(v)o(entional\))536
b(0.97)198 b(0.17)221 b(0.58)595 2959 y(EteRN)m(A)18
b(ensemble)i(design)g(12)g(\(con)m(v)o(entional\))536
b(1.00)198 b(0.23)221 b(0.36)595 3050 y(Brourd)19 b(-)g(FMN)m(A)g(1)
1305 b(1.00)198 b(0.09)221 b(0.40)595 3141 y(The)19 b(Re)n(v)o(olution)
g(of)g(the)g(Mobile)h(Archer)733 b(1.00)198 b(0.19)221
b(0.75)595 3233 y(Fragments)19 b(of)g(old)g(W)m(inners)g(\(3\))963
b(0.90)198 b(0.77)221 b(5.13)595 3324 y(Smart)18 b(Solution)1398
b(1.00)198 b(0.06)221 b(0.07)595 3415 y(Lump)19 b(In)g(My)h(Throat)1248
b(0.94)198 b(0.75)221 b(7.12)595 3507 y(JP-14-0-17)20
b(\(FMN-SBS)d(II\))1059 b(0.94)198 b(0.33)221 b(0.30)595
3598 y(SBSII-2)1602 b(0.87)198 b(0.53)221 b(6.44)595
3689 y(Mod)20 b(of)f(Quasispecies)h(design)f(Fragments)h(of)e(old)i
(winners)219 b(0.87)198 b(0.47)221 b(7.35)595 3781 y(NUP)-7
b(A)m(CK)18 b(design)i(01)1244 b(0.74)179 b(21.05)184
b(62.22)595 3872 y(NUP)-7 b(A)m(CK)18 b(design)i(02)1244
b(0.87)198 b(1.71)k(16.09)595 3963 y(NUP)-7 b(A)m(CK)18
b(design)i(03)1244 b(0.90)198 b(0.84)k(46.15)595 4055
y(NUP)-7 b(A)m(CK)18 b(design)i(04)1244 b(0.77)198 b(1.09)221
b(5.58)595 4146 y(V)l(iennaRN)m(A)19 b(design)h(01)1175
b(0.81)198 b(0.28)221 b(0.51)595 4237 y(V)l(iennaRN)m(A)19
b(design)h(02)1175 b(0.84)198 b(0.29)221 b(0.36)595 4329
y(V)l(iennaRN)m(A)19 b(design)h(03)1175 b(0.84)198 b(0.15)221
b(0.84)595 4420 y(NUP)-7 b(A)m(CK)18 b(design)i(01)1244
b(0.81)198 b(0.39)221 b(0.20)595 4511 y(NUP)-7 b(A)m(CK)18
b(design)i(02)1244 b(0.87)198 b(1.30)221 b(3.30)595 4603
y(NUP)-7 b(A)m(CK)18 b(design)i(03)1244 b(0.77)198 b(1.18)221
b(0.34)595 4694 y(NUP)-7 b(A)m(CK)18 b(design)i(04)1244
b(0.81)198 b(1.68)221 b(0.72)595 4785 y(V)l(iennaRN)m(A)19
b(design)h(01)1175 b(0.77)198 b(3.99)221 b(0.67)595 4877
y(V)l(iennaRN)m(A)19 b(design)h(03)1175 b(0.81)198 b(0.06)221
b(0.25)595 4968 y(Fragments)19 b(of)g(Old)g(W)m(inners)g(\(4\))946
b(1.00)198 b(0.09)221 b(0.21)595 5059 y(GOOD)19 b(SOLUTION)1238
b(1.00)198 b(0.16)221 b(0.57)595 5151 y(Mod)20 b(of)f(Quasispecies)h
(design)f(Fragments)h(of)e(old)i(winners)f(v2)126 b(0.87)198
b(0.97)k(10.48)2615 5333 y Fi(Continued)20 b(on)g(ne)o(xt)e(pa)o(g)o(e)
p Black -133 5542 4185 5 v -133 5642 a Ff(2)p Black eop
end
%%Page: 3 3
TeXDict begin 3 2 bop Black 2247 -253 a Fe(A)n(utomated)17
b(band)g(annotation)g(f)o(or)h(capillar)q(y)g(electr)o(ophoresis)p
-152 -170 4185 5 v Black 2916 43 a Fk(MSE)576 135 y(Data)h(Set)f(Name)
1347 b Fi(E)p Fk(-score)77 b(proposed)i(QuShape)p 538
166 2806 5 v 538 166 V 576 230 a(Combo)20 b(-)e(impro)o(v)o(ed)1283
b(1.00)198 b(0.13)221 b(0.30)576 322 y(EteRN)m(A)18 b(ensemble)i
(design)g(0)f(\(sparse)g(5\))712 b(1.00)198 b(0.09)221
b(0.59)576 413 y(EteRN)m(A)18 b(ensemble)i(design)g(1)f(\(sparse)g(5\))
712 b(0.97)198 b(0.21)221 b(0.75)576 504 y(EteRN)m(A)18
b(ensemble)i(design)g(2)f(\(sparse)g(5\))712 b(1.00)198
b(0.17)221 b(0.75)576 596 y(EteRN)m(A)18 b(ensemble)i(design)g(3)f
(\(sparse)g(5\))712 b(0.97)198 b(0.06)221 b(0.28)576
687 y(EteRN)m(A)18 b(ensemble)i(design)g(4)f(\(L2\))871
b(1.00)198 b(0.03)221 b(0.20)576 778 y(EteRN)m(A)18 b(ensemble)i
(design)g(5)f(\(L2\))871 b(0.94)198 b(0.33)221 b(0.78)576
869 y(EteRN)m(A)18 b(ensemble)i(design)g(6)f(\(L2\))871
b(0.97)198 b(0.14)221 b(0.68)576 961 y(EteRN)m(A)18 b(ensemble)i
(design)g(7)f(\(L2\))871 b(1.00)198 b(0.18)221 b(0.34)576
1052 y(EteRN)m(A)18 b(ensemble)i(design)g(08)f(\(con)m(v)o(entional\))
537 b(1.00)198 b(0.05)221 b(0.21)576 1143 y(EteRN)m(A)18
b(ensemble)i(design)g(09)f(\(con)m(v)o(entional\))537
b(0.97)198 b(0.14)221 b(0.66)576 1235 y(EteRN)m(A)18
b(ensemble)i(design)g(10)f(\(con)m(v)o(entional\))537
b(0.97)198 b(0.58)221 b(0.65)576 1326 y(EteRN)m(A)18
b(ensemble)i(design)g(11)f(\(con)m(v)o(entional\))537
b(1.00)198 b(0.15)221 b(0.27)576 1417 y(W)m(ild)18 b(Cross)h(-)g(2)1413
b(0.94)198 b(0.11)221 b(0.72)576 1509 y(Mod)20 b(of)f(JerryP70)1342
b(1.00)198 b(0.07)221 b(0.55)576 1600 y(Mod)20 b(of)f(brourds)h(1)f(st)
f(round)i(-)1018 b(0.84)198 b(0.13)221 b(0.88)576 1691
y(Unique)20 b(Stacks)1414 b(0.93)198 b(0.22)221 b(0.54)576
1783 y(G-C)18 b(pairs)h(in)g(multloops)h(in)f(same)g(direction)628
b(0.95)198 b(0.02)221 b(1.38)576 1874 y(Fisk)o(er')l(s)19
b(Binding)g(branches)1070 b(0.93)198 b(0.11)221 b(0.76)576
1965 y(NUP)-7 b(A)m(CK)18 b(design)i(01)1244 b(0.95)198
b(0.27)221 b(0.93)576 2057 y(NUP)-7 b(A)m(CK)18 b(design)i(02)1244
b(0.90)198 b(0.52)221 b(0.39)576 2148 y(NUP)-7 b(A)m(CK)18
b(design)i(03)1244 b(0.95)198 b(2.73)221 b(1.41)576 2239
y(NUP)-7 b(A)m(CK)18 b(design)i(04)1244 b(0.98)198 b(0.38)221
b(0.39)576 2331 y(V)l(iennaRN)m(A)19 b(design)h(04)1175
b(0.90)198 b(0.41)221 b(0.48)576 2422 y(EteRN)m(A)18
b(ensemble)i(design)g(02)f(\(con)m(v)o(entional\))537
b(0.95)198 b(1.80)221 b(1.35)576 2513 y(EteRN)m(A)18
b(ensemble)i(design)g(04)f(\(con)m(v)o(entional\))537
b(1.00)198 b(0.03)221 b(0.45)576 2605 y(EteRN)m(A)18
b(ensemble)i(design)g(05)f(\(sparse)h(5\))674 b(1.00)198
b(0.06)221 b(0.05)576 2696 y(EteRN)m(A)18 b(ensemble)i(design)g(06)f
(\(sparse)h(5\))674 b(1.00)198 b(0.27)221 b(0.41)576
2787 y(EteRN)m(A)18 b(ensemble)i(design)g(07)f(\(sparse)h(5\))674
b(0.99)198 b(0.20)221 b(0.39)576 2879 y(EteRN)m(A)18
b(ensemble)i(design)g(08)f(\(sparse)h(5\))674 b(1.00)198
b(0.12)221 b(0.10)576 2970 y(EteRN)m(A)18 b(ensemble)i(design)g(09)f
(\(L2\))834 b(0.99)198 b(0.28)k(13.50)576 3061 y(EteRN)m(A)18
b(ensemble)i(design)g(11)f(\(L2\))834 b(0.98)198 b(0.21)221
b(0.18)576 3153 y(EteRN)m(A)18 b(ensemble)i(design)g(12)f(\(L2\))834
b(0.99)198 b(0.08)221 b(0.23)576 3244 y(UUU)19 b(/)f(GCA)g(T)m(riloops)
i(\(Round)g(2\))877 b(0.85)198 b(0.51)221 b(3.00)576
3335 y(Uracil)18 b(in)h(1-2)h(x2)1373 b(0.85)198 b(0.12)221
b(0.79)576 3427 y(1)19 b(U-le)o(g,)f(1)h(A-le)o(g)1361
b(0.94)198 b(1.19)221 b(3.98)576 3518 y(Bonus)20 b(Army)1464
b(0.85)198 b(0.39)221 b(0.86)576 3609 y(wisda)o(v)o(e')l(s)19
b(2nd)h(round)1233 b(0.82)198 b(0.74)221 b(1.02)576 3701
y(C)19 b(-)f(B)m(A)m(CK)1534 b(0.85)198 b(1.19)221 b(0.24)576
3792 y(Beauty)19 b(in)g(Balance)1301 b(0.89)198 b(1.36)221
b(1.33)576 3883 y(V)-8 b(ery)19 b(Lo)n(w)g(Entrop)o(y)g(\2410.6)g(T)-7
b(-B-C)18 b(#5)858 b(0.88)198 b(0.14)221 b(0.16)576 3975
y(Impro)o(v)o(es)20 b(on)f(Quasispecies)h(UUU/GCA)e(T)m(riloop)467
b(0.91)198 b(0.08)221 b(0.06)576 4066 y(sta1)1728 b(0.79)198
b(0.23)221 b(1.86)p Black Black Black -152 5542 4185
5 v 3991 5642 a Ff(3)p Black eop end
%%Page: 4 4
TeXDict begin 4 3 bop Black -133 -253 a Fe(Lee)18 b(et)h(al)p
-133 -170 4185 5 v Black 750 43 a Fk(T)-6 b(able)26 b(S2:)j
(Description)e(of)f(longer)g(data)h(sets)f(and)g(results)g(from)g(the)g
(tests)g(with)g(these)750 135 y(data)i(sets.)1063 103
y Fd(a)1101 135 y Fk(An)g(e)o(xtraordinary)g(result)f(mainly)g(caused)i
(by)e(a)g(misalignment)h(between)750 226 y(pro\002les.)982
397 y(Name)312 b(#)19 b(pro\002les)77 b(#)19 b(bands)h(per)f(pro\002le)
84 b(MSE)g Fi(E)p Fk(-score)p 943 429 2033 5 v 943 429
V 982 493 a(GIR1)19 b(noref)250 b(21)404 b(199)320 b(0.09)145
b(0.99)982 584 y(GIR1)19 b(ref)324 b(21)404 b(225)320
b(0.12)145 b(0.98)982 676 y(AdoCbl)19 b(noref)180 b(16)404
b(179)320 b(0.61)145 b(0.97)982 767 y(AdoCbl)19 b(ref)254
b(16)404 b(205)320 b(0.68)145 b(0.90)982 858 y(VS)18
b(noref)321 b(48)404 b(195)320 b(0.16)145 b(0.96)982
950 y(VS)18 b(ref)395 b(48)404 b(233)320 b(0.12)145 b(0.96)982
1041 y(SAM)18 b(noref)255 b(32)404 b(103)320 b(0.09)145
b(0.96)982 1132 y(SAM)18 b(ref)329 b(32)404 b(143)320
b(0.09)145 b(0.96)982 1224 y(HTP)18 b(noref)275 b(32)422
b(79)339 b(0.05)145 b(1.00)982 1315 y(HTP)18 b(ref)349
b(32)404 b(116)320 b(0.05)145 b(1.00)982 1406 y(Tbox)435
b(20)404 b(141)320 b(0.34)145 b(0.98)982 1498 y(tRN)m(A)416
b(20)404 b(119)320 b(0.63)145 b(0.83)982 1589 y(cdiAMP)339
b(36)404 b(171)320 b(0.16)145 b(0.99)982 1680 y(16S)495
b(8)422 b(125)320 b(0.21)145 b(0.98)982 1772 y(C19)468
b(16)404 b(319)320 b(0.18)145 b(0.99)982 1863 y(tC19)447
b(16)404 b(248)320 b(0.01)145 b(1.00)982 1954 y(tC19Z)401
b(16)j(248)320 b(0.01)145 b(0.99)982 2045 y(C1Lig)420
b(7)i(167)320 b(0.04)145 b(1.00)982 2137 y(Hox5)446 b(9)422
b(261)320 b(0.11)145 b(0.99)982 2228 y(Hox9D)373 b(16)404
b(296)320 b(0.44)145 b(0.99)982 2319 y(L-21)447 b(20)404
b(413)301 b(2.00)2594 2288 y Fd(a)2758 2319 y Fk(0.98)p
Black Black Black -133 5542 4185 5 v -133 5642 a Ff(4)p
Black eop end
%%Page: 5 5
TeXDict begin 5 4 bop Black 2247 -253 a Fe(A)n(utomated)17
b(band)g(annotation)g(f)o(or)h(capillar)q(y)g(electr)o(ophoresis)p
-152 -170 4185 5 v Black 731 43 a Fk(T)-6 b(able)33 b(S3:)39
b(Name)32 b(of)h(data)g(set)f(and)h(corresponding)i(results)e(respecti)
n(v)o(ely)g(from)g(the)731 135 y(proposed)20 b(method)f(and)g(manual)g
(annotation,)h(along)f(with)f(the)g(ratio)g(between)h(tw)o(o)g(MSE)731
226 y(v)n(alues)h(\(proposed)g(/)f(manual\))2715 397
y(MSE)804 489 y(Data)f(Set)g(Name)1022 b(ratio)93 b(proposed)78
b(manual)p 765 520 2351 5 v 765 520 V 804 584 a(Fragments)19
b(of)g(Old)f(W)m(inners)681 b(1.15)168 b(0.82)194 b(0.71)804
676 y(FNM)18 b(Apatamet)h(1st)g(try)798 b(0.94)168 b(0.57)194
b(0.61)804 767 y(Fre)o(yw)o(a)18 b(-)h(Cross)g(FMN)g(-)f(Reshiram)493
b(2.60)168 b(0.24)194 b(0.09)804 858 y(wisda)o(v)o(e')l(s)18
b(apatamer)i(#1)799 b(1.32)168 b(0.26)194 b(0.20)804
950 y(Fisk)o(ers)18 b(single)i(aptamer)f(2)749 b(9.31)168
b(1.43)194 b(0.15)804 1041 y(Starry')l(s)18 b(Single)g(III)941
b(0.73)168 b(0.11)194 b(0.15)804 1132 y(fold)19 b(vs)g(shapes)1054
b(1.22)168 b(0.18)194 b(0.15)804 1224 y(V)l(iennaRN)m(A)19
b(design)g(01)804 b(0.97)168 b(0.58)194 b(0.60)804 1315
y(V)l(iennaRN)m(A)19 b(design)g(03)804 b(0.67)168 b(0.15)194
b(0.22)804 1406 y(V)l(iennaRN)m(A)19 b(design)g(04)804
b(1.04)168 b(0.09)194 b(0.09)804 1498 y(NUP)-7 b(A)m(CK)18
b(design)h(02)873 b(3.80)168 b(4.60)194 b(1.21)804 1589
y(NUP)-7 b(A)m(CK)18 b(design)h(04)855 b(10.10)149 b(3.18)194
b(0.32)804 1680 y(Fre)o(yw)o(a)18 b(-)h(Cross)g(FMN)g(R2)f(-)h(Zekrom)
437 b(3.31)168 b(0.98)194 b(0.30)804 1772 y(T)-6 b(adpole)19
b(2.0)1126 b(1.77)168 b(0.10)194 b(0.06)804 1863 y(Kiwi)1326
b(4.07)168 b(0.11)194 b(0.03)804 1954 y(LR)m(Opp)o(y)19
b(93.4\045)h(FMN)826 b(2.07)168 b(0.09)194 b(0.04)804
2045 y(EteRN)m(A)18 b(ensemble)i(design)g(01)f(\(L2\))462
b(5.33)168 b(4.27)194 b(0.80)804 2137 y(EteRN)m(A)18
b(ensemble)i(design)g(02)f(\(L2\))462 b(3.03)168 b(0.19)194
b(0.06)804 2228 y(EteRN)m(A)18 b(ensemble)i(design)g(03)f(\(L2\))462
b(1.12)168 b(0.22)194 b(0.19)804 2319 y(EteRN)m(A)18
b(ensemble)i(design)g(04)f(\(L2\))462 b(1.47)168 b(0.39)194
b(0.26)804 2411 y(EteRN)m(A)18 b(ensemble)i(design)g(05)f(\(sparse)g
(5\))303 b(2.51)168 b(0.17)194 b(0.07)804 2502 y(EteRN)m(A)18
b(ensemble)i(design)g(06)f(\(sparse)g(5\))303 b(1.91)168
b(0.58)194 b(0.31)804 2593 y(EteRN)m(A)18 b(ensemble)i(design)g(07)f
(\(sparse)g(5\))303 b(0.83)168 b(0.37)194 b(0.44)804
2685 y(EteRN)m(A)18 b(ensemble)i(design)g(08)f(\(sparse)g(5\))303
b(5.90)168 b(0.75)194 b(0.13)804 2776 y(EteRN)m(A)18
b(ensemble)i(design)g(09)f(\(con)m(v)o(entional\))147
b(13.01)i(1.69)194 b(0.13)804 2867 y(EteRN)m(A)18 b(ensemble)i(design)g
(10)f(\(con)m(v)o(entional\))165 b(1.16)j(1.01)194 b(0.87)804
2959 y(EteRN)m(A)18 b(ensemble)i(design)g(11)f(\(con)m(v)o(entional\))
165 b(1.86)j(0.17)194 b(0.09)804 3050 y(EteRN)m(A)18
b(ensemble)i(design)g(12)f(\(con)m(v)o(entional\))165
b(2.51)j(0.23)194 b(0.09)804 3141 y(UUU)18 b(/)h(GCA)f(T)m(riloops)h
(\(Round)h(2\))488 b(40.59)149 b(0.51)194 b(0.01)804
3233 y(Uracil)18 b(in)h(1-2)g(x2)1002 b(1.20)168 b(0.12)194
b(0.10)804 3324 y(1)19 b(U-le)o(g,)f(1)h(A-le)o(g)989
b(3.62)168 b(1.19)194 b(0.33)804 3415 y(Bonus)19 b(Army)1093
b(1.61)168 b(0.39)194 b(0.21)804 3507 y(wisda)o(v)o(e')l(s)18
b(2nd)i(round)844 b(12.73)149 b(0.74)194 b(0.06)804 3598
y(C)18 b(-)h(B)m(A)m(CK)1162 b(2.75)168 b(1.19)194 b(0.43)804
3689 y(Beauty)19 b(in)g(Balance)929 b(9.22)168 b(1.36)194
b(0.15)804 3781 y(V)-8 b(ery)18 b(Lo)n(w)h(Entrop)o(y)h(\2410.6)f(T)-7
b(-B-C)18 b(#5)486 b(1.36)168 b(0.14)194 b(0.11)804 3872
y(Impro)o(v)o(es)19 b(on)h(Quasispecies)f(UUU/GCA)f(T)m(riloop)78
b(11.22)149 b(0.08)194 b(0.01)804 3963 y(sta1)1356 b(1.09)168
b(0.23)194 b(0.21)p Black Black Black -152 5542 4185
5 v 3991 5642 a Ff(5)p Black eop end
%%Page: 6 6
TeXDict begin 6 5 bop Black -133 -253 a Fe(Lee)18 b(et)h(al)p
-133 -170 4185 5 v Black 750 43 a Fk(T)-6 b(able)45 b(S4:)56
b(Name)45 b(and)g(type)g(of)f(data)h(pro\002le,)56 b(and)45
b(the)g(Pearson')l(s)g(correlation)750 135 y(coef)n(\002cients)36
b(between)h(manually)g(quanti\002ed)f(areas,)44 b(and)37
b(those)f(quanti\002ed)h(by)f(the)750 226 y(proposed)28
b(method)f(and)g(by)g(QuShape)g(respecti)n(v)o(ely)-5
b(.)31 b(A)-6 b(v)o(erage)27 b(v)n(alues)h(are)e(posted)h(for)750
317 y(the)19 b(multiple)g(results)g(from)g(repetiti)n(v)o(e)g(e)o
(xperiments)g(with)g(same)g(data.)2722 489 y(correlation)g(\(a)o(v)o
(eraged\))538 580 y(Data)g(Set)f(Name)1348 b(Data)18
b(T)-6 b(ype)78 b(proposed)96 b(QuShape)p 500 612 2920
5 v 500 612 V 538 676 a(Fragments)19 b(of)g(Old)g(W)m(inners)1076
b(DMS)184 b(0.9389)164 b(0.9654)538 767 y(FNM)19 b(Apatamet)g(1st)g
(try)1193 b(DMS)184 b(0.6913)164 b(0.9468)538 858 y(Fre)o(yw)o(a)19
b(-)g(Cross)g(FMN)f(-)h(Reshiram)888 b(DMS)184 b(0.9734)164
b(0.9433)538 950 y(wisda)o(v)o(e')l(s)19 b(apatamer)h(#1)1194
b(DMS)184 b(0.9796)164 b(0.9546)538 1041 y(Fisk)o(ers)19
b(single)g(aptamer)h(2)1144 b(DMS)184 b(0.9710)164 b(0.9588)538
1132 y(Starry')l(s)18 b(Single)h(III)1336 b(DMS)184 b(0.9788)164
b(0.7297)538 1224 y(fold)19 b(vs)g(shapes)1450 b(DMS)184
b(0.9898)164 b(0.9880)538 1315 y(V)l(iennaRN)m(A)19 b(design)h(01)1199
b(DMS)184 b(0.9932)164 b(0.9745)538 1406 y(V)l(iennaRN)m(A)19
b(design)h(03)1199 b(DMS)184 b(0.9965)164 b(0.9929)538
1498 y(V)l(iennaRN)m(A)19 b(design)h(04)1199 b(DMS)184
b(0.9697)164 b(0.9232)538 1589 y(NUP)-7 b(A)m(CK)18 b(design)i(02)1268
b(DMS)184 b(0.9180)164 b(0.8848)538 1680 y(NUP)-7 b(A)m(CK)18
b(design)i(04)1268 b(DMS)184 b(0.9539)164 b(0.7359)538
1772 y(Fre)o(yw)o(a)19 b(-)g(Cross)g(FMN)f(R2)h(-)g(Zekrom)832
b(DMS)184 b(0.9816)164 b(0.7436)538 1863 y(T)-6 b(adpole)20
b(2.0)1521 b(DMS)184 b(0.9764)164 b(0.9444)538 1954 y(Kiwi)1722
b(DMS)184 b(0.9964)164 b(0.8889)538 2045 y(LR)m(Opp)o(y)20
b(93.4\045)f(FMN)1222 b(DMS)184 b(0.9901)164 b(0.9422)538
2137 y(EteRN)m(A)19 b(ensemble)h(design)f(01)h(\(L2\))857
b(DMS)184 b(0.9863)164 b(0.9917)538 2228 y(EteRN)m(A)19
b(ensemble)h(design)f(02)h(\(L2\))857 b(DMS)184 b(0.9643)164
b(0.8977)538 2319 y(EteRN)m(A)19 b(ensemble)h(design)f(03)h(\(L2\))857
b(DMS)184 b(0.9198)164 b(0.9130)538 2411 y(EteRN)m(A)19
b(ensemble)h(design)f(04)h(\(L2\))857 b(DMS)184 b(0.9175)164
b(0.9482)538 2502 y(EteRN)m(A)19 b(ensemble)h(design)f(05)h(\(sparse)f
(5\))698 b(DMS)184 b(0.9676)164 b(0.9616)538 2593 y(EteRN)m(A)19
b(ensemble)h(design)f(06)h(\(sparse)f(5\))698 b(DMS)184
b(0.9894)164 b(0.9822)538 2685 y(EteRN)m(A)19 b(ensemble)h(design)f(07)
h(\(sparse)f(5\))698 b(DMS)184 b(0.9499)164 b(0.8044)538
2776 y(EteRN)m(A)19 b(ensemble)h(design)f(08)h(\(sparse)f(5\))698
b(DMS)184 b(0.9508)164 b(0.9748)538 2867 y(EteRN)m(A)19
b(ensemble)h(design)f(09)h(\(con)m(v)o(entional\))560
b(DMS)184 b(0.5388)164 b(0.6876)538 2959 y(EteRN)m(A)19
b(ensemble)h(design)f(10)h(\(con)m(v)o(entional\))560
b(DMS)184 b(0.9898)164 b(0.9867)538 3050 y(EteRN)m(A)19
b(ensemble)h(design)f(11)h(\(con)m(v)o(entional\))560
b(DMS)184 b(0.9918)164 b(0.9480)538 3141 y(EteRN)m(A)19
b(ensemble)h(design)f(12)h(\(con)m(v)o(entional\))560
b(DMS)184 b(0.9763)164 b(0.9109)538 3233 y(Brourd)20
b(-)e(FMN)m(A)h(1)1292 b(SHAPE)145 b(0.9733)164 b(0.9480)538
3324 y(Brourd)20 b(-)e(FMN)m(A)h(1)1329 b(DMS)184 b(0.9907)164
b(0.7227)538 3415 y(The)19 b(Re)n(v)o(olution)h(of)e(the)h(Mobile)h
(Archer)720 b(SHAPE)145 b(0.9891)164 b(0.9360)538 3507
y(The)19 b(Re)n(v)o(olution)h(of)e(the)h(Mobile)h(Archer)757
b(DMS)184 b(0.9814)164 b(0.9785)538 3598 y(Fragments)19
b(of)g(old)g(W)m(inners)g(\(3\))950 b(SHAPE)145 b(0.9943)164
b(0.9756)538 3689 y(Fragments)19 b(of)g(old)g(W)m(inners)g(\(3\))987
b(DMS)184 b(0.9980)164 b(0.9868)538 3781 y(Smart)18 b(Solution)1385
b(SHAPE)145 b(0.9898)164 b(0.9883)538 3872 y(Smart)18
b(Solution)1422 b(DMS)184 b(0.9941)164 b(0.8834)538 3963
y(Lump)19 b(In)g(My)h(Throat)1235 b(SHAPE)145 b(0.9530)164
b(0.9545)538 4055 y(Lump)19 b(In)g(My)h(Throat)1272 b(DMS)184
b(0.9887)164 b(0.7225)538 4146 y(JP-14-0-17)20 b(\(FMN-SBS)d(II\))1046
b(SHAPE)145 b(0.9436)164 b(0.9762)538 4237 y(JP-14-0-17)20
b(\(FMN-SBS)d(II\))1083 b(DMS)184 b(0.9803)164 b(0.9684)538
4329 y(SBSII-2)1589 b(SHAPE)145 b(0.9192)164 b(0.9057)538
4420 y(SBSII-2)1626 b(DMS)184 b(0.9571)164 b(0.9093)538
4511 y(Mod)20 b(of)f(Quasispecies)h(design)g(Fragments)f(of)g(old)g
(winners)206 b(SHAPE)145 b(0.9417)164 b(0.9724)538 4603
y(Mod)20 b(of)f(Quasispecies)h(design)g(Fragments)f(of)g(old)g(winners)
243 b(DMS)184 b(0.9631)164 b(0.4340)538 4694 y(NUP)-7
b(A)m(CK)18 b(design)i(01)1231 b(SHAPE)145 b(0.9683)164
b(0.9706)538 4785 y(NUP)-7 b(A)m(CK)18 b(design)i(01)1268
b(DMS)184 b(0.9860)164 b(0.9842)538 4877 y(NUP)-7 b(A)m(CK)18
b(design)i(02)1231 b(SHAPE)145 b(0.8134)164 b(0.5124)538
4968 y(NUP)-7 b(A)m(CK)18 b(design)i(02)1268 b(DMS)184
b(0.9185)164 b(0.4406)538 5059 y(NUP)-7 b(A)m(CK)18 b(design)i(03)1231
b(SHAPE)145 b(0.9476)164 b(0.9102)538 5151 y(NUP)-7 b(A)m(CK)18
b(design)i(03)1268 b(DMS)184 b(0.9987)164 b(0.9978)2672
5333 y Fi(Continued)20 b(on)f(ne)o(xt)g(pa)o(g)o(e)p
Black -133 5542 4185 5 v -133 5642 a Ff(6)p Black eop
end
%%Page: 7 7
TeXDict begin 7 6 bop Black 2247 -253 a Fe(A)n(utomated)17
b(band)g(annotation)g(f)o(or)h(capillar)q(y)g(electr)o(ophoresis)p
-152 -170 4185 5 v Black 2703 43 a Fk(correlation)h(\(a)o(v)o(eraged\))
519 135 y(Data)g(Set)f(Name)1347 b(Data)19 b(T)-6 b(ype)78
b(proposed)96 b(QuShape)p 481 166 2920 5 v 481 166 V
519 230 a(NUP)-7 b(A)m(CK)18 b(design)i(04)1231 b(SHAPE)145
b(0.9994)164 b(0.9898)519 322 y(NUP)-7 b(A)m(CK)18 b(design)i(04)1268
b(DMS)184 b(0.9994)164 b(0.9657)519 413 y(V)l(iennaRN)m(A)19
b(design)h(01)1162 b(SHAPE)145 b(0.9206)164 b(0.7119)519
504 y(V)l(iennaRN)m(A)19 b(design)h(01)1199 b(DMS)184
b(0.9831)164 b(0.5016)519 596 y(V)l(iennaRN)m(A)19 b(design)h(02)1162
b(SHAPE)145 b(0.8999)164 b(0.7067)519 687 y(V)l(iennaRN)m(A)19
b(design)h(02)1199 b(DMS)184 b(0.9789)164 b(0.6991)519
778 y(V)l(iennaRN)m(A)19 b(design)h(03)1162 b(SHAPE)145
b(0.8780)164 b(0.7357)519 869 y(V)l(iennaRN)m(A)19 b(design)h(03)1199
b(DMS)184 b(0.9726)164 b(0.7832)519 961 y(NUP)-7 b(A)m(CK)18
b(design)i(01)1231 b(SHAPE)145 b(0.8582)164 b(0.8934)519
1052 y(NUP)-7 b(A)m(CK)18 b(design)i(01)1268 b(DMS)184
b(0.9913)164 b(0.9948)519 1143 y(NUP)-7 b(A)m(CK)18 b(design)i(02)1231
b(SHAPE)145 b(0.8971)164 b(0.7229)519 1235 y(NUP)-7 b(A)m(CK)18
b(design)i(02)1268 b(DMS)184 b(0.9497)164 b(0.9425)519
1326 y(NUP)-7 b(A)m(CK)18 b(design)i(03)1231 b(SHAPE)145
b(0.6857)164 b(0.8557)519 1417 y(NUP)-7 b(A)m(CK)18 b(design)i(03)1268
b(DMS)184 b(0.9487)164 b(0.9545)519 1509 y(NUP)-7 b(A)m(CK)18
b(design)i(04)1231 b(SHAPE)145 b(0.9626)164 b(0.7790)519
1600 y(NUP)-7 b(A)m(CK)18 b(design)i(04)1268 b(DMS)184
b(0.9923)164 b(0.8958)519 1691 y(V)l(iennaRN)m(A)19 b(design)h(01)1162
b(SHAPE)145 b(0.9422)164 b(0.7428)519 1783 y(V)l(iennaRN)m(A)19
b(design)h(01)1199 b(DMS)184 b(0.9714)164 b(0.9098)519
1874 y(V)l(iennaRN)m(A)19 b(design)h(03)1162 b(SHAPE)145
b(0.9907)164 b(0.9231)519 1965 y(V)l(iennaRN)m(A)19 b(design)h(03)1199
b(DMS)184 b(0.9954)164 b(0.9144)519 2057 y(Fragments)19
b(of)g(Old)g(W)m(inners)g(\(4\))933 b(SHAPE)145 b(0.9742)164
b(0.9742)519 2148 y(Fragments)19 b(of)g(Old)g(W)m(inners)g(\(4\))970
b(DMS)184 b(0.9932)164 b(0.9890)519 2239 y(GOOD)19 b(SOLUTION)1225
b(SHAPE)145 b(0.9514)164 b(0.9355)519 2331 y(GOOD)19
b(SOLUTION)1262 b(DMS)184 b(0.9840)164 b(0.9714)519 2422
y(Mod)20 b(of)f(Quasispecies)h(design)f(Fragments)h(of)f(old)g(winners)
g(v2)113 b(SHAPE)145 b(0.5959)164 b(0.6670)519 2513 y(Mod)20
b(of)f(Quasispecies)h(design)f(Fragments)h(of)f(old)g(winners)g(v2)150
b(DMS)184 b(0.5214)164 b(0.9051)519 2605 y(Combo)20 b(-)e(impro)o(v)o
(ed)1270 b(SHAPE)145 b(0.9482)164 b(0.9111)519 2696 y(Combo)20
b(-)e(impro)o(v)o(ed)1307 b(DMS)184 b(0.9962)164 b(0.9854)519
2787 y(EteRN)m(A)19 b(ensemble)g(design)h(0)f(\(sparse)h(5\))698
b(SHAPE)145 b(0.9483)164 b(0.9265)519 2879 y(EteRN)m(A)19
b(ensemble)g(design)h(0)f(\(sparse)h(5\))735 b(DMS)184
b(0.9800)164 b(0.8917)519 2970 y(EteRN)m(A)19 b(ensemble)g(design)h(1)f
(\(sparse)h(5\))698 b(SHAPE)145 b(0.9159)164 b(0.9152)519
3061 y(EteRN)m(A)19 b(ensemble)g(design)h(1)f(\(sparse)h(5\))735
b(DMS)184 b(0.9540)164 b(0.9228)519 3153 y(EteRN)m(A)19
b(ensemble)g(design)h(2)f(\(sparse)h(5\))698 b(SHAPE)145
b(0.9390)164 b(0.9145)519 3244 y(EteRN)m(A)19 b(ensemble)g(design)h(2)f
(\(sparse)h(5\))735 b(DMS)184 b(0.9597)164 b(0.9029)519
3335 y(EteRN)m(A)19 b(ensemble)g(design)h(3)f(\(sparse)h(5\))698
b(SHAPE)145 b(0.9960)164 b(0.9217)519 3427 y(EteRN)m(A)19
b(ensemble)g(design)h(3)f(\(sparse)h(5\))735 b(DMS)184
b(0.9967)164 b(0.9216)519 3518 y(EteRN)m(A)19 b(ensemble)g(design)h(4)f
(\(L2\))858 b(SHAPE)145 b(0.9947)164 b(0.9172)519 3609
y(EteRN)m(A)19 b(ensemble)g(design)h(4)f(\(L2\))895 b(DMS)184
b(0.9878)164 b(0.9782)519 3701 y(EteRN)m(A)19 b(ensemble)g(design)h(5)f
(\(L2\))858 b(SHAPE)145 b(0.5964)164 b(0.4973)519 3792
y(EteRN)m(A)19 b(ensemble)g(design)h(5)f(\(L2\))895 b(DMS)184
b(0.8830)164 b(0.8574)519 3883 y(EteRN)m(A)19 b(ensemble)g(design)h(6)f
(\(L2\))858 b(SHAPE)145 b(0.9790)164 b(0.9049)519 3975
y(EteRN)m(A)19 b(ensemble)g(design)h(6)f(\(L2\))895 b(DMS)184
b(0.9884)164 b(0.8338)519 4066 y(EteRN)m(A)19 b(ensemble)g(design)h(7)f
(\(L2\))858 b(SHAPE)145 b(0.9613)164 b(0.9730)519 4157
y(EteRN)m(A)19 b(ensemble)g(design)h(7)f(\(L2\))895 b(DMS)184
b(0.9503)164 b(0.9526)519 4248 y(EteRN)m(A)19 b(ensemble)g(design)h(08)
g(\(con)m(v)o(entional\))523 b(SHAPE)145 b(0.9904)164
b(0.9249)519 4340 y(EteRN)m(A)19 b(ensemble)g(design)h(08)g(\(con)m(v)o
(entional\))560 b(DMS)184 b(0.9948)164 b(0.9326)519 4431
y(EteRN)m(A)19 b(ensemble)g(design)h(09)g(\(con)m(v)o(entional\))523
b(SHAPE)145 b(0.9413)164 b(0.9193)519 4522 y(EteRN)m(A)19
b(ensemble)g(design)h(09)g(\(con)m(v)o(entional\))560
b(DMS)184 b(0.9936)164 b(0.9218)519 4614 y(EteRN)m(A)19
b(ensemble)g(design)h(10)g(\(con)m(v)o(entional\))523
b(SHAPE)145 b(0.6216)164 b(0.8549)519 4705 y(EteRN)m(A)19
b(ensemble)g(design)h(10)g(\(con)m(v)o(entional\))560
b(DMS)184 b(0.9644)164 b(0.9046)519 4796 y(EteRN)m(A)19
b(ensemble)g(design)h(11)g(\(con)m(v)o(entional\))523
b(SHAPE)145 b(0.9857)164 b(0.9857)519 4888 y(EteRN)m(A)19
b(ensemble)g(design)h(11)g(\(con)m(v)o(entional\))560
b(DMS)184 b(0.9887)164 b(0.9845)519 4979 y(W)m(ild)18
b(Cross)h(-)g(2)1400 b(SHAPE)145 b(0.9767)164 b(0.7966)519
5070 y(W)m(ild)18 b(Cross)h(-)g(2)1437 b(DMS)184 b(0.9860)164
b(0.9414)519 5162 y(Mod)20 b(of)f(JerryP70)1329 b(SHAPE)145
b(0.9576)164 b(0.9068)2653 5344 y Fi(Continued)20 b(on)f(ne)o(xt)g(pa)o
(g)o(e)p Black -152 5542 4185 5 v 3991 5642 a Ff(7)p
Black eop end
%%Page: 8 8
TeXDict begin 8 7 bop Black -133 -253 a Fe(Lee)18 b(et)h(al)p
-133 -170 4185 5 v Black 2722 43 a Fk(correlation)g(\(a)o(v)o(eraged\))
538 135 y(Data)g(Set)f(Name)1348 b(Data)18 b(T)-6 b(ype)78
b(proposed)96 b(QuShape)p 500 166 2920 5 v 500 166 V
538 230 a(Mod)20 b(of)f(JerryP70)1366 b(DMS)184 b(0.9957)164
b(0.7095)538 322 y(Mod)20 b(of)f(brourds)h(1)f(st)f(round)i(-)1005
b(SHAPE)145 b(0.9992)164 b(0.8678)538 413 y(Mod)20 b(of)f(brourds)h(1)f
(st)f(round)i(-)1042 b(DMS)184 b(0.9998)164 b(0.9901)538
504 y(Unique)20 b(Stacks)1401 b(SHAPE)145 b(0.9680)164
b(0.8632)538 596 y(Unique)20 b(Stacks)1438 b(DMS)184
b(0.9862)164 b(0.8142)538 687 y(G-C)19 b(pairs)g(in)f(multloops)i(in)f
(same)g(direction)615 b(SHAPE)145 b(0.9948)164 b(0.9698)538
778 y(G-C)19 b(pairs)g(in)f(multloops)i(in)f(same)g(direction)652
b(DMS)184 b(0.9991)164 b(0.9866)538 869 y(Fisk)o(er')l(s)19
b(Binding)g(branches)1057 b(SHAPE)145 b(0.3851)164 b(0.9764)538
961 y(Fisk)o(er')l(s)19 b(Binding)g(branches)1094 b(DMS)184
b(0.2767)164 b(0.9424)538 1052 y(NUP)-7 b(A)m(CK)18 b(design)i(01)1231
b(SHAPE)145 b(0.9885)164 b(0.9591)538 1143 y(NUP)-7 b(A)m(CK)18
b(design)i(01)1268 b(DMS)184 b(0.9920)164 b(0.9836)538
1235 y(NUP)-7 b(A)m(CK)18 b(design)i(02)1231 b(SHAPE)145
b(0.8843)164 b(0.8366)538 1326 y(NUP)-7 b(A)m(CK)18 b(design)i(02)1268
b(DMS)184 b(0.9646)164 b(0.8545)538 1417 y(NUP)-7 b(A)m(CK)18
b(design)i(03)1231 b(SHAPE)145 b(0.8027)164 b(0.7560)538
1509 y(NUP)-7 b(A)m(CK)18 b(design)i(03)1268 b(DMS)184
b(0.9574)164 b(0.7813)538 1600 y(NUP)-7 b(A)m(CK)18 b(design)i(04)1231
b(SHAPE)145 b(0.7613)164 b(0.9667)538 1691 y(NUP)-7 b(A)m(CK)18
b(design)i(04)1268 b(DMS)184 b(0.9245)164 b(0.9888)538
1783 y(V)l(iennaRN)m(A)19 b(design)h(04)1162 b(SHAPE)145
b(0.8822)164 b(0.8842)538 1874 y(V)l(iennaRN)m(A)19 b(design)h(04)1199
b(DMS)184 b(0.9935)164 b(0.9872)538 1965 y(EteRN)m(A)19
b(ensemble)h(design)f(02)h(\(con)m(v)o(entional\))523
b(SHAPE)145 b(0.9468)164 b(0.9561)538 2057 y(EteRN)m(A)19
b(ensemble)h(design)f(02)h(\(con)m(v)o(entional\))560
b(DMS)184 b(0.8877)164 b(0.8607)538 2148 y(EteRN)m(A)19
b(ensemble)h(design)f(04)h(\(con)m(v)o(entional\))523
b(SHAPE)145 b(0.9814)164 b(0.9433)538 2239 y(EteRN)m(A)19
b(ensemble)h(design)f(04)h(\(con)m(v)o(entional\))560
b(DMS)184 b(0.9903)164 b(0.7494)538 2331 y(EteRN)m(A)19
b(ensemble)h(design)f(05)h(\(sparse)f(5\))661 b(SHAPE)145
b(0.8983)164 b(0.9915)538 2422 y(EteRN)m(A)19 b(ensemble)h(design)f(05)
h(\(sparse)f(5\))698 b(DMS)184 b(0.9931)164 b(0.9961)538
2513 y(EteRN)m(A)19 b(ensemble)h(design)f(06)h(\(sparse)f(5\))661
b(SHAPE)145 b(0.9553)164 b(0.5474)538 2605 y(EteRN)m(A)19
b(ensemble)h(design)f(06)h(\(sparse)f(5\))698 b(DMS)184
b(0.9615)164 b(0.9208)538 2696 y(EteRN)m(A)19 b(ensemble)h(design)f(07)
h(\(sparse)f(5\))661 b(SHAPE)145 b(0.9886)164 b(0.9736)538
2787 y(EteRN)m(A)19 b(ensemble)h(design)f(07)h(\(sparse)f(5\))698
b(DMS)184 b(0.9343)164 b(0.9637)538 2879 y(EteRN)m(A)19
b(ensemble)h(design)f(08)h(\(sparse)f(5\))661 b(SHAPE)145
b(0.9814)164 b(0.9753)538 2970 y(EteRN)m(A)19 b(ensemble)h(design)f(08)
h(\(sparse)f(5\))698 b(DMS)184 b(0.9775)164 b(0.9060)538
3061 y(EteRN)m(A)19 b(ensemble)h(design)f(09)h(\(L2\))820
b(SHAPE)145 b(0.9468)164 b(0.9359)538 3153 y(EteRN)m(A)19
b(ensemble)h(design)f(09)h(\(L2\))857 b(DMS)184 b(0.8991)164
b(0.5745)538 3244 y(EteRN)m(A)19 b(ensemble)h(design)f(11)h(\(L2\))820
b(SHAPE)145 b(0.8985)164 b(0.9365)538 3335 y(EteRN)m(A)19
b(ensemble)h(design)f(11)h(\(L2\))857 b(DMS)184 b(0.9389)164
b(0.8063)538 3427 y(EteRN)m(A)19 b(ensemble)h(design)f(12)h(\(L2\))820
b(SHAPE)145 b(0.9781)164 b(0.9616)538 3518 y(EteRN)m(A)19
b(ensemble)h(design)f(12)h(\(L2\))857 b(DMS)184 b(0.9633)164
b(0.9511)538 3609 y(UUU)19 b(/)f(GCA)h(T)m(riloops)g(\(Round)h(2\))864
b(SHAPE)145 b(0.9896)164 b(0.8104)538 3701 y(Uracil)19
b(in)f(1-2)i(x2)1360 b(SHAPE)145 b(0.9808)164 b(0.9665)538
3792 y(1)19 b(U-le)o(g,)g(1)g(A-le)o(g)1347 b(SHAPE)145
b(0.8221)164 b(0.6919)538 3883 y(Bonus)20 b(Army)1451
b(SHAPE)145 b(0.9763)164 b(0.7612)538 3975 y(wisda)o(v)o(e')l(s)19
b(2nd)h(round)1220 b(SHAPE)145 b(0.9739)164 b(0.8770)538
4066 y(C)19 b(-)f(B)m(A)m(CK)1521 b(SHAPE)145 b(0.9419)164
b(0.9441)538 4157 y(Beauty)20 b(in)e(Balance)1288 b(SHAPE)145
b(0.9391)164 b(0.7477)538 4248 y(V)-8 b(ery)19 b(Lo)n(w)g(Entrop)o(y)g
(\2410.6)g(T)-7 b(-B-C)18 b(#5)845 b(SHAPE)145 b(0.9615)164
b(0.8384)538 4340 y(Impro)o(v)o(es)20 b(on)f(Quasispecies)h(UUU/GCA)e
(T)m(riloop)454 b(SHAPE)145 b(0.9885)164 b(0.9971)538
4431 y(sta1)1715 b(SHAPE)145 b(0.9956)164 b(0.9117)p
Black Black Black -133 5542 4185 5 v -133 5642 a Ff(8)p
Black eop end
%%Page: 9 9
TeXDict begin 9 8 bop Black 2247 -253 a Fe(A)n(utomated)17
b(band)g(annotation)g(f)o(or)h(capillar)q(y)g(electr)o(ophoresis)p
-152 -170 4185 5 v Black -152 63 a Fm(REFERENCES)p Black
Black -152 170 a Fc(Kim,)28 b(H.,)f(Cordero,)g(P)-6 b(.,)27
b(Das,)g(R.,)f(and)e(Y)-6 b(oon,)27 b(S.)c(\(2013\).)49
b(Hitrace-web:)28 b(an)c(online)f(tool)-75 245 y(for)k(rob)o(ust)f
(analysis)f(of)h(high-throughput)i(capillary)e(electrophoresis.)57
b Fb(Nucleic)26 b(Acids)2092 63 y(Resear)n(c)o(h)p Fc(,)12
b Fa(41)p Fc(\(W1\),)j(W492\226W498.)p Black -152 5542
V 3991 5642 a Ff(9)p Black eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
